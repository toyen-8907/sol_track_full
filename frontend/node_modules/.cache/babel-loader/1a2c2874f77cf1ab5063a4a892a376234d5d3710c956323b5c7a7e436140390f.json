{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var DefaultAccountStateInstruction;\n(function (DefaultAccountStateInstruction) {\n  DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Update\"] = 1] = \"Update\";\n})(DefaultAccountStateInstruction || (DefaultAccountStateInstruction = {}));\n/** TODO: docs */\nexport const defaultAccountStateInstructionData = struct([u8('instruction'), u8('defaultAccountStateInstruction'), u8('accountState')]);\n/**\n * Construct an InitializeDefaultAccountState instruction\n *\n * @param mint         Mint to initialize\n * @param accountState Default account state to set on all new accounts\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeDefaultAccountStateInstruction(mint, accountState, programId = TOKEN_2022_PROGRAM_ID) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n  defaultAccountStateInstructionData.encode({\n    instruction: TokenInstruction.DefaultAccountStateExtension,\n    defaultAccountStateInstruction: DefaultAccountStateInstruction.Initialize,\n    accountState\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Construct an UpdateDefaultAccountState instruction\n *\n * @param mint         Mint to update\n * @param accountState    Default account state to set on all accounts\n * @param freezeAuthority       The mint's freeze authority\n * @param signers         The signer account(s) for a multisig\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateDefaultAccountStateInstruction(mint, accountState, freezeAuthority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], freezeAuthority, multiSigners);\n  const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n  defaultAccountStateInstructionData.encode({\n    instruction: TokenInstruction.DefaultAccountStateExtension,\n    defaultAccountStateInstruction: DefaultAccountStateInstruction.Update,\n    accountState\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":{"version":3,"names":["struct","u8","TransactionInstruction","programSupportsExtensions","TOKEN_2022_PROGRAM_ID","TokenUnsupportedInstructionError","addSigners","TokenInstruction","DefaultAccountStateInstruction","defaultAccountStateInstructionData","createInitializeDefaultAccountStateInstruction","mint","accountState","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","DefaultAccountStateExtension","defaultAccountStateInstruction","Initialize","createUpdateDefaultAccountStateInstruction","freezeAuthority","multiSigners","Update"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/extensions/defaultAccountState/instructions.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport type { AccountState } from '../../state/account.js';\n\nexport enum DefaultAccountStateInstruction {\n    Initialize = 0,\n    Update = 1,\n}\n\n/** TODO: docs */\nexport interface DefaultAccountStateInstructionData {\n    instruction: TokenInstruction.DefaultAccountStateExtension;\n    defaultAccountStateInstruction: DefaultAccountStateInstruction;\n    accountState: AccountState;\n}\n\n/** TODO: docs */\nexport const defaultAccountStateInstructionData = struct<DefaultAccountStateInstructionData>([\n    u8('instruction'),\n    u8('defaultAccountStateInstruction'),\n    u8('accountState'),\n]);\n\n/**\n * Construct an InitializeDefaultAccountState instruction\n *\n * @param mint         Mint to initialize\n * @param accountState Default account state to set on all new accounts\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeDefaultAccountStateInstruction(\n    mint: PublicKey,\n    accountState: AccountState,\n    programId = TOKEN_2022_PROGRAM_ID,\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n    defaultAccountStateInstructionData.encode(\n        {\n            instruction: TokenInstruction.DefaultAccountStateExtension,\n            defaultAccountStateInstruction: DefaultAccountStateInstruction.Initialize,\n            accountState,\n        },\n        data,\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/**\n * Construct an UpdateDefaultAccountState instruction\n *\n * @param mint         Mint to update\n * @param accountState    Default account state to set on all accounts\n * @param freezeAuthority       The mint's freeze authority\n * @param signers         The signer account(s) for a multisig\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateDefaultAccountStateInstruction(\n    mint: PublicKey,\n    accountState: AccountState,\n    freezeAuthority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID,\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], freezeAuthority, multiSigners);\n    const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n    defaultAccountStateInstructionData.encode(\n        {\n            instruction: TokenInstruction.DefaultAccountStateExtension,\n            defaultAccountStateInstruction: DefaultAccountStateInstruction.Update,\n            accountState,\n        },\n        data,\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,yBAAyB,EAAEC,qBAAqB,QAAQ,oBAAoB;AACrF,SAASC,gCAAgC,QAAQ,iBAAiB;AAClE,SAASC,UAAU,QAAQ,gCAAgC;AAC3D,SAASC,gBAAgB,QAAQ,6BAA6B;AAG9D,WAAYC,8BAGX;AAHD,WAAYA,8BAA8B;EACtCA,8BAAA,CAAAA,8BAAA,kCAAc;EACdA,8BAAA,CAAAA,8BAAA,0BAAU;AACd,CAAC,EAHWA,8BAA8B,KAA9BA,8BAA8B;AAY1C;AACA,OAAO,MAAMC,kCAAkC,GAAGT,MAAM,CAAqC,CACzFC,EAAE,CAAC,aAAa,CAAC,EACjBA,EAAE,CAAC,gCAAgC,CAAC,EACpCA,EAAE,CAAC,cAAc,CAAC,CACrB,CAAC;AAEF;;;;;;;;;AASA,OAAM,SAAUS,8CAA8CA,CAC1DC,IAAe,EACfC,YAA0B,EAC1BC,SAAS,GAAGT,qBAAqB;EAEjC,IAAI,CAACD,yBAAyB,CAACU,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIR,gCAAgC,EAAE;EAChD;EACA,MAAMS,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEJ,IAAI;IAAEK,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAClE,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACX,kCAAkC,CAACY,IAAI,CAAC;EAClEZ,kCAAkC,CAACa,MAAM,CACrC;IACIC,WAAW,EAAEhB,gBAAgB,CAACiB,4BAA4B;IAC1DC,8BAA8B,EAAEjB,8BAA8B,CAACkB,UAAU;IACzEd;GACH,EACDM,IAAI,CACP;EAED,OAAO,IAAIhB,sBAAsB,CAAC;IAAEY,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUS,0CAA0CA,CACtDhB,IAAe,EACfC,YAA0B,EAC1BgB,eAA0B,EAC1BC,YAAA,GAAuC,EAAE,EACzChB,SAAS,GAAGT,qBAAqB;EAEjC,IAAI,CAACD,yBAAyB,CAACU,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIR,gCAAgC,EAAE;EAChD;EAEA,MAAMS,IAAI,GAAGR,UAAU,CAAC,CAAC;IAAES,MAAM,EAAEJ,IAAI;IAAEK,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC,EAAEW,eAAe,EAAEC,YAAY,CAAC;EAC7G,MAAMX,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACX,kCAAkC,CAACY,IAAI,CAAC;EAClEZ,kCAAkC,CAACa,MAAM,CACrC;IACIC,WAAW,EAAEhB,gBAAgB,CAACiB,4BAA4B;IAC1DC,8BAA8B,EAAEjB,8BAA8B,CAACsB,MAAM;IACrElB;GACH,EACDM,IAAI,CACP;EAED,OAAO,IAAIhB,sBAAsB,CAAC;IAAEY,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const createNativeMintInstructionData = struct([u8('instruction')]);\n/**\n * Construct a CreateNativeMint instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCreateNativeMintInstruction(payer, nativeMintId = NATIVE_MINT_2022, programId = TOKEN_2022_PROGRAM_ID) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: nativeMintId,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(createNativeMintInstructionData.span);\n  createNativeMintInstructionData.encode({\n    instruction: TokenInstruction.CreateNativeMint\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":{"version":3,"names":["struct","u8","SystemProgram","TransactionInstruction","NATIVE_MINT_2022","programSupportsExtensions","TOKEN_2022_PROGRAM_ID","TokenUnsupportedInstructionError","TokenInstruction","createNativeMintInstructionData","createCreateNativeMintInstruction","payer","nativeMintId","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","CreateNativeMint"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/instructions/createNativeMint.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { PublicKey } from '@solana/web3.js';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface CreateNativeMintInstructionData {\n    instruction: TokenInstruction.CreateNativeMint;\n}\n\n/** TODO: docs */\nexport const createNativeMintInstructionData = struct<CreateNativeMintInstructionData>([u8('instruction')]);\n\n/**\n * Construct a CreateNativeMint instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCreateNativeMintInstruction(\n    payer: PublicKey,\n    nativeMintId = NATIVE_MINT_2022,\n    programId = TOKEN_2022_PROGRAM_ID,\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: nativeMintId, isSigner: false, isWritable: true },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(createNativeMintInstructionData.span);\n    createNativeMintInstructionData.encode({ instruction: TokenInstruction.CreateNativeMint }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,aAAa,EAAEC,sBAAsB,QAAQ,iBAAiB;AACvE,SAASC,gBAAgB,EAAEC,yBAAyB,EAAEC,qBAAqB,QAAQ,iBAAiB;AACpG,SAASC,gCAAgC,QAAQ,cAAc;AAC/D,SAASC,gBAAgB,QAAQ,YAAY;AAO7C;AACA,OAAO,MAAMC,+BAA+B,GAAGT,MAAM,CAAkC,CAACC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;AAE3G;;;;;;;;;;AAUA,OAAM,SAAUS,iCAAiCA,CAC7CC,KAAgB,EAChBC,YAAY,GAAGR,gBAAgB,EAC/BS,SAAS,GAAGP,qBAAqB;EAEjC,IAAI,CAACD,yBAAyB,CAACQ,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIN,gCAAgC,EAAE;EAChD;EACA,MAAMO,IAAI,GAAG,CACT;IAAEC,MAAM,EAAEJ,KAAK;IAAEK,QAAQ,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAI,CAAE,EACnD;IAAEF,MAAM,EAAEH,YAAY;IAAEI,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EAC3D;IAAEF,MAAM,EAAEb,aAAa,CAACW,SAAS;IAAEG,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CAC1E;EAED,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACX,+BAA+B,CAACY,IAAI,CAAC;EAC/DZ,+BAA+B,CAACa,MAAM,CAAC;IAAEC,WAAW,EAAEf,gBAAgB,CAACgB;EAAgB,CAAE,EAAEN,IAAI,CAAC;EAEhG,OAAO,IAAIf,sBAAsB,CAAC;IAAEW,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
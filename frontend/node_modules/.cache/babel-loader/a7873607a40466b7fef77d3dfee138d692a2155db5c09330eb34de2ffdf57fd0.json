{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createFreezeAccountInstruction } from '../instructions/freezeAccount.js';\nimport { getSigners } from './internal.js';\n/**\r\n * Freeze a token account\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param account        Account to freeze\r\n * @param mint           Mint for the account\r\n * @param authority      Mint freeze authority\r\n * @param multiSigners   Signing accounts if `authority` is a multisig\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\nexport async function freezeAccount(connection, payer, account, mint, authority, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createFreezeAccountInstruction(account, mint, authorityPublicKey, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createFreezeAccountInstruction","getSigners","freezeAccount","connection","payer","account","mint","authority","multiSigners","confirmOptions","programId","authorityPublicKey","signers","transaction","add"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\actions\\freezeAccount.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\r\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport { createFreezeAccountInstruction } from '../instructions/freezeAccount.js';\r\nimport { getSigners } from './internal.js';\r\n\r\n/**\r\n * Freeze a token account\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param account        Account to freeze\r\n * @param mint           Mint for the account\r\n * @param authority      Mint freeze authority\r\n * @param multiSigners   Signing accounts if `authority` is a multisig\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\r\nexport async function freezeAccount(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    account: PublicKey,\r\n    mint: PublicKey,\r\n    authority: Signer | PublicKey,\r\n    multiSigners: Signer[] = [],\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): Promise<TransactionSignature> {\r\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\r\n\r\n    const transaction = new Transaction().add(\r\n        createFreezeAccountInstruction(account, mint, authorityPublicKey, multiSigners, programId),\r\n    );\r\n\r\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\r\n}\r\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,8BAA8B,QAAQ,kCAAkC;AACjF,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;;;;;;;;;;;AAcA,OAAO,eAAeC,aAAaA,CAC/BC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,IAAe,EACfC,SAA6B,EAC7BC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGX,gBAAgB;EAE5B,MAAM,CAACY,kBAAkB,EAAEC,OAAO,CAAC,GAAGX,UAAU,CAACM,SAAS,EAAEC,YAAY,CAAC;EAEzE,MAAMK,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CACrCd,8BAA8B,CAACK,OAAO,EAAEC,IAAI,EAAEK,kBAAkB,EAAEH,YAAY,EAAEE,SAAS,CAAC,CAC7F;EAED,OAAO,MAAMb,yBAAyB,CAACM,UAAU,EAAEU,WAAW,EAAE,CAACT,KAAK,EAAE,GAAGQ,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
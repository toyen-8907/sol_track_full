{"ast":null,"code":"import { struct } from '@solana/buffer-layout';\nimport { bool } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n/** Buffer layout for de/serializing a memo transfer extension */\nexport const MemoTransferLayout = struct([bool('requireIncomingTransferMemos')]);\nexport const MEMO_TRANSFER_SIZE = MemoTransferLayout.span;\nexport function getMemoTransfer(account) {\n  const extensionData = getExtensionData(ExtensionType.MemoTransfer, account.tlvData);\n  if (extensionData !== null) {\n    return MemoTransferLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}","map":{"version":3,"names":["struct","bool","ExtensionType","getExtensionData","MemoTransferLayout","MEMO_TRANSFER_SIZE","span","getMemoTransfer","account","extensionData","MemoTransfer","tlvData","decode"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/extensions/memoTransfer/state.ts"],"sourcesContent":["import { struct } from '@solana/buffer-layout';\nimport { bool } from '@solana/buffer-layout-utils';\nimport type { Account } from '../../state/account.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\n/** MemoTransfer as stored by the program */\nexport interface MemoTransfer {\n    /** Require transfers into this account to be accompanied by a memo */\n    requireIncomingTransferMemos: boolean;\n}\n\n/** Buffer layout for de/serializing a memo transfer extension */\nexport const MemoTransferLayout = struct<MemoTransfer>([bool('requireIncomingTransferMemos')]);\n\nexport const MEMO_TRANSFER_SIZE = MemoTransferLayout.span;\n\nexport function getMemoTransfer(account: Account): MemoTransfer | null {\n    const extensionData = getExtensionData(ExtensionType.MemoTransfer, account.tlvData);\n    if (extensionData !== null) {\n        return MemoTransferLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,IAAI,QAAQ,6BAA6B;AAElD,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,qBAAqB;AAQrE;AACA,OAAO,MAAMC,kBAAkB,GAAGJ,MAAM,CAAe,CAACC,IAAI,CAAC,8BAA8B,CAAC,CAAC,CAAC;AAE9F,OAAO,MAAMI,kBAAkB,GAAGD,kBAAkB,CAACE,IAAI;AAEzD,OAAM,SAAUC,eAAeA,CAACC,OAAgB;EAC5C,MAAMC,aAAa,GAAGN,gBAAgB,CAACD,aAAa,CAACQ,YAAY,EAAEF,OAAO,CAACG,OAAO,CAAC;EACnF,IAAIF,aAAa,KAAK,IAAI,EAAE;IACxB,OAAOL,kBAAkB,CAACQ,MAAM,CAACH,aAAa,CAAC;EACnD,CAAC,MAAM;IACH,OAAO,IAAI;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
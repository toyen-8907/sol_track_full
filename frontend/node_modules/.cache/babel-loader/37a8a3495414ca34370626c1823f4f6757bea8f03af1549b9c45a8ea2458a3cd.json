{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createMintToCheckedInstruction } from '../instructions/mintToChecked.js';\nimport { getSigners } from './internal.js';\n/**\r\n * Mint tokens to an account, asserting the token mint and decimals\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param mint           Mint for the account\r\n * @param destination    Address of the account to mint to\r\n * @param authority      Minting authority\r\n * @param amount         Amount to mint\r\n * @param decimals       Number of decimals in amount to mint\r\n * @param multiSigners   Signing accounts if `authority` is a multisig\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\nexport async function mintToChecked(connection, payer, mint, destination, authority, amount, decimals, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createMintToCheckedInstruction(mint, destination, authorityPublicKey, amount, decimals, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createMintToCheckedInstruction","getSigners","mintToChecked","connection","payer","mint","destination","authority","amount","decimals","multiSigners","confirmOptions","programId","authorityPublicKey","signers","transaction","add"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\actions\\mintToChecked.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\r\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport { createMintToCheckedInstruction } from '../instructions/mintToChecked.js';\r\nimport { getSigners } from './internal.js';\r\n\r\n/**\r\n * Mint tokens to an account, asserting the token mint and decimals\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param mint           Mint for the account\r\n * @param destination    Address of the account to mint to\r\n * @param authority      Minting authority\r\n * @param amount         Amount to mint\r\n * @param decimals       Number of decimals in amount to mint\r\n * @param multiSigners   Signing accounts if `authority` is a multisig\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\r\nexport async function mintToChecked(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    mint: PublicKey,\r\n    destination: PublicKey,\r\n    authority: Signer | PublicKey,\r\n    amount: number | bigint,\r\n    decimals: number,\r\n    multiSigners: Signer[] = [],\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): Promise<TransactionSignature> {\r\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\r\n\r\n    const transaction = new Transaction().add(\r\n        createMintToCheckedInstruction(\r\n            mint,\r\n            destination,\r\n            authorityPublicKey,\r\n            amount,\r\n            decimals,\r\n            multiSigners,\r\n            programId,\r\n        ),\r\n    );\r\n\r\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\r\n}\r\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,8BAA8B,QAAQ,kCAAkC;AACjF,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;;;;;;;;;;;;;AAgBA,OAAO,eAAeC,aAAaA,CAC/BC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,WAAsB,EACtBC,SAA6B,EAC7BC,MAAuB,EACvBC,QAAgB,EAChBC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGb,gBAAgB;EAE5B,MAAM,CAACc,kBAAkB,EAAEC,OAAO,CAAC,GAAGb,UAAU,CAACM,SAAS,EAAEG,YAAY,CAAC;EAEzE,MAAMK,WAAW,GAAG,IAAIjB,WAAW,EAAE,CAACkB,GAAG,CACrChB,8BAA8B,CAC1BK,IAAI,EACJC,WAAW,EACXO,kBAAkB,EAClBL,MAAM,EACNC,QAAQ,EACRC,YAAY,EACZE,SAAS,CACZ,CACJ;EAED,OAAO,MAAMf,yBAAyB,CAACM,UAAU,EAAEY,WAAW,EAAE,CAACX,KAAK,EAAE,GAAGU,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
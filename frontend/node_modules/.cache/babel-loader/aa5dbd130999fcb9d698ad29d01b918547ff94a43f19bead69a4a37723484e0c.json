{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** The struct that represents the instruction data as it is read by the program */\nexport const initializeImmutableOwnerInstructionData = struct([u8('instruction')]);\n/**\n * Construct an InitializeImmutableOwner instruction\n *\n * @param account           Immutable Owner Account\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeImmutableOwnerInstruction(account, programId) {\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(initializeImmutableOwnerInstructionData.span);\n  initializeImmutableOwnerInstructionData.encode({\n    instruction: TokenInstruction.InitializeImmutableOwner\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an InitializeImmutableOwner instruction and validate it\n *\n * @param instruction InitializeImmutableOwner instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeImmutableOwnerInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeImmutableOwnerInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account\n    },\n    data\n  } = decodeInitializeImmutableOwnerInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeImmutableOwner) throw new TokenInvalidInstructionTypeError();\n  if (!account) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      account\n    },\n    data\n  };\n}\n/**\n * Decode an InitializeImmutableOwner instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeImmutableOwnerInstructionUnchecked({\n  programId,\n  keys: [account],\n  data\n}) {\n  const {\n    instruction\n  } = initializeImmutableOwnerInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      account: account\n    },\n    data: {\n      instruction\n    }\n  };\n}","map":{"version":3,"names":["struct","u8","TransactionInstruction","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","initializeImmutableOwnerInstructionData","createInitializeImmutableOwnerInstruction","account","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","InitializeImmutableOwner","decodeInitializeImmutableOwnerInstruction","equals","length","decodeInitializeImmutableOwnerInstructionUnchecked","decode"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/instructions/initializeImmutableOwner.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** Deserialized instruction for the initiation of an immutable owner account */\nexport interface InitializeImmutableOwnerInstructionData {\n    instruction: TokenInstruction.InitializeImmutableOwner;\n}\n\n/** The struct that represents the instruction data as it is read by the program */\nexport const initializeImmutableOwnerInstructionData = struct<InitializeImmutableOwnerInstructionData>([\n    u8('instruction'),\n]);\n\n/**\n * Construct an InitializeImmutableOwner instruction\n *\n * @param account           Immutable Owner Account\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeImmutableOwnerInstruction(\n    account: PublicKey,\n    programId: PublicKey,\n): TransactionInstruction {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeImmutableOwnerInstructionData.span);\n    initializeImmutableOwnerInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeImmutableOwner,\n        },\n        data,\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeImmutableOwner instruction */\nexport interface DecodedInitializeImmutableOwnerInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeImmutableOwner;\n    };\n}\n\n/**\n * Decode an InitializeImmutableOwner instruction and validate it\n *\n * @param instruction InitializeImmutableOwner instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeImmutableOwnerInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey,\n): DecodedInitializeImmutableOwnerInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeImmutableOwnerInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account },\n        data,\n    } = decodeInitializeImmutableOwnerInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeImmutableOwner) throw new TokenInvalidInstructionTypeError();\n    if (!account) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeImmutableOwner instruction */\nexport interface DecodedInitializeImmutableOwnerInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode an InitializeImmutableOwner instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeImmutableOwnerInstructionUnchecked({\n    programId,\n    keys: [account],\n    data,\n}: TransactionInstruction): DecodedInitializeImmutableOwnerInstructionUnchecked {\n    const { instruction } = initializeImmutableOwnerInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            account: account,\n        },\n        data: {\n            instruction,\n        },\n    };\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,gBAAgB,QAAQ,YAAY;AAO7C;AACA,OAAO,MAAMC,uCAAuC,GAAGR,MAAM,CAA0C,CACnGC,EAAE,CAAC,aAAa,CAAC,CACpB,CAAC;AAEF;;;;;;;;AAQA,OAAM,SAAUQ,yCAAyCA,CACrDC,OAAkB,EAClBC,SAAoB;EAEpB,MAAMC,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEH,OAAO;IAAEI,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAErE,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACV,uCAAuC,CAACW,IAAI,CAAC;EACvEX,uCAAuC,CAACY,MAAM,CAC1C;IACIC,WAAW,EAAEd,gBAAgB,CAACe;GACjC,EACDN,IAAI,CACP;EAED,OAAO,IAAId,sBAAsB,CAAC;IAAEU,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAaA;;;;;;;;AAQA,OAAM,SAAUO,yCAAyCA,CACrDF,WAAmC,EACnCV,SAAoB;EAEpB,IAAI,CAACU,WAAW,CAACV,SAAS,CAACa,MAAM,CAACb,SAAS,CAAC,EAAE,MAAM,IAAIN,mCAAmC,EAAE;EAC7F,IAAIgB,WAAW,CAACL,IAAI,CAACS,MAAM,KAAKjB,uCAAuC,CAACW,IAAI,EACxE,MAAM,IAAIhB,gCAAgC,EAAE;EAEhD,MAAM;IACFS,IAAI,EAAE;MAAEF;IAAO,CAAE;IACjBM;EAAI,CACP,GAAGU,kDAAkD,CAACL,WAAW,CAAC;EACnE,IAAIL,IAAI,CAACK,WAAW,KAAKd,gBAAgB,CAACe,wBAAwB,EAAE,MAAM,IAAIhB,gCAAgC,EAAE;EAChH,IAAI,CAACI,OAAO,EAAE,MAAM,IAAIN,gCAAgC,EAAE;EAE1D,OAAO;IACHO,SAAS;IACTC,IAAI,EAAE;MACFF;KACH;IACDM;GACH;AACL;AAaA;;;;;;;AAOA,OAAM,SAAUU,kDAAkDA,CAAC;EAC/Df,SAAS;EACTC,IAAI,EAAE,CAACF,OAAO,CAAC;EACfM;AAAI,CACiB;EACrB,MAAM;IAAEK;EAAW,CAAE,GAAGb,uCAAuC,CAACmB,MAAM,CAACX,IAAI,CAAC;EAE5E,OAAO;IACHL,SAAS;IACTC,IAAI,EAAE;MACFF,OAAO,EAAEA;KACZ;IACDM,IAAI,EAAE;MACFK;;GAEP;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
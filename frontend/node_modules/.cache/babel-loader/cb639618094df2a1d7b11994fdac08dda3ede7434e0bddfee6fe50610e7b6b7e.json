{"ast":null,"code":"import { struct, u16 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nexport const MAX_FEE_BASIS_POINTS = 10000;\nexport const ONE_IN_BASIS_POINTS = BigInt(MAX_FEE_BASIS_POINTS);\n/** Buffer layout for de/serializing a transfer fee */\nexport function transferFeeLayout(property) {\n  return struct([u64('epoch'), u64('maximumFee'), u16('transferFeeBasisPoints')], property);\n}\n/** Calculate the transfer fee */\nexport function calculateFee(transferFee, preFeeAmount) {\n  const transferFeeBasisPoints = transferFee.transferFeeBasisPoints;\n  if (transferFeeBasisPoints === 0 || preFeeAmount === BigInt(0)) {\n    return BigInt(0);\n  } else {\n    const numerator = preFeeAmount * BigInt(transferFeeBasisPoints);\n    const rawFee = (numerator + ONE_IN_BASIS_POINTS - BigInt(1)) / ONE_IN_BASIS_POINTS;\n    const fee = rawFee > transferFee.maximumFee ? transferFee.maximumFee : rawFee;\n    return BigInt(fee);\n  }\n}\n/** Buffer layout for de/serializing a transfer fee config extension */\nexport const TransferFeeConfigLayout = struct([publicKey('transferFeeConfigAuthority'), publicKey('withdrawWithheldAuthority'), u64('withheldAmount'), transferFeeLayout('olderTransferFee'), transferFeeLayout('newerTransferFee')]);\nexport const TRANSFER_FEE_CONFIG_SIZE = TransferFeeConfigLayout.span;\n/** Get the fee for given epoch */\nexport function getEpochFee(transferFeeConfig, epoch) {\n  if (epoch >= transferFeeConfig.newerTransferFee.epoch) {\n    return transferFeeConfig.newerTransferFee;\n  } else {\n    return transferFeeConfig.olderTransferFee;\n  }\n}\n/** Calculate the fee for the given epoch and input amount */\nexport function calculateEpochFee(transferFeeConfig, epoch, preFeeAmount) {\n  const transferFee = getEpochFee(transferFeeConfig, epoch);\n  return calculateFee(transferFee, preFeeAmount);\n}\n/** Buffer layout for de/serializing */\nexport const TransferFeeAmountLayout = struct([u64('withheldAmount')]);\nexport const TRANSFER_FEE_AMOUNT_SIZE = TransferFeeAmountLayout.span;\nexport function getTransferFeeConfig(mint) {\n  const extensionData = getExtensionData(ExtensionType.TransferFeeConfig, mint.tlvData);\n  if (extensionData !== null) {\n    return TransferFeeConfigLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}\nexport function getTransferFeeAmount(account) {\n  const extensionData = getExtensionData(ExtensionType.TransferFeeAmount, account.tlvData);\n  if (extensionData !== null) {\n    return TransferFeeAmountLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}","map":{"version":3,"names":["struct","u16","publicKey","u64","ExtensionType","getExtensionData","MAX_FEE_BASIS_POINTS","ONE_IN_BASIS_POINTS","BigInt","transferFeeLayout","property","calculateFee","transferFee","preFeeAmount","transferFeeBasisPoints","numerator","rawFee","fee","maximumFee","TransferFeeConfigLayout","TRANSFER_FEE_CONFIG_SIZE","span","getEpochFee","transferFeeConfig","epoch","newerTransferFee","olderTransferFee","calculateEpochFee","TransferFeeAmountLayout","TRANSFER_FEE_AMOUNT_SIZE","getTransferFeeConfig","mint","extensionData","TransferFeeConfig","tlvData","decode","getTransferFeeAmount","account","TransferFeeAmount"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/extensions/transferFee/state.ts"],"sourcesContent":["import type { Layout } from '@solana/buffer-layout';\nimport { struct, u16 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { PublicKey } from '@solana/web3.js';\nimport type { Account } from '../../state/account.js';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\nexport const MAX_FEE_BASIS_POINTS = 10000;\nexport const ONE_IN_BASIS_POINTS = BigInt(MAX_FEE_BASIS_POINTS);\n\n/** TransferFeeConfig as stored by the program */\nexport interface TransferFee {\n    /** First epoch where the transfer fee takes effect */\n    epoch: bigint;\n    /** Maximum fee assessed on transfers, expressed as an amount of tokens */\n    maximumFee: bigint;\n    /**\n     * Amount of transfer collected as fees, expressed as basis points of the\n     * transfer amount, ie. increments of 0.01%\n     */\n    transferFeeBasisPoints: number;\n}\n\n/** Transfer fee extension data for mints. */\nexport interface TransferFeeConfig {\n    /** Optional authority to set the fee */\n    transferFeeConfigAuthority: PublicKey;\n    /** Withdraw from mint instructions must be signed by this key */\n    withdrawWithheldAuthority: PublicKey;\n    /** Withheld transfer fee tokens that have been moved to the mint for withdrawal */\n    withheldAmount: bigint;\n    /** Older transfer fee, used if the current epoch < newerTransferFee.epoch */\n    olderTransferFee: TransferFee;\n    /** Newer transfer fee, used if the current epoch >= newerTransferFee.epoch */\n    newerTransferFee: TransferFee;\n}\n\n/** Buffer layout for de/serializing a transfer fee */\nexport function transferFeeLayout(property?: string): Layout<TransferFee> {\n    return struct<TransferFee>([u64('epoch'), u64('maximumFee'), u16('transferFeeBasisPoints')], property);\n}\n\n/** Calculate the transfer fee */\nexport function calculateFee(transferFee: TransferFee, preFeeAmount: bigint): bigint {\n    const transferFeeBasisPoints = transferFee.transferFeeBasisPoints;\n    if (transferFeeBasisPoints === 0 || preFeeAmount === BigInt(0)) {\n        return BigInt(0);\n    } else {\n        const numerator = preFeeAmount * BigInt(transferFeeBasisPoints);\n        const rawFee = (numerator + ONE_IN_BASIS_POINTS - BigInt(1)) / ONE_IN_BASIS_POINTS;\n        const fee = rawFee > transferFee.maximumFee ? transferFee.maximumFee : rawFee;\n        return BigInt(fee);\n    }\n}\n\n/** Buffer layout for de/serializing a transfer fee config extension */\nexport const TransferFeeConfigLayout = struct<TransferFeeConfig>([\n    publicKey('transferFeeConfigAuthority'),\n    publicKey('withdrawWithheldAuthority'),\n    u64('withheldAmount'),\n    transferFeeLayout('olderTransferFee'),\n    transferFeeLayout('newerTransferFee'),\n]);\n\nexport const TRANSFER_FEE_CONFIG_SIZE = TransferFeeConfigLayout.span;\n\n/** Get the fee for given epoch */\nexport function getEpochFee(transferFeeConfig: TransferFeeConfig, epoch: bigint): TransferFee {\n    if (epoch >= transferFeeConfig.newerTransferFee.epoch) {\n        return transferFeeConfig.newerTransferFee;\n    } else {\n        return transferFeeConfig.olderTransferFee;\n    }\n}\n\n/** Calculate the fee for the given epoch and input amount */\nexport function calculateEpochFee(transferFeeConfig: TransferFeeConfig, epoch: bigint, preFeeAmount: bigint): bigint {\n    const transferFee = getEpochFee(transferFeeConfig, epoch);\n    return calculateFee(transferFee, preFeeAmount);\n}\n\n/** Transfer fee amount data for accounts. */\nexport interface TransferFeeAmount {\n    /** Withheld transfer fee tokens that can be claimed by the fee authority */\n    withheldAmount: bigint;\n}\n/** Buffer layout for de/serializing */\nexport const TransferFeeAmountLayout = struct<TransferFeeAmount>([u64('withheldAmount')]);\nexport const TRANSFER_FEE_AMOUNT_SIZE = TransferFeeAmountLayout.span;\n\nexport function getTransferFeeConfig(mint: Mint): TransferFeeConfig | null {\n    const extensionData = getExtensionData(ExtensionType.TransferFeeConfig, mint.tlvData);\n    if (extensionData !== null) {\n        return TransferFeeConfigLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n\nexport function getTransferFeeAmount(account: Account): TransferFeeAmount | null {\n    const extensionData = getExtensionData(ExtensionType.TransferFeeAmount, account.tlvData);\n    if (extensionData !== null) {\n        return TransferFeeAmountLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
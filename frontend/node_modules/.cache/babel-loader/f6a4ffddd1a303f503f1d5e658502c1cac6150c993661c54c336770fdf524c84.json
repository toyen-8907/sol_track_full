{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { createCreateNativeMintInstruction } from '../instructions/createNativeMint.js';\n/**\n * Create native mint\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param nativeMint               Native mint id associated with program\n */\nexport async function createNativeMint(connection, payer, confirmOptions, nativeMint = NATIVE_MINT_2022, programId = TOKEN_2022_PROGRAM_ID) {\n  const transaction = new Transaction().add(createCreateNativeMintInstruction(payer.publicKey, nativeMint, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","NATIVE_MINT_2022","TOKEN_2022_PROGRAM_ID","createCreateNativeMintInstruction","createNativeMint","connection","payer","confirmOptions","nativeMint","programId","transaction","add","publicKey"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/actions/createNativeMint.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { createCreateNativeMintInstruction } from '../instructions/createNativeMint.js';\n\n/**\n * Create native mint\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param nativeMint               Native mint id associated with program\n */\nexport async function createNativeMint(\n    connection: Connection,\n    payer: Signer,\n    confirmOptions?: ConfirmOptions,\n    nativeMint = NATIVE_MINT_2022,\n    programId = TOKEN_2022_PROGRAM_ID,\n): Promise<void> {\n    const transaction = new Transaction().add(\n        createCreateNativeMintInstruction(payer.publicKey, nativeMint, programId),\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,EAAEC,qBAAqB,QAAQ,iBAAiB;AACzE,SAASC,iCAAiC,QAAQ,qCAAqC;AAEvF;;;;;;;;;AASA,OAAO,eAAeC,gBAAgBA,CAClCC,UAAsB,EACtBC,KAAa,EACbC,cAA+B,EAC/BC,UAAU,GAAGP,gBAAgB,EAC7BQ,SAAS,GAAGP,qBAAqB;EAEjC,MAAMQ,WAAW,GAAG,IAAIV,WAAW,EAAE,CAACW,GAAG,CACrCR,iCAAiC,CAACG,KAAK,CAACM,SAAS,EAAEJ,UAAU,EAAEC,SAAS,CAAC,CAC5E;EACD,MAAMV,yBAAyB,CAACM,UAAU,EAAEK,WAAW,EAAE,CAACJ,KAAK,CAAC,EAAEC,cAAc,CAAC;AACrF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
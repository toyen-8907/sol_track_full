{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeMultisigInstructionData = struct([u8('instruction'), u8('m')]);\n/**\r\n * Construct an InitializeMultisig instruction\r\n *\r\n * @param account   Multisig account\r\n * @param signers   Full set of signers\r\n * @param m         Number of required signatures\r\n * @param programId SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createInitializeMultisigInstruction(account, signers, m, programId = TOKEN_PROGRAM_ID) {\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  for (const signer of signers) {\n    keys.push({\n      pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n      isSigner: false,\n      isWritable: false\n    });\n  }\n  const data = Buffer.alloc(initializeMultisigInstructionData.span);\n  initializeMultisigInstructionData.encode({\n    instruction: TokenInstruction.InitializeMultisig,\n    m\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\r\n * Decode an InitializeMultisig instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\nexport function decodeInitializeMultisigInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMultisigInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data\n  } = decodeInitializeMultisigInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeMultisig) throw new TokenInvalidInstructionTypeError();\n  if (!account || !rent || !signers.length) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data\n  };\n}\n/**\r\n * Decode an InitializeMultisig instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\nexport function decodeInitializeMultisigInstructionUnchecked({\n  programId,\n  keys: [account, rent, ...signers],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data: initializeMultisigInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","PublicKey","SYSVAR_RENT_PUBKEY","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","initializeMultisigInstructionData","createInitializeMultisigInstruction","account","signers","m","programId","keys","pubkey","isSigner","isWritable","signer","push","publicKey","data","Buffer","alloc","span","encode","instruction","InitializeMultisig","decodeInitializeMultisigInstruction","equals","length","rent","decodeInitializeMultisigInstructionUnchecked","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\initializeMultisig.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport type { AccountMeta, Signer } from '@solana/web3.js';\r\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport {\r\n    TokenInvalidInstructionDataError,\r\n    TokenInvalidInstructionKeysError,\r\n    TokenInvalidInstructionProgramError,\r\n    TokenInvalidInstructionTypeError,\r\n} from '../errors.js';\r\nimport { addSigners } from './internal.js';\r\nimport { TokenInstruction } from './types.js';\r\n\r\n/** TODO: docs */\r\nexport interface InitializeMultisigInstructionData {\r\n    instruction: TokenInstruction.InitializeMultisig;\r\n    m: number;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const initializeMultisigInstructionData = struct<InitializeMultisigInstructionData>([\r\n    u8('instruction'),\r\n    u8('m'),\r\n]);\r\n\r\n/**\r\n * Construct an InitializeMultisig instruction\r\n *\r\n * @param account   Multisig account\r\n * @param signers   Full set of signers\r\n * @param m         Number of required signatures\r\n * @param programId SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createInitializeMultisigInstruction(\r\n    account: PublicKey,\r\n    signers: (Signer | PublicKey)[],\r\n    m: number,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    const keys = [\r\n        { pubkey: account, isSigner: false, isWritable: true },\r\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\r\n    ];\r\n    for (const signer of signers) {\r\n        keys.push({\r\n            pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        });\r\n    }\r\n\r\n    const data = Buffer.alloc(initializeMultisigInstructionData.span);\r\n    initializeMultisigInstructionData.encode(\r\n        {\r\n            instruction: TokenInstruction.InitializeMultisig,\r\n            m,\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\n/** A decoded, valid InitializeMultisig instruction */\r\nexport interface DecodedInitializeMultisigInstruction {\r\n    programId: PublicKey;\r\n    keys: {\r\n        account: AccountMeta;\r\n        rent: AccountMeta;\r\n        signers: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: TokenInstruction.InitializeMultisig;\r\n        m: number;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode an InitializeMultisig instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\r\nexport function decodeInitializeMultisigInstruction(\r\n    instruction: TransactionInstruction,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): DecodedInitializeMultisigInstruction {\r\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\r\n    if (instruction.data.length !== initializeMultisigInstructionData.span)\r\n        throw new TokenInvalidInstructionDataError();\r\n\r\n    const {\r\n        keys: { account, rent, signers },\r\n        data,\r\n    } = decodeInitializeMultisigInstructionUnchecked(instruction);\r\n    if (data.instruction !== TokenInstruction.InitializeMultisig) throw new TokenInvalidInstructionTypeError();\r\n    if (!account || !rent || !signers.length) throw new TokenInvalidInstructionKeysError();\r\n\r\n    // TODO: key checks?\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            account,\r\n            rent,\r\n            signers,\r\n        },\r\n        data,\r\n    };\r\n}\r\n\r\n/** A decoded, non-validated InitializeMultisig instruction */\r\nexport interface DecodedInitializeMultisigInstructionUnchecked {\r\n    programId: PublicKey;\r\n    keys: {\r\n        account: AccountMeta | undefined;\r\n        rent: AccountMeta | undefined;\r\n        signers: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: number;\r\n        m: number;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode an InitializeMultisig instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\r\nexport function decodeInitializeMultisigInstructionUnchecked({\r\n    programId,\r\n    keys: [account, rent, ...signers],\r\n    data,\r\n}: TransactionInstruction): DecodedInitializeMultisigInstructionUnchecked {\r\n    return {\r\n        programId,\r\n        keys: {\r\n            account,\r\n            rent,\r\n            signers,\r\n        },\r\n        data: initializeMultisigInstructionData.decode(data),\r\n    };\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,SAAS,EAAEC,kBAAkB,EAAEC,sBAAsB,QAAQ,iBAAiB;AACvF,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AAErB,SAASC,gBAAgB,QAAQ,YAAY;AAQ7C;AACA,OAAO,MAAMC,iCAAiC,GAAGX,MAAM,CAAoC,CACvFC,EAAE,CAAC,aAAa,CAAC,EACjBA,EAAE,CAAC,GAAG,CAAC,CACV,CAAC;AAEF;;;;;;;;;;AAUA,OAAM,SAAUW,mCAAmCA,CAC/CC,OAAkB,EAClBC,OAA+B,EAC/BC,CAAS,EACTC,SAAS,GAAGX,gBAAgB;EAE5B,MAAMY,IAAI,GAAG,CACT;IAAEC,MAAM,EAAEL,OAAO;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACtD;IAAEF,MAAM,EAAEf,kBAAkB;IAAEgB,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CACrE;EACD,KAAK,MAAMC,MAAM,IAAIP,OAAO,EAAE;IAC1BG,IAAI,CAACK,IAAI,CAAC;MACNJ,MAAM,EAAEG,MAAM,YAAYnB,SAAS,GAAGmB,MAAM,GAAGA,MAAM,CAACE,SAAS;MAC/DJ,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;KACf,CAAC;EACN;EAEA,MAAMI,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACf,iCAAiC,CAACgB,IAAI,CAAC;EACjEhB,iCAAiC,CAACiB,MAAM,CACpC;IACIC,WAAW,EAAEnB,gBAAgB,CAACoB,kBAAkB;IAChDf;GACH,EACDS,IAAI,CACP;EAED,OAAO,IAAIpB,sBAAsB,CAAC;IAAEa,IAAI;IAAED,SAAS;IAAEQ;EAAI,CAAE,CAAC;AAChE;AAgBA;;;;;;;;AAQA,OAAM,SAAUO,mCAAmCA,CAC/CF,WAAmC,EACnCb,SAAS,GAAGX,gBAAgB;EAE5B,IAAI,CAACwB,WAAW,CAACb,SAAS,CAACgB,MAAM,CAAChB,SAAS,CAAC,EAAE,MAAM,IAAIR,mCAAmC,EAAE;EAC7F,IAAIqB,WAAW,CAACL,IAAI,CAACS,MAAM,KAAKtB,iCAAiC,CAACgB,IAAI,EAClE,MAAM,IAAIrB,gCAAgC,EAAE;EAEhD,MAAM;IACFW,IAAI,EAAE;MAAEJ,OAAO;MAAEqB,IAAI;MAAEpB;IAAO,CAAE;IAChCU;EAAI,CACP,GAAGW,4CAA4C,CAACN,WAAW,CAAC;EAC7D,IAAIL,IAAI,CAACK,WAAW,KAAKnB,gBAAgB,CAACoB,kBAAkB,EAAE,MAAM,IAAIrB,gCAAgC,EAAE;EAC1G,IAAI,CAACI,OAAO,IAAI,CAACqB,IAAI,IAAI,CAACpB,OAAO,CAACmB,MAAM,EAAE,MAAM,IAAI1B,gCAAgC,EAAE;EAEtF;EAEA,OAAO;IACHS,SAAS;IACTC,IAAI,EAAE;MACFJ,OAAO;MACPqB,IAAI;MACJpB;KACH;IACDU;GACH;AACL;AAgBA;;;;;;;AAOA,OAAM,SAAUW,4CAA4CA,CAAC;EACzDnB,SAAS;EACTC,IAAI,EAAE,CAACJ,OAAO,EAAEqB,IAAI,EAAE,GAAGpB,OAAO,CAAC;EACjCU;AAAI,CACiB;EACrB,OAAO;IACHR,SAAS;IACTC,IAAI,EAAE;MACFJ,OAAO;MACPqB,IAAI;MACJpB;KACH;IACDU,IAAI,EAAEb,iCAAiC,CAACyB,MAAM,CAACZ,IAAI;GACtD;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
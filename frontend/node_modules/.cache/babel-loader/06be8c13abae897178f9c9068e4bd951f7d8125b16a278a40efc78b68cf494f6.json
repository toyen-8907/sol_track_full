{"ast":null,"code":"var _s = $RefreshSig$();\n// 导入 React 和必要的钩子函数\nimport React, { useEffect } from 'react';\n// **新增：导入 Solana 的 web3.js 库**\nimport { Connection, PublicKey } from '@solana/web3.js';\n\n// 定义 WebSocketComponent 组件，并使用 React.memo 优化\nconst WebSocketComponent = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(({\n  onConnectionStatus,\n  account,\n  onMessageReceived,\n  onConnectionResult\n}) => {\n  _s();\n  // 使用 useEffect 处理副作用：建立连接并订阅账户变化\n  useEffect(() => {\n    // **修改：创建 Solana 连接，指定 HTTP 和 WebSocket 端点**\n    const connection = new Connection('https://api.mainnet-beta.solana.com',\n    // 您可以替换为您的自定义 RPC 端点\n    {\n      wsEndpoint: 'wss://api.mainnet-beta.solana.com',\n      // 您可以替换为您的自定义 WebSocket 端点\n      commitment: 'confirmed' // 设置承诺级别\n    });\n\n    // **修改：更新连接状态为 Connected**\n    onConnectionStatus('Connected');\n\n    // **修改：将账户地址转换为 PublicKey 对象**\n    const publicKey = new PublicKey(account);\n\n    // **修改：订阅账户变化**\n    const subscriptionId = connection.onAccountChange(publicKey, (accountInfo, context) => {\n      // **新增：解析账户信息**\n      const lamports = accountInfo.lamports;\n      console.log('Updated account info:', accountInfo);\n      console.log('Slot:', context.slot);\n\n      // **修改：调用回调函数传递余额信息**\n      if (lamports !== undefined) {\n        onMessageReceived(`余额: ${lamports}`);\n      }\n\n      // **修改：传递 slot 信息**\n      onConnectionResult(`Slot: ${context.slot}`);\n    }, 'confirmed');\n\n    // **新增：错误处理**\n    connection._rpcWebSocket.on('error', error => {\n      console.error('Connection error:', error);\n      onConnectionStatus('Error');\n    });\n\n    // **修改：组件卸载时取消订阅**\n    return () => {\n      connection.removeAccountChangeListener(subscriptionId).then(() => {\n        console.log('Account change listener removed.');\n        onConnectionStatus('Disconnected');\n      }).catch(error => {\n        console.error('Error removing account change listener:', error);\n      });\n    };\n  }, [onConnectionStatus, account, onMessageReceived, onConnectionResult]); // 添加依赖项\n\n  // **删除：原始的 WebSocket 相关代码已移除**\n\n  // 该组件不渲染任何 UI\n  return null;\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n// 导出 WebSocketComponent 组件\n_c2 = WebSocketComponent;\nexport default WebSocketComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"WebSocketComponent$React.memo\");\n$RefreshReg$(_c2, \"WebSocketComponent\");","map":{"version":3,"names":["React","useEffect","Connection","PublicKey","WebSocketComponent","_s","memo","_c","onConnectionStatus","account","onMessageReceived","onConnectionResult","connection","wsEndpoint","commitment","publicKey","subscriptionId","onAccountChange","accountInfo","context","lamports","console","log","slot","undefined","_rpcWebSocket","on","error","removeAccountChangeListener","then","catch","_c2","$RefreshReg$"],"sources":["/Users/damentp01/project/sol_track_ac/src/WebSocketComponent.js"],"sourcesContent":["// 导入 React 和必要的钩子函数\nimport React, { useEffect } from 'react';\n// **新增：导入 Solana 的 web3.js 库**\nimport { Connection, PublicKey } from '@solana/web3.js';\n\n// 定义 WebSocketComponent 组件，并使用 React.memo 优化\nconst WebSocketComponent = React.memo(\n  ({ onConnectionStatus, account, onMessageReceived, onConnectionResult }) => {\n\n    // 使用 useEffect 处理副作用：建立连接并订阅账户变化\n    useEffect(() => {\n      // **修改：创建 Solana 连接，指定 HTTP 和 WebSocket 端点**\n      const connection = new Connection(\n        'https://api.mainnet-beta.solana.com', // 您可以替换为您的自定义 RPC 端点\n        {\n          wsEndpoint: 'wss://api.mainnet-beta.solana.com', // 您可以替换为您的自定义 WebSocket 端点\n          commitment: 'confirmed', // 设置承诺级别\n        }\n      );\n\n      // **修改：更新连接状态为 Connected**\n      onConnectionStatus('Connected');\n\n      // **修改：将账户地址转换为 PublicKey 对象**\n      const publicKey = new PublicKey(account);\n\n      // **修改：订阅账户变化**\n      const subscriptionId = connection.onAccountChange(\n        publicKey,\n        (accountInfo, context) => {\n          // **新增：解析账户信息**\n          const lamports = accountInfo.lamports;\n          console.log('Updated account info:', accountInfo);\n          console.log('Slot:', context.slot);\n\n          // **修改：调用回调函数传递余额信息**\n          if (lamports !== undefined) {\n            onMessageReceived(`余额: ${lamports}`);\n          }\n\n          // **修改：传递 slot 信息**\n          onConnectionResult(`Slot: ${context.slot}`);\n        },\n        'confirmed'\n      );\n\n      // **新增：错误处理**\n      connection._rpcWebSocket.on('error', (error) => {\n        console.error('Connection error:', error);\n        onConnectionStatus('Error');\n      });\n\n      // **修改：组件卸载时取消订阅**\n      return () => {\n        connection.removeAccountChangeListener(subscriptionId)\n          .then(() => {\n            console.log('Account change listener removed.');\n            onConnectionStatus('Disconnected');\n          })\n          .catch((error) => {\n            console.error('Error removing account change listener:', error);\n          });\n      };\n    }, [onConnectionStatus, account, onMessageReceived, onConnectionResult]); // 添加依赖项\n\n    // **删除：原始的 WebSocket 相关代码已移除**\n\n    // 该组件不渲染任何 UI\n    return null;\n  }\n);\n\n// 导出 WebSocketComponent 组件\nexport default WebSocketComponent;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC;AACA,SAASC,UAAU,EAAEC,SAAS,QAAQ,iBAAiB;;AAEvD;AACA,MAAMC,kBAAkB,gBAAAC,EAAA,cAAGL,KAAK,CAACM,IAAI,CAAAC,EAAA,GAAAF,EAAA,CACnC,CAAC;EAAEG,kBAAkB;EAAEC,OAAO;EAAEC,iBAAiB;EAAEC;AAAmB,CAAC,KAAK;EAAAN,EAAA;EAE1E;EACAJ,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,UAAU,GAAG,IAAIV,UAAU,CAC/B,qCAAqC;IAAE;IACvC;MACEW,UAAU,EAAE,mCAAmC;MAAE;MACjDC,UAAU,EAAE,WAAW,CAAE;IAC3B,CACF,CAAC;;IAED;IACAN,kBAAkB,CAAC,WAAW,CAAC;;IAE/B;IACA,MAAMO,SAAS,GAAG,IAAIZ,SAAS,CAACM,OAAO,CAAC;;IAExC;IACA,MAAMO,cAAc,GAAGJ,UAAU,CAACK,eAAe,CAC/CF,SAAS,EACT,CAACG,WAAW,EAAEC,OAAO,KAAK;MACxB;MACA,MAAMC,QAAQ,GAAGF,WAAW,CAACE,QAAQ;MACrCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEJ,WAAW,CAAC;MACjDG,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEH,OAAO,CAACI,IAAI,CAAC;;MAElC;MACA,IAAIH,QAAQ,KAAKI,SAAS,EAAE;QAC1Bd,iBAAiB,CAAC,OAAOU,QAAQ,EAAE,CAAC;MACtC;;MAEA;MACAT,kBAAkB,CAAC,SAASQ,OAAO,CAACI,IAAI,EAAE,CAAC;IAC7C,CAAC,EACD,WACF,CAAC;;IAED;IACAX,UAAU,CAACa,aAAa,CAACC,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAK;MAC9CN,OAAO,CAACM,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzCnB,kBAAkB,CAAC,OAAO,CAAC;IAC7B,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXI,UAAU,CAACgB,2BAA2B,CAACZ,cAAc,CAAC,CACnDa,IAAI,CAAC,MAAM;QACVR,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/Cd,kBAAkB,CAAC,cAAc,CAAC;MACpC,CAAC,CAAC,CACDsB,KAAK,CAAEH,KAAK,IAAK;QAChBN,OAAO,CAACM,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MACjE,CAAC,CAAC;IACN,CAAC;EACH,CAAC,EAAE,CAACnB,kBAAkB,EAAEC,OAAO,EAAEC,iBAAiB,EAAEC,kBAAkB,CAAC,CAAC,CAAC,CAAC;;EAE1E;;EAEA;EACA,OAAO,IAAI;AACb,CAAC,iCACH,CAAC;;AAED;AAAAoB,GAAA,GAlEM3B,kBAAkB;AAmExB,eAAeA,kBAAkB;AAAC,IAAAG,EAAA,EAAAwB,GAAA;AAAAC,YAAA,CAAAzB,EAAA;AAAAyB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
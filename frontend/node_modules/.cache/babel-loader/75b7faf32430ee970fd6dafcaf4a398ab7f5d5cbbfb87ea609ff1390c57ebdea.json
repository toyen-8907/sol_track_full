{"ast":null,"code":"import { Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAmountToUiAmountInstruction } from '../instructions/amountToUiAmount.js';\n/**\r\n * Amount as a string using mint-prescribed decimals\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param mint           Mint for the account\r\n * @param amount         Amount of tokens to be converted to Ui Amount\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Ui Amount generated\r\n */\nexport async function amountToUiAmount(connection, payer, mint, amount, programId = TOKEN_PROGRAM_ID) {\n  const transaction = new Transaction().add(createAmountToUiAmountInstruction(mint, amount, programId));\n  const {\n    returnData,\n    err\n  } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n  if (returnData?.data) {\n    return Buffer.from(returnData.data[0], returnData.data[1]).toString('utf-8');\n  }\n  return err;\n}","map":{"version":3,"names":["Transaction","TOKEN_PROGRAM_ID","createAmountToUiAmountInstruction","amountToUiAmount","connection","payer","mint","amount","programId","transaction","add","returnData","err","simulateTransaction","value","data","Buffer","from","toString"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\actions\\amountToUiAmount.ts"],"sourcesContent":["import type { Connection, PublicKey, Signer, TransactionError } from '@solana/web3.js';\r\nimport { Transaction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport { createAmountToUiAmountInstruction } from '../instructions/amountToUiAmount.js';\r\n\r\n/**\r\n * Amount as a string using mint-prescribed decimals\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param mint           Mint for the account\r\n * @param amount         Amount of tokens to be converted to Ui Amount\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Ui Amount generated\r\n */\r\nexport async function amountToUiAmount(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    mint: PublicKey,\r\n    amount: number | bigint,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): Promise<string | TransactionError | null> {\r\n    const transaction = new Transaction().add(createAmountToUiAmountInstruction(mint, amount, programId));\r\n    const { returnData, err } = (await connection.simulateTransaction(transaction, [payer], false)).value;\r\n    if (returnData?.data) {\r\n        return Buffer.from(returnData.data[0], returnData.data[1]).toString('utf-8');\r\n    }\r\n    return err;\r\n}\r\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,iCAAiC,QAAQ,qCAAqC;AAEvF;;;;;;;;;;;AAWA,OAAO,eAAeC,gBAAgBA,CAClCC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,MAAuB,EACvBC,SAAS,GAAGP,gBAAgB;EAE5B,MAAMQ,WAAW,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CAACR,iCAAiC,CAACI,IAAI,EAAEC,MAAM,EAAEC,SAAS,CAAC,CAAC;EACrG,MAAM;IAAEG,UAAU;IAAEC;EAAG,CAAE,GAAG,CAAC,MAAMR,UAAU,CAACS,mBAAmB,CAACJ,WAAW,EAAE,CAACJ,KAAK,CAAC,EAAE,KAAK,CAAC,EAAES,KAAK;EACrG,IAAIH,UAAU,EAAEI,IAAI,EAAE;IAClB,OAAOC,MAAM,CAACC,IAAI,CAACN,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC,EAAEJ,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC,CAACG,QAAQ,CAAC,OAAO,CAAC;EAChF;EACA,OAAON,GAAG;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
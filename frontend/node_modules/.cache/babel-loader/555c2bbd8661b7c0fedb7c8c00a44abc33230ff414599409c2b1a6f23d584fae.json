{"ast":null,"code":"/** Base class for errors */\nexport class TokenError extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenAccountNotFoundError';\n  }\n}\n/** Thrown if a program state account is not a valid Account */\nexport class TokenInvalidAccountError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountError';\n  }\n}\n/** Thrown if a program state account does not contain valid data */\nexport class TokenInvalidAccountDataError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountDataError';\n  }\n}\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountOwnerError';\n  }\n}\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountSizeError';\n  }\n}\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidMintError';\n  }\n}\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidOwnerError';\n  }\n}\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenOwnerOffCurveError';\n  }\n}\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionProgramError';\n  }\n}\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionKeysError';\n  }\n}\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionDataError';\n  }\n}\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionTypeError';\n  }\n}\n/** Thrown if the program does not support the desired instruction */\nexport class TokenUnsupportedInstructionError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenUnsupportedInstructionError';\n  }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\nexport class TokenTransferHookAccountNotFound extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenTransferHookAccountNotFound';\n  }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\nexport class TokenTransferHookInvalidSeed extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenTransferHookInvalidSeed';\n  }\n}\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\nexport class TokenTransferHookAccountDataNotFound extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenTransferHookAccountDataNotFound';\n  }\n}","map":{"version":3,"names":["TokenError","Error","constructor","message","TokenAccountNotFoundError","name","TokenInvalidAccountError","TokenInvalidAccountDataError","TokenInvalidAccountOwnerError","TokenInvalidAccountSizeError","TokenInvalidMintError","TokenInvalidOwnerError","TokenOwnerOffCurveError","TokenInvalidInstructionProgramError","TokenInvalidInstructionKeysError","TokenInvalidInstructionDataError","TokenInvalidInstructionTypeError","TokenUnsupportedInstructionError","TokenTransferHookAccountNotFound","TokenTransferHookInvalidSeed","TokenTransferHookAccountDataNotFound"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\errors.ts"],"sourcesContent":["/** Base class for errors */\r\nexport abstract class TokenError extends Error {\r\n    constructor(message?: string) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n/** Thrown if an account is not found at the expected address */\r\nexport class TokenAccountNotFoundError extends TokenError {\r\n    name = 'TokenAccountNotFoundError';\r\n}\r\n\r\n/** Thrown if a program state account is not a valid Account */\r\nexport class TokenInvalidAccountError extends TokenError {\r\n    name = 'TokenInvalidAccountError';\r\n}\r\n\r\n/** Thrown if a program state account does not contain valid data */\r\nexport class TokenInvalidAccountDataError extends TokenError {\r\n    name = 'TokenInvalidAccountDataError';\r\n}\r\n\r\n/** Thrown if a program state account is not owned by the expected token program */\r\nexport class TokenInvalidAccountOwnerError extends TokenError {\r\n    name = 'TokenInvalidAccountOwnerError';\r\n}\r\n\r\n/** Thrown if the byte length of an program state account doesn't match the expected size */\r\nexport class TokenInvalidAccountSizeError extends TokenError {\r\n    name = 'TokenInvalidAccountSizeError';\r\n}\r\n\r\n/** Thrown if the mint of a token account doesn't match the expected mint */\r\nexport class TokenInvalidMintError extends TokenError {\r\n    name = 'TokenInvalidMintError';\r\n}\r\n\r\n/** Thrown if the owner of a token account doesn't match the expected owner */\r\nexport class TokenInvalidOwnerError extends TokenError {\r\n    name = 'TokenInvalidOwnerError';\r\n}\r\n\r\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\r\nexport class TokenOwnerOffCurveError extends TokenError {\r\n    name = 'TokenOwnerOffCurveError';\r\n}\r\n\r\n/** Thrown if an instruction's program is invalid */\r\nexport class TokenInvalidInstructionProgramError extends TokenError {\r\n    name = 'TokenInvalidInstructionProgramError';\r\n}\r\n\r\n/** Thrown if an instruction's keys are invalid */\r\nexport class TokenInvalidInstructionKeysError extends TokenError {\r\n    name = 'TokenInvalidInstructionKeysError';\r\n}\r\n\r\n/** Thrown if an instruction's data is invalid */\r\nexport class TokenInvalidInstructionDataError extends TokenError {\r\n    name = 'TokenInvalidInstructionDataError';\r\n}\r\n\r\n/** Thrown if an instruction's type is invalid */\r\nexport class TokenInvalidInstructionTypeError extends TokenError {\r\n    name = 'TokenInvalidInstructionTypeError';\r\n}\r\n\r\n/** Thrown if the program does not support the desired instruction */\r\nexport class TokenUnsupportedInstructionError extends TokenError {\r\n    name = 'TokenUnsupportedInstructionError';\r\n}\r\n\r\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\r\nexport class TokenTransferHookAccountNotFound extends TokenError {\r\n    name = 'TokenTransferHookAccountNotFound';\r\n}\r\n\r\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\r\nexport class TokenTransferHookInvalidSeed extends TokenError {\r\n    name = 'TokenTransferHookInvalidSeed';\r\n}\r\n\r\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\r\nexport class TokenTransferHookAccountDataNotFound extends TokenError {\r\n    name = 'TokenTransferHookAccountDataNotFound';\r\n}\r\n"],"mappings":"AAAA;AACA,OAAM,MAAgBA,UAAW,SAAQC,KAAK;EAC1CC,YAAYC,OAAgB;IACxB,KAAK,CAACA,OAAO,CAAC;EAClB;;AAGJ;AACA,OAAM,MAAOC,yBAA0B,SAAQJ,UAAU;EAAzDE,YAAA;;IACI,KAAAG,IAAI,GAAG,2BAA2B;EACtC;;AAEA;AACA,OAAM,MAAOC,wBAAyB,SAAQN,UAAU;EAAxDE,YAAA;;IACI,KAAAG,IAAI,GAAG,0BAA0B;EACrC;;AAEA;AACA,OAAM,MAAOE,4BAA6B,SAAQP,UAAU;EAA5DE,YAAA;;IACI,KAAAG,IAAI,GAAG,8BAA8B;EACzC;;AAEA;AACA,OAAM,MAAOG,6BAA8B,SAAQR,UAAU;EAA7DE,YAAA;;IACI,KAAAG,IAAI,GAAG,+BAA+B;EAC1C;;AAEA;AACA,OAAM,MAAOI,4BAA6B,SAAQT,UAAU;EAA5DE,YAAA;;IACI,KAAAG,IAAI,GAAG,8BAA8B;EACzC;;AAEA;AACA,OAAM,MAAOK,qBAAsB,SAAQV,UAAU;EAArDE,YAAA;;IACI,KAAAG,IAAI,GAAG,uBAAuB;EAClC;;AAEA;AACA,OAAM,MAAOM,sBAAuB,SAAQX,UAAU;EAAtDE,YAAA;;IACI,KAAAG,IAAI,GAAG,wBAAwB;EACnC;;AAEA;AACA,OAAM,MAAOO,uBAAwB,SAAQZ,UAAU;EAAvDE,YAAA;;IACI,KAAAG,IAAI,GAAG,yBAAyB;EACpC;;AAEA;AACA,OAAM,MAAOQ,mCAAoC,SAAQb,UAAU;EAAnEE,YAAA;;IACI,KAAAG,IAAI,GAAG,qCAAqC;EAChD;;AAEA;AACA,OAAM,MAAOS,gCAAiC,SAAQd,UAAU;EAAhEE,YAAA;;IACI,KAAAG,IAAI,GAAG,kCAAkC;EAC7C;;AAEA;AACA,OAAM,MAAOU,gCAAiC,SAAQf,UAAU;EAAhEE,YAAA;;IACI,KAAAG,IAAI,GAAG,kCAAkC;EAC7C;;AAEA;AACA,OAAM,MAAOW,gCAAiC,SAAQhB,UAAU;EAAhEE,YAAA;;IACI,KAAAG,IAAI,GAAG,kCAAkC;EAC7C;;AAEA;AACA,OAAM,MAAOY,gCAAiC,SAAQjB,UAAU;EAAhEE,YAAA;;IACI,KAAAG,IAAI,GAAG,kCAAkC;EAC7C;;AAEA;AACA,OAAM,MAAOa,gCAAiC,SAAQlB,UAAU;EAAhEE,YAAA;;IACI,KAAAG,IAAI,GAAG,kCAAkC;EAC7C;;AAEA;AACA,OAAM,MAAOc,4BAA6B,SAAQnB,UAAU;EAA5DE,YAAA;;IACI,KAAAG,IAAI,GAAG,8BAA8B;EACzC;;AAEA;AACA,OAAM,MAAOe,oCAAqC,SAAQpB,UAAU;EAApEE,YAAA;;IACI,KAAAG,IAAI,GAAG,sCAAsC;EACjD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
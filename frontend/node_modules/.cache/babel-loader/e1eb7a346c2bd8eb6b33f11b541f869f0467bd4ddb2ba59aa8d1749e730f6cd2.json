{"ast":null,"code":"import { struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n/** Buffer layout for de/serializing a Metadata Pointer extension */\nexport const MetadataPointerLayout = struct([publicKey('authority'), publicKey('metadataAddress')]);\nexport const METADATA_POINTER_SIZE = MetadataPointerLayout.span;\nexport function getMetadataPointerState(mint) {\n  const extensionData = getExtensionData(ExtensionType.MetadataPointer, mint.tlvData);\n  if (extensionData !== null) {\n    const {\n      authority,\n      metadataAddress\n    } = MetadataPointerLayout.decode(extensionData);\n    // Explicitly set None/Zero keys to null\n    return {\n      authority: authority.equals(PublicKey.default) ? null : authority,\n      metadataAddress: metadataAddress.equals(PublicKey.default) ? null : metadataAddress\n    };\n  } else {\n    return null;\n  }\n}","map":{"version":3,"names":["struct","publicKey","PublicKey","ExtensionType","getExtensionData","MetadataPointerLayout","METADATA_POINTER_SIZE","span","getMetadataPointerState","mint","extensionData","MetadataPointer","tlvData","authority","metadataAddress","decode","equals","default"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/extensions/metadataPointer/state.ts"],"sourcesContent":["import { struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\n/** MetadataPointer as stored by the program */\nexport interface MetadataPointer {\n    /** Optional authority that can set the metadata address */\n    authority: PublicKey | null;\n    /** Optional Account Address that holds the metadata */\n    metadataAddress: PublicKey | null;\n}\n\n/** Buffer layout for de/serializing a Metadata Pointer extension */\nexport const MetadataPointerLayout = struct<{ authority: PublicKey; metadataAddress: PublicKey }>([\n    publicKey('authority'),\n    publicKey('metadataAddress'),\n]);\n\nexport const METADATA_POINTER_SIZE = MetadataPointerLayout.span;\n\nexport function getMetadataPointerState(mint: Mint): Partial<MetadataPointer> | null {\n    const extensionData = getExtensionData(ExtensionType.MetadataPointer, mint.tlvData);\n    if (extensionData !== null) {\n        const { authority, metadataAddress } = MetadataPointerLayout.decode(extensionData);\n\n        // Explicitly set None/Zero keys to null\n        return {\n            authority: authority.equals(PublicKey.default) ? null : authority,\n            metadataAddress: metadataAddress.equals(PublicKey.default) ? null : metadataAddress,\n        };\n    } else {\n        return null;\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,SAAS,QAAQ,iBAAiB;AAE3C,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,qBAAqB;AAUrE;AACA,OAAO,MAAMC,qBAAqB,GAAGL,MAAM,CAAuD,CAC9FC,SAAS,CAAC,WAAW,CAAC,EACtBA,SAAS,CAAC,iBAAiB,CAAC,CAC/B,CAAC;AAEF,OAAO,MAAMK,qBAAqB,GAAGD,qBAAqB,CAACE,IAAI;AAE/D,OAAM,SAAUC,uBAAuBA,CAACC,IAAU;EAC9C,MAAMC,aAAa,GAAGN,gBAAgB,CAACD,aAAa,CAACQ,eAAe,EAAEF,IAAI,CAACG,OAAO,CAAC;EACnF,IAAIF,aAAa,KAAK,IAAI,EAAE;IACxB,MAAM;MAAEG,SAAS;MAAEC;IAAe,CAAE,GAAGT,qBAAqB,CAACU,MAAM,CAACL,aAAa,CAAC;IAElF;IACA,OAAO;MACHG,SAAS,EAAEA,SAAS,CAACG,MAAM,CAACd,SAAS,CAACe,OAAO,CAAC,GAAG,IAAI,GAAGJ,SAAS;MACjEC,eAAe,EAAEA,eAAe,CAACE,MAAM,CAACd,SAAS,CAACe,OAAO,CAAC,GAAG,IAAI,GAAGH;KACvE;EACL,CAAC,MAAM;IACH,OAAO,IAAI;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
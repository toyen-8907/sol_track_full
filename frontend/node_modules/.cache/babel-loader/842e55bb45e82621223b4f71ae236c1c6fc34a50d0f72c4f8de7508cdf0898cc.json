{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeDefaultAccountStateInstruction, createUpdateDefaultAccountStateInstruction } from './instructions.js';\n/**\r\n * Initialize a default account state on a mint\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param mint        Mint to initialize with extension\r\n * @param state        Account state with which to initialize new accounts\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\nexport async function initializeDefaultAccountState(connection, payer, mint, state, confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const transaction = new Transaction().add(createInitializeDefaultAccountStateInstruction(mint, state, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n/**\r\n * Update the default account state on a mint\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param mint        Mint to modify\r\n * @param state        New account state to set on created accounts\r\n * @param freezeAuthority          Freeze authority of the mint\r\n * @param multiSigners   Signing accounts if `freezeAuthority` is a multisig\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\nexport async function updateDefaultAccountState(connection, payer, mint, state, freezeAuthority, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [freezeAuthorityPublicKey, signers] = getSigners(freezeAuthority, multiSigners);\n  const transaction = new Transaction().add(createUpdateDefaultAccountStateInstruction(mint, state, freezeAuthorityPublicKey, signers, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","getSigners","TOKEN_2022_PROGRAM_ID","createInitializeDefaultAccountStateInstruction","createUpdateDefaultAccountStateInstruction","initializeDefaultAccountState","connection","payer","mint","state","confirmOptions","programId","transaction","add","updateDefaultAccountState","freezeAuthority","multiSigners","freezeAuthorityPublicKey","signers"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\extensions\\defaultAccountState\\actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\r\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\r\nimport { getSigners } from '../../actions/internal.js';\r\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\r\nimport type { AccountState } from '../../state/account.js';\r\nimport {\r\n    createInitializeDefaultAccountStateInstruction,\r\n    createUpdateDefaultAccountStateInstruction,\r\n} from './instructions.js';\r\n\r\n/**\r\n * Initialize a default account state on a mint\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param mint        Mint to initialize with extension\r\n * @param state        Account state with which to initialize new accounts\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\r\nexport async function initializeDefaultAccountState(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    mint: PublicKey,\r\n    state: AccountState,\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_2022_PROGRAM_ID,\r\n): Promise<TransactionSignature> {\r\n    const transaction = new Transaction().add(createInitializeDefaultAccountStateInstruction(mint, state, programId));\r\n\r\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\r\n}\r\n\r\n/**\r\n * Update the default account state on a mint\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param mint        Mint to modify\r\n * @param state        New account state to set on created accounts\r\n * @param freezeAuthority          Freeze authority of the mint\r\n * @param multiSigners   Signing accounts if `freezeAuthority` is a multisig\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\r\nexport async function updateDefaultAccountState(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    mint: PublicKey,\r\n    state: AccountState,\r\n    freezeAuthority: Signer | PublicKey,\r\n    multiSigners: Signer[] = [],\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_2022_PROGRAM_ID,\r\n): Promise<TransactionSignature> {\r\n    const [freezeAuthorityPublicKey, signers] = getSigners(freezeAuthority, multiSigners);\r\n\r\n    const transaction = new Transaction().add(\r\n        createUpdateDefaultAccountStateInstruction(mint, state, freezeAuthorityPublicKey, signers, programId),\r\n    );\r\n\r\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\r\n}\r\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,qBAAqB,QAAQ,oBAAoB;AAE1D,SACIC,8CAA8C,EAC9CC,0CAA0C,QACvC,mBAAmB;AAE1B;;;;;;;;;;;;AAYA,OAAO,eAAeC,6BAA6BA,CAC/CC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAmB,EACnBC,cAA+B,EAC/BC,SAAS,GAAGT,qBAAqB;EAEjC,MAAMU,WAAW,GAAG,IAAIZ,WAAW,EAAE,CAACa,GAAG,CAACV,8CAA8C,CAACK,IAAI,EAAEC,KAAK,EAAEE,SAAS,CAAC,CAAC;EAEjH,OAAO,MAAMZ,yBAAyB,CAACO,UAAU,EAAEM,WAAW,EAAE,CAACL,KAAK,CAAC,EAAEG,cAAc,CAAC;AAC5F;AAEA;;;;;;;;;;;;;;AAcA,OAAO,eAAeI,yBAAyBA,CAC3CR,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAmB,EACnBM,eAAmC,EACnCC,YAAA,GAAyB,EAAE,EAC3BN,cAA+B,EAC/BC,SAAS,GAAGT,qBAAqB;EAEjC,MAAM,CAACe,wBAAwB,EAAEC,OAAO,CAAC,GAAGjB,UAAU,CAACc,eAAe,EAAEC,YAAY,CAAC;EAErF,MAAMJ,WAAW,GAAG,IAAIZ,WAAW,EAAE,CAACa,GAAG,CACrCT,0CAA0C,CAACI,IAAI,EAAEC,KAAK,EAAEQ,wBAAwB,EAAEC,OAAO,EAAEP,SAAS,CAAC,CACxG;EAED,OAAO,MAAMZ,yBAAyB,CAACO,UAAU,EAAEM,WAAW,EAAE,CAACL,KAAK,EAAE,GAAGW,OAAO,CAAC,EAAER,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
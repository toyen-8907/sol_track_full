{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createSetAuthorityInstruction } from '../instructions/setAuthority.js';\nimport { getSigners } from './internal.js';\n/**\r\n * Assign a new authority to the account\r\n *\r\n * @param connection       Connection to use\r\n * @param payer            Payer of the transaction fees\r\n * @param account          Address of the account\r\n * @param currentAuthority Current authority of the specified type\r\n * @param authorityType    Type of authority to set\r\n * @param newAuthority     New authority of the account\r\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\r\n * @param confirmOptions   Options for confirming the transaction\r\n * @param programId        SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\nexport async function setAuthority(connection, payer, account, currentAuthority, authorityType, newAuthority, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [currentAuthorityPublicKey, signers] = getSigners(currentAuthority, multiSigners);\n  const transaction = new Transaction().add(createSetAuthorityInstruction(account, currentAuthorityPublicKey, authorityType, newAuthority, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createSetAuthorityInstruction","getSigners","setAuthority","connection","payer","account","currentAuthority","authorityType","newAuthority","multiSigners","confirmOptions","programId","currentAuthorityPublicKey","signers","transaction","add"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\actions\\setAuthority.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\r\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport type { AuthorityType } from '../instructions/setAuthority.js';\r\nimport { createSetAuthorityInstruction } from '../instructions/setAuthority.js';\r\nimport { getSigners } from './internal.js';\r\n\r\n/**\r\n * Assign a new authority to the account\r\n *\r\n * @param connection       Connection to use\r\n * @param payer            Payer of the transaction fees\r\n * @param account          Address of the account\r\n * @param currentAuthority Current authority of the specified type\r\n * @param authorityType    Type of authority to set\r\n * @param newAuthority     New authority of the account\r\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\r\n * @param confirmOptions   Options for confirming the transaction\r\n * @param programId        SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\r\nexport async function setAuthority(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    account: PublicKey,\r\n    currentAuthority: Signer | PublicKey,\r\n    authorityType: AuthorityType,\r\n    newAuthority: PublicKey | null,\r\n    multiSigners: Signer[] = [],\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): Promise<TransactionSignature> {\r\n    const [currentAuthorityPublicKey, signers] = getSigners(currentAuthority, multiSigners);\r\n\r\n    const transaction = new Transaction().add(\r\n        createSetAuthorityInstruction(\r\n            account,\r\n            currentAuthorityPublicKey,\r\n            authorityType,\r\n            newAuthority,\r\n            multiSigners,\r\n            programId,\r\n        ),\r\n    );\r\n\r\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\r\n}\r\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAElD,SAASC,6BAA6B,QAAQ,iCAAiC;AAC/E,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;;;;;;;;;;;;AAeA,OAAO,eAAeC,YAAYA,CAC9BC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,gBAAoC,EACpCC,aAA4B,EAC5BC,YAA8B,EAC9BC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGZ,gBAAgB;EAE5B,MAAM,CAACa,yBAAyB,EAAEC,OAAO,CAAC,GAAGZ,UAAU,CAACK,gBAAgB,EAAEG,YAAY,CAAC;EAEvF,MAAMK,WAAW,GAAG,IAAIhB,WAAW,EAAE,CAACiB,GAAG,CACrCf,6BAA6B,CACzBK,OAAO,EACPO,yBAAyB,EACzBL,aAAa,EACbC,YAAY,EACZC,YAAY,EACZE,SAAS,CACZ,CACJ;EAED,OAAO,MAAMd,yBAAyB,CAACM,UAAU,EAAEW,WAAW,EAAE,CAACV,KAAK,EAAE,GAAGS,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { AccountLayout } from '@solana/spl-token';\nimport { Buffer } from 'buffer';\nimport { createSolanaRpc, address } from \"@solana/web3.js\";\n\n//查询指定钱包的所有 SPL Token 余额\nasync function fetchAllSplTokenBalances(connection, walletAddress) {\n  try {\n    // 获取钱包地址下所有解析后的 SPL Token 账户\n    const response = await connection.getParsedTokenAccountsByOwner(new PublicKey(walletAddress),\n    // 钱包地址\n    {\n      programId: new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\") // SPL Token 程序 ID\n    });\n\n    // 处理返回的账户数据，提取每个 Token 的余额信息\n    const tokenBalances = response.value.map(accountInfo => {\n      const {\n        mint,\n        tokenAmount\n      } = accountInfo.account.data.parsed.info;\n      return {\n        mint,\n        // Token 的 Mint 地址\n        balance: tokenAmount.uiAmountString // 使用小数点表示的余额\n      };\n    });\n    console.log(tokenBalances);\n    return tokenBalances;\n  } catch (error) {\n    console.error(\"獲取 SPL Token 餘額時出錯:\", error);\n    throw error;\n  }\n}\nasync function fetchSolBalance(connection, walletAddress) {\n  try {\n    const balance = await connection.getBalance(new PublicKey(walletAddress));\n    return balance / 1000000000; // Convert lamports to SOL\n  } catch (error) {\n    console.error(\"獲取 SOL 餘額時出錯:\", error);\n    throw error;\n  }\n}\nconst WebSocketComponent = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(({\n  onConnectionStatus,\n  account,\n  onMessageReceived,\n  onConnectionResult,\n  onSPLbalance\n}) => {\n  _s();\n  const hasEffectRun = useRef(false);\n  const connectionRef = useRef(null);\n  const subscriptionIdRef = useRef(null);\n  const firstTimeConnect = useRef(true);\n  useEffect(() => {\n    if (hasEffectRun.current) return;\n    hasEffectRun.current = true;\n    const RPC_ENDPOINT = process.env.REACT_APP_RPC_ENDPOINT;\n    const WS_ENDPOINT = process.env.REACT_APP_WS_ENDPOINT;\n    if (!RPC_ENDPOINT || !WS_ENDPOINT) {\n      console.error('RPC_ENDPOINT or WS_ENDPOINT is not defined in .env file.');\n      onConnectionStatus('Error');\n      return;\n    }\n\n    // 创建并存储连接\n    const connection = new Connection(RPC_ENDPOINT, {\n      commitment: 'finalized',\n      wsEndpoint: WS_ENDPOINT\n    });\n    connectionRef.current = connection;\n\n    // 将账户地址转换为 PublicKey 对象\n    const publicKey = new PublicKey(account);\n\n    // 初次连接时获取 SOL 余额和 SPL Token 余额\n    const initializeBalances = async () => {\n      try {\n        // 获取 SOL 余额\n        const solBalance = await fetchSolBalance(connection, account);\n        onMessageReceived(`${solBalance}`);\n\n        // 获取 SPL Token 余额\n        const splTokenBalances = await fetchAllSplTokenBalances(connection, account);\n        onSPLbalance(JSON.stringify(splTokenBalances));\n      } catch (error) {\n        console.error(\"初始余额获取出错:\", error);\n      }\n    };\n\n    // 设置初始连接状态为 \"Connecting\"\n    onConnectionStatus('Connecting');\n\n    // 订阅账户变化\n    const subscribe = async () => {\n      try {\n        const subscriptionId = await connection.onAccountChange(publicKey, async (accountInfo, context) => {\n          // 处理账户信息更新\n          const lamports = accountInfo.lamports;\n          console.log('Updated account info:', accountInfo);\n          console.log('Slot:', context.slot);\n          if (lamports !== undefined) {\n            const balance = lamports / 1000000000;\n            onMessageReceived(`餘額: ${balance} $SOL`);\n          }\n          onConnectionResult(`Slot: ${context.slot}`);\n\n          // 在账户变化时获取所有 SPL Token 余额\n          const splTokenBalances = await fetchAllSplTokenBalances(connection, account);\n          onSPLbalance(`${JSON.stringify(splTokenBalances)}`);\n        }, 'finalized');\n        subscriptionIdRef.current = subscriptionId;\n\n        // 订阅成功，更新连接状态为 \"Connected\"\n        onConnectionStatus('Connected');\n      } catch (error) {\n        console.error('Subscription error:', error);\n        onConnectionStatus('Error');\n      }\n    };\n    subscribe();\n\n    // 组件卸载时取消订阅\n    return () => {\n      if (connectionRef.current && subscriptionIdRef.current !== null) {\n        connectionRef.current.removeAccountChangeListener(subscriptionIdRef.current).then(() => {\n          console.log('Account change listener removed.');\n          onConnectionStatus('Disconnected');\n        }).catch(error => {\n          console.error('Error removing account change listener:', error);\n        });\n      }\n    };\n  }, [onConnectionStatus, account, onMessageReceived, onConnectionResult]);\n  return null;\n}, \"Px6GqOKDkJP37HHZesOW4Ly8HUg=\")), \"Px6GqOKDkJP37HHZesOW4Ly8HUg=\");\n_c2 = WebSocketComponent;\nexport default WebSocketComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"WebSocketComponent$React.memo\");\n$RefreshReg$(_c2, \"WebSocketComponent\");","map":{"version":3,"names":["React","useEffect","useRef","Connection","PublicKey","AccountLayout","Buffer","createSolanaRpc","address","fetchAllSplTokenBalances","connection","walletAddress","response","getParsedTokenAccountsByOwner","programId","tokenBalances","value","map","accountInfo","mint","tokenAmount","account","data","parsed","info","balance","uiAmountString","console","log","error","fetchSolBalance","getBalance","WebSocketComponent","_s","memo","_c","onConnectionStatus","onMessageReceived","onConnectionResult","onSPLbalance","hasEffectRun","connectionRef","subscriptionIdRef","firstTimeConnect","current","RPC_ENDPOINT","process","env","REACT_APP_RPC_ENDPOINT","WS_ENDPOINT","REACT_APP_WS_ENDPOINT","commitment","wsEndpoint","publicKey","initializeBalances","solBalance","splTokenBalances","JSON","stringify","subscribe","subscriptionId","onAccountChange","context","lamports","slot","undefined","removeAccountChangeListener","then","catch","_c2","$RefreshReg$"],"sources":["/Users/damentp01/project/sol_track_ac/src/WebSocketComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { AccountLayout } from '@solana/spl-token';\nimport { Buffer } from 'buffer';\n\nimport { createSolanaRpc, address } from \"@solana/web3.js\";\n\n\n\n//查询指定钱包的所有 SPL Token 余额\nasync function fetchAllSplTokenBalances(connection, walletAddress) {\n  try {\n    // 获取钱包地址下所有解析后的 SPL Token 账户\n    const response = await connection.getParsedTokenAccountsByOwner(\n      new PublicKey(walletAddress), // 钱包地址\n      {\n        programId: new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"), // SPL Token 程序 ID\n      }\n    );\n\n    // 处理返回的账户数据，提取每个 Token 的余额信息\n    const tokenBalances = response.value.map((accountInfo) => {\n      const { mint, tokenAmount } = accountInfo.account.data.parsed.info;\n      return {\n        mint, // Token 的 Mint 地址\n        balance: tokenAmount.uiAmountString // 使用小数点表示的余额\n      };\n    });\n    console.log(tokenBalances)\n    return tokenBalances;\n\n  } catch (error) {\n    console.error(\"獲取 SPL Token 餘額時出錯:\", error);\n    throw error;\n  }\n}\n\nasync function fetchSolBalance(connection, walletAddress) {\n  try {\n    const balance = await connection.getBalance(new PublicKey(walletAddress));\n    return balance / 1000000000; // Convert lamports to SOL\n  } catch (error) {\n    console.error(\"獲取 SOL 餘額時出錯:\", error);\n    throw error;\n  }\n}\n\n\nconst WebSocketComponent = React.memo(({ onConnectionStatus, account, onMessageReceived, onConnectionResult,onSPLbalance }) => {\n  const hasEffectRun = useRef(false);\n  const connectionRef = useRef(null);\n  const subscriptionIdRef = useRef(null);\n  const firstTimeConnect = useRef(true);\n  useEffect(() => {\n    if (hasEffectRun.current) return;\n    hasEffectRun.current = true;\n\n    const RPC_ENDPOINT = process.env.REACT_APP_RPC_ENDPOINT;\n    const WS_ENDPOINT = process.env.REACT_APP_WS_ENDPOINT;\n\n    if (!RPC_ENDPOINT || !WS_ENDPOINT) {\n      console.error('RPC_ENDPOINT or WS_ENDPOINT is not defined in .env file.');\n      onConnectionStatus('Error');\n      return;\n    }\n\n    // 创建并存储连接\n    const connection = new Connection(RPC_ENDPOINT, {\n      commitment: 'finalized',\n      wsEndpoint: WS_ENDPOINT,\n    });\n    connectionRef.current = connection;\n\n    // 将账户地址转换为 PublicKey 对象\n    const publicKey = new PublicKey(account);\n\n    // 初次连接时获取 SOL 余额和 SPL Token 余额\n    const initializeBalances = async () => {\n      try {\n        // 获取 SOL 余额\n        const solBalance = await fetchSolBalance(connection, account);\n        onMessageReceived(`${solBalance}`);\n\n        // 获取 SPL Token 余额\n        const splTokenBalances = await fetchAllSplTokenBalances(connection, account);\n        onSPLbalance(JSON.stringify(splTokenBalances));\n      } catch (error) {\n        console.error(\"初始余额获取出错:\", error);\n      }\n    };\n\n    // 设置初始连接状态为 \"Connecting\"\n    onConnectionStatus('Connecting');\n\n    // 订阅账户变化\n    const subscribe = async () => {\n      try {\n        const subscriptionId = await connection.onAccountChange(\n          publicKey,\n          async (accountInfo, context) => {\n            // 处理账户信息更新\n            const lamports = accountInfo.lamports;\n            console.log('Updated account info:', accountInfo);\n            console.log('Slot:', context.slot);\n\n            if (lamports !== undefined) {\n              const balance = lamports/1000000000;\n              onMessageReceived(`餘額: ${balance} $SOL`);\n            }\n            \n            onConnectionResult(`Slot: ${context.slot}`);\n\n            // 在账户变化时获取所有 SPL Token 余额\n            const splTokenBalances = await fetchAllSplTokenBalances(connection, account);\n            onSPLbalance(`${JSON.stringify(splTokenBalances)}`);\n            \n\n          },\n          'finalized'\n        );\n        subscriptionIdRef.current = subscriptionId;\n\n        // 订阅成功，更新连接状态为 \"Connected\"\n        onConnectionStatus('Connected');\n      } catch (error) {\n        console.error('Subscription error:', error);\n        onConnectionStatus('Error');\n      }\n    };\n\n    subscribe();\n\n    // 组件卸载时取消订阅\n    return () => {\n      if (connectionRef.current && subscriptionIdRef.current !== null) {\n        connectionRef.current.removeAccountChangeListener(subscriptionIdRef.current)\n          .then(() => {\n            console.log('Account change listener removed.');\n            onConnectionStatus('Disconnected');\n          })\n          .catch((error) => {\n            console.error('Error removing account change listener:', error);\n          });\n      }\n    };\n  }, [onConnectionStatus, account, onMessageReceived, onConnectionResult]);\n\n  return null;\n});\n\nexport default WebSocketComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** The struct that represents the instruction data as it is read by the program */\nexport const initializeNonTransferableMintInstructionData = struct([u8('instruction')]);\n/**\r\n * Construct an InitializeNonTransferableMint instruction\r\n *\r\n * @param mint           Mint Account to make non-transferable\r\n * @param programId         SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createInitializeNonTransferableMintInstruction(mint, programId) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(initializeNonTransferableMintInstructionData.span);\n  initializeNonTransferableMintInstructionData.encode({\n    instruction: TokenInstruction.InitializeNonTransferableMint\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":{"version":3,"names":["struct","u8","TransactionInstruction","programSupportsExtensions","TokenUnsupportedInstructionError","TokenInstruction","initializeNonTransferableMintInstructionData","createInitializeNonTransferableMintInstruction","mint","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","InitializeNonTransferableMint"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\initializeNonTransferableMint.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport type { PublicKey } from '@solana/web3.js';\r\nimport { TransactionInstruction } from '@solana/web3.js';\r\nimport { programSupportsExtensions } from '../constants.js';\r\nimport { TokenUnsupportedInstructionError } from '../errors.js';\r\nimport { TokenInstruction } from './types.js';\r\n\r\n/** Deserialized instruction for the initiation of an immutable owner account */\r\nexport interface InitializeNonTransferableMintInstructionData {\r\n    instruction: TokenInstruction.InitializeNonTransferableMint;\r\n}\r\n\r\n/** The struct that represents the instruction data as it is read by the program */\r\nexport const initializeNonTransferableMintInstructionData = struct<InitializeNonTransferableMintInstructionData>([\r\n    u8('instruction'),\r\n]);\r\n\r\n/**\r\n * Construct an InitializeNonTransferableMint instruction\r\n *\r\n * @param mint           Mint Account to make non-transferable\r\n * @param programId         SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createInitializeNonTransferableMintInstruction(\r\n    mint: PublicKey,\r\n    programId: PublicKey,\r\n): TransactionInstruction {\r\n    if (!programSupportsExtensions(programId)) {\r\n        throw new TokenUnsupportedInstructionError();\r\n    }\r\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\r\n\r\n    const data = Buffer.alloc(initializeNonTransferableMintInstructionData.span);\r\n    initializeNonTransferableMintInstructionData.encode(\r\n        {\r\n            instruction: TokenInstruction.InitializeNonTransferableMint,\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,yBAAyB,QAAQ,iBAAiB;AAC3D,SAASC,gCAAgC,QAAQ,cAAc;AAC/D,SAASC,gBAAgB,QAAQ,YAAY;AAO7C;AACA,OAAO,MAAMC,4CAA4C,GAAGN,MAAM,CAA+C,CAC7GC,EAAE,CAAC,aAAa,CAAC,CACpB,CAAC;AAEF;;;;;;;;AAQA,OAAM,SAAUM,8CAA8CA,CAC1DC,IAAe,EACfC,SAAoB;EAEpB,IAAI,CAACN,yBAAyB,CAACM,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIL,gCAAgC,EAAE;EAChD;EACA,MAAMM,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEH,IAAI;IAAEI,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAElE,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACV,4CAA4C,CAACW,IAAI,CAAC;EAC5EX,4CAA4C,CAACY,MAAM,CAC/C;IACIC,WAAW,EAAEd,gBAAgB,CAACe;GACjC,EACDN,IAAI,CACP;EAED,OAAO,IAAIZ,sBAAsB,CAAC;IAAEQ,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
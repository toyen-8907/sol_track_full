{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const closeAccountInstructionData = struct([u8('instruction')]);\n/**\r\n * Construct a CloseAccount instruction\r\n *\r\n * @param account      Account to close\r\n * @param destination  Account to receive the remaining balance of the closed account\r\n * @param authority    Account close authority\r\n * @param multiSigners Signing accounts if `authority` is a multisig\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createCloseAccountInstruction(account, destination, authority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(closeAccountInstructionData.span);\n  closeAccountInstructionData.encode({\n    instruction: TokenInstruction.CloseAccount\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\r\n * Decode a CloseAccount instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\nexport function decodeCloseAccountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== closeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  } = decodeCloseAccountInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.CloseAccount) throw new TokenInvalidInstructionTypeError();\n  if (!account || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  };\n}\n/**\r\n * Decode a CloseAccount instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\nexport function decodeCloseAccountInstructionUnchecked({\n  programId,\n  keys: [account, destination, authority, ...multiSigners],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      account,\n      destination,\n      authority,\n      multiSigners\n    },\n    data: closeAccountInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","closeAccountInstructionData","createCloseAccountInstruction","account","destination","authority","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","CloseAccount","decodeCloseAccountInstruction","equals","length","decodeCloseAccountInstructionUnchecked","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\closeAccount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\r\nimport { TransactionInstruction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport {\r\n    TokenInvalidInstructionDataError,\r\n    TokenInvalidInstructionKeysError,\r\n    TokenInvalidInstructionProgramError,\r\n    TokenInvalidInstructionTypeError,\r\n} from '../errors.js';\r\nimport { addSigners } from './internal.js';\r\nimport { TokenInstruction } from './types.js';\r\n\r\n/** TODO: docs */\r\nexport interface CloseAccountInstructionData {\r\n    instruction: TokenInstruction.CloseAccount;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const closeAccountInstructionData = struct<CloseAccountInstructionData>([u8('instruction')]);\r\n\r\n/**\r\n * Construct a CloseAccount instruction\r\n *\r\n * @param account      Account to close\r\n * @param destination  Account to receive the remaining balance of the closed account\r\n * @param authority    Account close authority\r\n * @param multiSigners Signing accounts if `authority` is a multisig\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createCloseAccountInstruction(\r\n    account: PublicKey,\r\n    destination: PublicKey,\r\n    authority: PublicKey,\r\n    multiSigners: (Signer | PublicKey)[] = [],\r\n    programId = TOKEN_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    const keys = addSigners(\r\n        [\r\n            { pubkey: account, isSigner: false, isWritable: true },\r\n            { pubkey: destination, isSigner: false, isWritable: true },\r\n        ],\r\n        authority,\r\n        multiSigners,\r\n    );\r\n\r\n    const data = Buffer.alloc(closeAccountInstructionData.span);\r\n    closeAccountInstructionData.encode({ instruction: TokenInstruction.CloseAccount }, data);\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\n/** A decoded, valid CloseAccount instruction */\r\nexport interface DecodedCloseAccountInstruction {\r\n    programId: PublicKey;\r\n    keys: {\r\n        account: AccountMeta;\r\n        destination: AccountMeta;\r\n        authority: AccountMeta;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: TokenInstruction.CloseAccount;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a CloseAccount instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\r\nexport function decodeCloseAccountInstruction(\r\n    instruction: TransactionInstruction,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): DecodedCloseAccountInstruction {\r\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\r\n    if (instruction.data.length !== closeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\r\n\r\n    const {\r\n        keys: { account, destination, authority, multiSigners },\r\n        data,\r\n    } = decodeCloseAccountInstructionUnchecked(instruction);\r\n    if (data.instruction !== TokenInstruction.CloseAccount) throw new TokenInvalidInstructionTypeError();\r\n    if (!account || !destination || !authority) throw new TokenInvalidInstructionKeysError();\r\n\r\n    // TODO: key checks?\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            account,\r\n            destination,\r\n            authority,\r\n            multiSigners,\r\n        },\r\n        data,\r\n    };\r\n}\r\n\r\n/** A decoded, non-validated CloseAccount instruction */\r\nexport interface DecodedCloseAccountInstructionUnchecked {\r\n    programId: PublicKey;\r\n    keys: {\r\n        account: AccountMeta | undefined;\r\n        destination: AccountMeta | undefined;\r\n        authority: AccountMeta | undefined;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: number;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a CloseAccount instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\r\nexport function decodeCloseAccountInstructionUnchecked({\r\n    programId,\r\n    keys: [account, destination, authority, ...multiSigners],\r\n    data,\r\n}: TransactionInstruction): DecodedCloseAccountInstructionUnchecked {\r\n    return {\r\n        programId,\r\n        keys: {\r\n            account,\r\n            destination,\r\n            authority,\r\n            multiSigners,\r\n        },\r\n        data: closeAccountInstructionData.decode(data),\r\n    };\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,gBAAgB,QAAQ,YAAY;AAO7C;AACA,OAAO,MAAMC,2BAA2B,GAAGV,MAAM,CAA8B,CAACC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;AAEnG;;;;;;;;;;;AAWA,OAAM,SAAUU,6BAA6BA,CACzCC,OAAkB,EAClBC,WAAsB,EACtBC,SAAoB,EACpBC,YAAA,GAAuC,EAAE,EACzCC,SAAS,GAAGb,gBAAgB;EAE5B,MAAMc,IAAI,GAAGT,UAAU,CACnB,CACI;IAAEU,MAAM,EAAEN,OAAO;IAAEO,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACtD;IAAEF,MAAM,EAAEL,WAAW;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAC7D,EACDN,SAAS,EACTC,YAAY,CACf;EAED,MAAMM,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACb,2BAA2B,CAACc,IAAI,CAAC;EAC3Dd,2BAA2B,CAACe,MAAM,CAAC;IAAEC,WAAW,EAAEjB,gBAAgB,CAACkB;EAAY,CAAE,EAAEN,IAAI,CAAC;EAExF,OAAO,IAAInB,sBAAsB,CAAC;IAAEe,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAgBA;;;;;;;;AAQA,OAAM,SAAUO,6BAA6BA,CACzCF,WAAmC,EACnCV,SAAS,GAAGb,gBAAgB;EAE5B,IAAI,CAACuB,WAAW,CAACV,SAAS,CAACa,MAAM,CAACb,SAAS,CAAC,EAAE,MAAM,IAAIV,mCAAmC,EAAE;EAC7F,IAAIoB,WAAW,CAACL,IAAI,CAACS,MAAM,KAAKpB,2BAA2B,CAACc,IAAI,EAAE,MAAM,IAAIpB,gCAAgC,EAAE;EAE9G,MAAM;IACFa,IAAI,EAAE;MAAEL,OAAO;MAAEC,WAAW;MAAEC,SAAS;MAAEC;IAAY,CAAE;IACvDM;EAAI,CACP,GAAGU,sCAAsC,CAACL,WAAW,CAAC;EACvD,IAAIL,IAAI,CAACK,WAAW,KAAKjB,gBAAgB,CAACkB,YAAY,EAAE,MAAM,IAAIpB,gCAAgC,EAAE;EACpG,IAAI,CAACK,OAAO,IAAI,CAACC,WAAW,IAAI,CAACC,SAAS,EAAE,MAAM,IAAIT,gCAAgC,EAAE;EAExF;EAEA,OAAO;IACHW,SAAS;IACTC,IAAI,EAAE;MACFL,OAAO;MACPC,WAAW;MACXC,SAAS;MACTC;KACH;IACDM;GACH;AACL;AAgBA;;;;;;;AAOA,OAAM,SAAUU,sCAAsCA,CAAC;EACnDf,SAAS;EACTC,IAAI,EAAE,CAACL,OAAO,EAAEC,WAAW,EAAEC,SAAS,EAAE,GAAGC,YAAY,CAAC;EACxDM;AAAI,CACiB;EACrB,OAAO;IACHL,SAAS;IACTC,IAAI,EAAE;MACFL,OAAO;MACPC,WAAW;MACXC,SAAS;MACTC;KACH;IACDM,IAAI,EAAEX,2BAA2B,CAACsB,MAAM,CAACX,IAAI;GAChD;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { blob, struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUiAmountToAmountInstruction(mint, amount, programId = TOKEN_PROGRAM_ID) {\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }];\n  const buf = Buffer.from(amount, 'utf8');\n  const uiAmountToAmountInstructionData = struct([u8('instruction'), blob(buf.length, 'amount')]);\n  const data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n  uiAmountToAmountInstructionData.encode({\n    instruction: TokenInstruction.UiAmountToAmount,\n    amount: buf\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeUiAmountToAmountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  const uiAmountToAmountInstructionData = struct([u8('instruction'), blob(instruction.data.length - 1, 'amount')]);\n  if (instruction.data.length !== uiAmountToAmountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint\n    },\n    data\n  } = decodeUiAmountToAmountInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.UiAmountToAmount) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data\n  };\n}\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeUiAmountToAmountInstructionUnchecked({\n  programId,\n  keys: [mint],\n  data\n}) {\n  const uiAmountToAmountInstructionData = struct([u8('instruction'), blob(data.length - 1, 'amount')]);\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data: uiAmountToAmountInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["blob","struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","createUiAmountToAmountInstruction","mint","amount","programId","keys","pubkey","isSigner","isWritable","buf","Buffer","from","uiAmountToAmountInstructionData","length","data","alloc","span","encode","instruction","UiAmountToAmount","decodeUiAmountToAmountInstruction","equals","decodeUiAmountToAmountInstructionUnchecked","decode"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/instructions/uiAmountToAmount.ts"],"sourcesContent":["import { blob, struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface UiAmountToAmountInstructionData {\n    instruction: TokenInstruction.UiAmountToAmount;\n    amount: Uint8Array;\n}\n\n/** TODO: docs */\n\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUiAmountToAmountInstruction(\n    mint: PublicKey,\n    amount: string,\n    programId = TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];\n    const buf = Buffer.from(amount, 'utf8');\n    const uiAmountToAmountInstructionData = struct<UiAmountToAmountInstructionData>([\n        u8('instruction'),\n        blob(buf.length, 'amount'),\n    ]);\n\n    const data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n    uiAmountToAmountInstructionData.encode(\n        {\n            instruction: TokenInstruction.UiAmountToAmount,\n            amount: buf,\n        },\n        data,\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid UiAmountToAmount instruction */\nexport interface DecodedUiAmountToAmountInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.UiAmountToAmount;\n        amount: Uint8Array;\n    };\n}\n\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeUiAmountToAmountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID,\n): DecodedUiAmountToAmountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    const uiAmountToAmountInstructionData = struct<UiAmountToAmountInstructionData>([\n        u8('instruction'),\n        blob(instruction.data.length - 1, 'amount'),\n    ]);\n    if (instruction.data.length !== uiAmountToAmountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeUiAmountToAmountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.UiAmountToAmount) throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated UiAmountToAmount instruction */\nexport interface DecodedUiAmountToAmountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        amount: Uint8Array;\n    };\n}\n\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeUiAmountToAmountInstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedUiAmountToAmountInstructionUnchecked {\n    const uiAmountToAmountInstructionData = struct<UiAmountToAmountInstructionData>([\n        u8('instruction'),\n        blob(data.length - 1, 'amount'),\n    ]);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: uiAmountToAmountInstructionData.decode(data),\n    };\n}\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAExD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,gBAAgB,QAAQ,YAAY;AAQ7C;AAEA;;;;;;;;;AASA,OAAM,SAAUC,iCAAiCA,CAC7CC,IAAe,EACfC,MAAc,EACdC,SAAS,GAAGT,gBAAgB;EAE5B,MAAMU,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEJ,IAAI;IAAEK,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CAAC;EACnE,MAAMC,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACR,MAAM,EAAE,MAAM,CAAC;EACvC,MAAMS,+BAA+B,GAAGpB,MAAM,CAAkC,CAC5EC,EAAE,CAAC,aAAa,CAAC,EACjBF,IAAI,CAACkB,GAAG,CAACI,MAAM,EAAE,QAAQ,CAAC,CAC7B,CAAC;EAEF,MAAMC,IAAI,GAAGJ,MAAM,CAACK,KAAK,CAACH,+BAA+B,CAACI,IAAI,CAAC;EAC/DJ,+BAA+B,CAACK,MAAM,CAClC;IACIC,WAAW,EAAElB,gBAAgB,CAACmB,gBAAgB;IAC9ChB,MAAM,EAAEM;GACX,EACDK,IAAI,CACP;EAED,OAAO,IAAIpB,sBAAsB,CAAC;IAAEW,IAAI;IAAED,SAAS;IAAEU;EAAI,CAAE,CAAC;AAChE;AAcA;;;;;;;;AAQA,OAAM,SAAUM,iCAAiCA,CAC7CF,WAAmC,EACnCd,SAAS,GAAGT,gBAAgB;EAE5B,IAAI,CAACuB,WAAW,CAACd,SAAS,CAACiB,MAAM,CAACjB,SAAS,CAAC,EAAE,MAAM,IAAIN,mCAAmC,EAAE;EAC7F,MAAMc,+BAA+B,GAAGpB,MAAM,CAAkC,CAC5EC,EAAE,CAAC,aAAa,CAAC,EACjBF,IAAI,CAAC2B,WAAW,CAACJ,IAAI,CAACD,MAAM,GAAG,CAAC,EAAE,QAAQ,CAAC,CAC9C,CAAC;EACF,IAAIK,WAAW,CAACJ,IAAI,CAACD,MAAM,KAAKD,+BAA+B,CAACI,IAAI,EAAE,MAAM,IAAIpB,gCAAgC,EAAE;EAElH,MAAM;IACFS,IAAI,EAAE;MAAEH;IAAI,CAAE;IACdY;EAAI,CACP,GAAGQ,0CAA0C,CAACJ,WAAW,CAAC;EAC3D,IAAIJ,IAAI,CAACI,WAAW,KAAKlB,gBAAgB,CAACmB,gBAAgB,EAAE,MAAM,IAAIpB,gCAAgC,EAAE;EACxG,IAAI,CAACG,IAAI,EAAE,MAAM,IAAIL,gCAAgC,EAAE;EAEvD,OAAO;IACHO,SAAS;IACTC,IAAI,EAAE;MACFH;KACH;IACDY;GACH;AACL;AAcA;;;;;;;AAOA,OAAM,SAAUQ,0CAA0CA,CAAC;EACvDlB,SAAS;EACTC,IAAI,EAAE,CAACH,IAAI,CAAC;EACZY;AAAI,CACiB;EACrB,MAAMF,+BAA+B,GAAGpB,MAAM,CAAkC,CAC5EC,EAAE,CAAC,aAAa,CAAC,EACjBF,IAAI,CAACuB,IAAI,CAACD,MAAM,GAAG,CAAC,EAAE,QAAQ,CAAC,CAClC,CAAC;EACF,OAAO;IACHT,SAAS;IACTC,IAAI,EAAE;MACFH;KACH;IACDY,IAAI,EAAEF,+BAA+B,CAACW,MAAM,CAACT,IAAI;GACpD;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
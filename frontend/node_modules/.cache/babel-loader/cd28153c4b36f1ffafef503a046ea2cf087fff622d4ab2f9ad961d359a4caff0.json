{"ast":null,"code":"import { blob, greedy, seq, struct, u32, u8 } from '@solana/buffer-layout';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { TokenTransferHookAccountNotFound } from '../../errors.js';\nimport { unpackSeeds } from './seeds.js';\n/** Buffer layout for de/serializing a transfer hook extension */\nexport const TransferHookLayout = struct([publicKey('authority'), publicKey('programId')]);\nexport const TRANSFER_HOOK_SIZE = TransferHookLayout.span;\nexport function getTransferHook(mint) {\n  const extensionData = getExtensionData(ExtensionType.TransferHook, mint.tlvData);\n  if (extensionData !== null) {\n    return TransferHookLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}\n/** Buffer layout for de/serializing a transfer hook account extension */\nexport const TransferHookAccountLayout = struct([bool('transferring')]);\nexport const TRANSFER_HOOK_ACCOUNT_SIZE = TransferHookAccountLayout.span;\nexport function getTransferHookAccount(account) {\n  const extensionData = getExtensionData(ExtensionType.TransferHookAccount, account.tlvData);\n  if (extensionData !== null) {\n    return TransferHookAccountLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}\nexport function getExtraAccountMetaAddress(mint, programId) {\n  const seeds = [Buffer.from('extra-account-metas'), mint.toBuffer()];\n  return PublicKey.findProgramAddressSync(seeds, programId)[0];\n}\n/** Buffer layout for de/serializing an ExtraAccountMeta */\nexport const ExtraAccountMetaLayout = struct([u8('discriminator'), blob(32, 'addressConfig'), bool('isSigner'), bool('isWritable')]);\n/** Buffer layout for de/serializing a list of ExtraAccountMeta prefixed by a u32 length */\nexport const ExtraAccountMetaListLayout = struct([u32('count'), seq(ExtraAccountMetaLayout, greedy(ExtraAccountMetaLayout.span), 'extraAccounts')]);\n/** Buffer layout for de/serializing an ExtraAccountMetaAccountData */\nexport const ExtraAccountMetaAccountDataLayout = struct([u64('instructionDiscriminator'), u32('length'), ExtraAccountMetaListLayout.replicate('extraAccountsList')]);\n/** Unpack an extra account metas account and parse the data into a list of ExtraAccountMetas */\nexport function getExtraAccountMetas(account) {\n  const extraAccountsList = ExtraAccountMetaAccountDataLayout.decode(account.data).extraAccountsList;\n  return extraAccountsList.extraAccounts.slice(0, extraAccountsList.count);\n}\n/** Take an ExtraAccountMeta and construct that into an actual AccountMeta */\nexport async function resolveExtraAccountMeta(connection, extraMeta, previousMetas, instructionData, transferHookProgramId) {\n  if (extraMeta.discriminator === 0) {\n    return {\n      pubkey: new PublicKey(extraMeta.addressConfig),\n      isSigner: extraMeta.isSigner,\n      isWritable: extraMeta.isWritable\n    };\n  }\n  let programId = PublicKey.default;\n  if (extraMeta.discriminator === 1) {\n    programId = transferHookProgramId;\n  } else {\n    const accountIndex = extraMeta.discriminator - (1 << 7);\n    if (previousMetas.length <= accountIndex) {\n      throw new TokenTransferHookAccountNotFound();\n    }\n    programId = previousMetas[accountIndex].pubkey;\n  }\n  const seeds = await unpackSeeds(extraMeta.addressConfig, previousMetas, instructionData, connection);\n  const pubkey = PublicKey.findProgramAddressSync(seeds, programId)[0];\n  return {\n    pubkey,\n    isSigner: extraMeta.isSigner,\n    isWritable: extraMeta.isWritable\n  };\n}","map":{"version":3,"names":["blob","greedy","seq","struct","u32","u8","ExtensionType","getExtensionData","PublicKey","bool","publicKey","u64","TokenTransferHookAccountNotFound","unpackSeeds","TransferHookLayout","TRANSFER_HOOK_SIZE","span","getTransferHook","mint","extensionData","TransferHook","tlvData","decode","TransferHookAccountLayout","TRANSFER_HOOK_ACCOUNT_SIZE","getTransferHookAccount","account","TransferHookAccount","getExtraAccountMetaAddress","programId","seeds","Buffer","from","toBuffer","findProgramAddressSync","ExtraAccountMetaLayout","ExtraAccountMetaListLayout","ExtraAccountMetaAccountDataLayout","replicate","getExtraAccountMetas","extraAccountsList","data","extraAccounts","slice","count","resolveExtraAccountMeta","connection","extraMeta","previousMetas","instructionData","transferHookProgramId","discriminator","pubkey","addressConfig","isSigner","isWritable","default","accountIndex","length"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/extensions/transferHook/state.ts"],"sourcesContent":["import { blob, greedy, seq, struct, u32, u8 } from '@solana/buffer-layout';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nimport type { AccountInfo, AccountMeta, Connection } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { Account } from '../../state/account.js';\nimport { TokenTransferHookAccountNotFound } from '../../errors.js';\nimport { unpackSeeds } from './seeds.js';\n\n/** TransferHook as stored by the program */\nexport interface TransferHook {\n    /** The transfer hook update authority */\n    authority: PublicKey;\n    /** The transfer hook program account */\n    programId: PublicKey;\n}\n\n/** Buffer layout for de/serializing a transfer hook extension */\nexport const TransferHookLayout = struct<TransferHook>([publicKey('authority'), publicKey('programId')]);\n\nexport const TRANSFER_HOOK_SIZE = TransferHookLayout.span;\n\nexport function getTransferHook(mint: Mint): TransferHook | null {\n    const extensionData = getExtensionData(ExtensionType.TransferHook, mint.tlvData);\n    if (extensionData !== null) {\n        return TransferHookLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n\n/** TransferHookAccount as stored by the program */\nexport interface TransferHookAccount {\n    /**\n     * Whether or not this account is currently transferring tokens\n     * True during the transfer hook cpi, otherwise false\n     */\n    transferring: boolean;\n}\n\n/** Buffer layout for de/serializing a transfer hook account extension */\nexport const TransferHookAccountLayout = struct<TransferHookAccount>([bool('transferring')]);\n\nexport const TRANSFER_HOOK_ACCOUNT_SIZE = TransferHookAccountLayout.span;\n\nexport function getTransferHookAccount(account: Account): TransferHookAccount | null {\n    const extensionData = getExtensionData(ExtensionType.TransferHookAccount, account.tlvData);\n    if (extensionData !== null) {\n        return TransferHookAccountLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n\nexport function getExtraAccountMetaAddress(mint: PublicKey, programId: PublicKey): PublicKey {\n    const seeds = [Buffer.from('extra-account-metas'), mint.toBuffer()];\n    return PublicKey.findProgramAddressSync(seeds, programId)[0];\n}\n\n/** ExtraAccountMeta as stored by the transfer hook program */\nexport interface ExtraAccountMeta {\n    discriminator: number;\n    addressConfig: Uint8Array;\n    isSigner: boolean;\n    isWritable: boolean;\n}\n\n/** Buffer layout for de/serializing an ExtraAccountMeta */\nexport const ExtraAccountMetaLayout = struct<ExtraAccountMeta>([\n    u8('discriminator'),\n    blob(32, 'addressConfig'),\n    bool('isSigner'),\n    bool('isWritable'),\n]);\n\nexport interface ExtraAccountMetaList {\n    count: number;\n    extraAccounts: ExtraAccountMeta[];\n}\n\n/** Buffer layout for de/serializing a list of ExtraAccountMeta prefixed by a u32 length */\nexport const ExtraAccountMetaListLayout = struct<ExtraAccountMetaList>([\n    u32('count'),\n    seq<ExtraAccountMeta>(ExtraAccountMetaLayout, greedy(ExtraAccountMetaLayout.span), 'extraAccounts'),\n]);\n\n/** Buffer layout for de/serializing a list of ExtraAccountMetaAccountData prefixed by a u32 length */\nexport interface ExtraAccountMetaAccountData {\n    instructionDiscriminator: bigint;\n    length: number;\n    extraAccountsList: ExtraAccountMetaList;\n}\n\n/** Buffer layout for de/serializing an ExtraAccountMetaAccountData */\nexport const ExtraAccountMetaAccountDataLayout = struct<ExtraAccountMetaAccountData>([\n    u64('instructionDiscriminator'),\n    u32('length'),\n    ExtraAccountMetaListLayout.replicate('extraAccountsList'),\n]);\n\n/** Unpack an extra account metas account and parse the data into a list of ExtraAccountMetas */\nexport function getExtraAccountMetas(account: AccountInfo<Buffer>): ExtraAccountMeta[] {\n    const extraAccountsList = ExtraAccountMetaAccountDataLayout.decode(account.data).extraAccountsList;\n    return extraAccountsList.extraAccounts.slice(0, extraAccountsList.count);\n}\n\n/** Take an ExtraAccountMeta and construct that into an actual AccountMeta */\nexport async function resolveExtraAccountMeta(\n    connection: Connection,\n    extraMeta: ExtraAccountMeta,\n    previousMetas: AccountMeta[],\n    instructionData: Buffer,\n    transferHookProgramId: PublicKey,\n): Promise<AccountMeta> {\n    if (extraMeta.discriminator === 0) {\n        return {\n            pubkey: new PublicKey(extraMeta.addressConfig),\n            isSigner: extraMeta.isSigner,\n            isWritable: extraMeta.isWritable,\n        };\n    }\n\n    let programId = PublicKey.default;\n\n    if (extraMeta.discriminator === 1) {\n        programId = transferHookProgramId;\n    } else {\n        const accountIndex = extraMeta.discriminator - (1 << 7);\n        if (previousMetas.length <= accountIndex) {\n            throw new TokenTransferHookAccountNotFound();\n        }\n        programId = previousMetas[accountIndex].pubkey;\n    }\n\n    const seeds = await unpackSeeds(extraMeta.addressConfig, previousMetas, instructionData, connection);\n    const pubkey = PublicKey.findProgramAddressSync(seeds, programId)[0];\n\n    return { pubkey, isSigner: extraMeta.isSigner, isWritable: extraMeta.isWritable };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
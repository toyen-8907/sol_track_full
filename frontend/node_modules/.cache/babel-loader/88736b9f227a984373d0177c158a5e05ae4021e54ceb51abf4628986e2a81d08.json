{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\nimport { COptionPublicKeyLayout } from '../serialization.js';\n/** TODO: docs */\nexport const initializeMintCloseAuthorityInstructionData = struct([u8('instruction'), new COptionPublicKeyLayout('closeAuthority')]);\n/**\r\n * Construct an InitializeMintCloseAuthority instruction\r\n *\r\n * @param mint            Token mint account\r\n * @param closeAuthority  Optional authority that can close the mint\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createInitializeMintCloseAuthorityInstruction(mint, closeAuthority, programId) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(initializeMintCloseAuthorityInstructionData.span);\n  initializeMintCloseAuthorityInstructionData.encode({\n    instruction: TokenInstruction.InitializeMintCloseAuthority,\n    closeAuthority\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\r\n * Decode an InitializeMintCloseAuthority instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\nexport function decodeInitializeMintCloseAuthorityInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMintCloseAuthorityInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint\n    },\n    data\n  } = decodeInitializeMintCloseAuthorityInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeMintCloseAuthority) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data\n  };\n}\n/**\r\n * Decode an InitializeMintCloseAuthority instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\nexport function decodeInitializeMintCloseAuthorityInstructionUnchecked({\n  programId,\n  keys: [mint],\n  data\n}) {\n  const {\n    instruction,\n    closeAuthority\n  } = initializeMintCloseAuthorityInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data: {\n      instruction,\n      closeAuthority\n    }\n  };\n}","map":{"version":3,"names":["struct","u8","TransactionInstruction","programSupportsExtensions","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenUnsupportedInstructionError","TokenInstruction","COptionPublicKeyLayout","initializeMintCloseAuthorityInstructionData","createInitializeMintCloseAuthorityInstruction","mint","closeAuthority","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","InitializeMintCloseAuthority","decodeInitializeMintCloseAuthorityInstruction","equals","length","decodeInitializeMintCloseAuthorityInstructionUnchecked","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\initializeMintCloseAuthority.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\r\nimport { TransactionInstruction } from '@solana/web3.js';\r\nimport { programSupportsExtensions } from '../constants.js';\r\nimport {\r\n    TokenInvalidInstructionDataError,\r\n    TokenInvalidInstructionKeysError,\r\n    TokenInvalidInstructionProgramError,\r\n    TokenInvalidInstructionTypeError,\r\n    TokenUnsupportedInstructionError,\r\n} from '../errors.js';\r\nimport { TokenInstruction } from './types.js';\r\nimport { COptionPublicKeyLayout } from '../serialization.js';\r\n\r\n/** TODO: docs */\r\nexport interface InitializeMintCloseAuthorityInstructionData {\r\n    instruction: TokenInstruction.InitializeMintCloseAuthority;\r\n    closeAuthority: PublicKey | null;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const initializeMintCloseAuthorityInstructionData = struct<InitializeMintCloseAuthorityInstructionData>([\r\n    u8('instruction'),\r\n    new COptionPublicKeyLayout('closeAuthority'),\r\n]);\r\n\r\n/**\r\n * Construct an InitializeMintCloseAuthority instruction\r\n *\r\n * @param mint            Token mint account\r\n * @param closeAuthority  Optional authority that can close the mint\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createInitializeMintCloseAuthorityInstruction(\r\n    mint: PublicKey,\r\n    closeAuthority: PublicKey | null,\r\n    programId: PublicKey,\r\n): TransactionInstruction {\r\n    if (!programSupportsExtensions(programId)) {\r\n        throw new TokenUnsupportedInstructionError();\r\n    }\r\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\r\n\r\n    const data = Buffer.alloc(initializeMintCloseAuthorityInstructionData.span);\r\n    initializeMintCloseAuthorityInstructionData.encode(\r\n        {\r\n            instruction: TokenInstruction.InitializeMintCloseAuthority,\r\n            closeAuthority,\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\n/** A decoded, valid InitializeMintCloseAuthority instruction */\r\nexport interface DecodedInitializeMintCloseAuthorityInstruction {\r\n    programId: PublicKey;\r\n    keys: {\r\n        mint: AccountMeta;\r\n    };\r\n    data: {\r\n        instruction: TokenInstruction.InitializeMintCloseAuthority;\r\n        closeAuthority: PublicKey | null;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode an InitializeMintCloseAuthority instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\r\nexport function decodeInitializeMintCloseAuthorityInstruction(\r\n    instruction: TransactionInstruction,\r\n    programId: PublicKey,\r\n): DecodedInitializeMintCloseAuthorityInstruction {\r\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\r\n    if (instruction.data.length !== initializeMintCloseAuthorityInstructionData.span)\r\n        throw new TokenInvalidInstructionDataError();\r\n\r\n    const {\r\n        keys: { mint },\r\n        data,\r\n    } = decodeInitializeMintCloseAuthorityInstructionUnchecked(instruction);\r\n    if (data.instruction !== TokenInstruction.InitializeMintCloseAuthority)\r\n        throw new TokenInvalidInstructionTypeError();\r\n    if (!mint) throw new TokenInvalidInstructionKeysError();\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            mint,\r\n        },\r\n        data,\r\n    };\r\n}\r\n\r\n/** A decoded, non-validated InitializeMintCloseAuthority instruction */\r\nexport interface DecodedInitializeMintCloseAuthorityInstructionUnchecked {\r\n    programId: PublicKey;\r\n    keys: {\r\n        mint: AccountMeta | undefined;\r\n    };\r\n    data: {\r\n        instruction: number;\r\n        closeAuthority: PublicKey | null;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode an InitializeMintCloseAuthority instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\r\nexport function decodeInitializeMintCloseAuthorityInstructionUnchecked({\r\n    programId,\r\n    keys: [mint],\r\n    data,\r\n}: TransactionInstruction): DecodedInitializeMintCloseAuthorityInstructionUnchecked {\r\n    const { instruction, closeAuthority } = initializeMintCloseAuthorityInstructionData.decode(data);\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            mint,\r\n        },\r\n        data: {\r\n            instruction,\r\n            closeAuthority,\r\n        },\r\n    };\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,yBAAyB,QAAQ,iBAAiB;AAC3D,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,EAChCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,gBAAgB,QAAQ,YAAY;AAC7C,SAASC,sBAAsB,QAAQ,qBAAqB;AAQ5D;AACA,OAAO,MAAMC,2CAA2C,GAAGX,MAAM,CAA8C,CAC3GC,EAAE,CAAC,aAAa,CAAC,EACjB,IAAIS,sBAAsB,CAAC,gBAAgB,CAAC,CAC/C,CAAC;AAEF;;;;;;;;;AASA,OAAM,SAAUE,6CAA6CA,CACzDC,IAAe,EACfC,cAAgC,EAChCC,SAAoB;EAEpB,IAAI,CAACZ,yBAAyB,CAACY,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIP,gCAAgC,EAAE;EAChD;EACA,MAAMQ,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEJ,IAAI;IAAEK,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAElE,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACX,2CAA2C,CAACY,IAAI,CAAC;EAC3EZ,2CAA2C,CAACa,MAAM,CAC9C;IACIC,WAAW,EAAEhB,gBAAgB,CAACiB,4BAA4B;IAC1DZ;GACH,EACDM,IAAI,CACP;EAED,OAAO,IAAIlB,sBAAsB,CAAC;IAAEc,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAcA;;;;;;;;AAQA,OAAM,SAAUO,6CAA6CA,CACzDF,WAAmC,EACnCV,SAAoB;EAEpB,IAAI,CAACU,WAAW,CAACV,SAAS,CAACa,MAAM,CAACb,SAAS,CAAC,EAAE,MAAM,IAAIT,mCAAmC,EAAE;EAC7F,IAAImB,WAAW,CAACL,IAAI,CAACS,MAAM,KAAKlB,2CAA2C,CAACY,IAAI,EAC5E,MAAM,IAAInB,gCAAgC,EAAE;EAEhD,MAAM;IACFY,IAAI,EAAE;MAAEH;IAAI,CAAE;IACdO;EAAI,CACP,GAAGU,sDAAsD,CAACL,WAAW,CAAC;EACvE,IAAIL,IAAI,CAACK,WAAW,KAAKhB,gBAAgB,CAACiB,4BAA4B,EAClE,MAAM,IAAInB,gCAAgC,EAAE;EAChD,IAAI,CAACM,IAAI,EAAE,MAAM,IAAIR,gCAAgC,EAAE;EAEvD,OAAO;IACHU,SAAS;IACTC,IAAI,EAAE;MACFH;KACH;IACDO;GACH;AACL;AAcA;;;;;;;AAOA,OAAM,SAAUU,sDAAsDA,CAAC;EACnEf,SAAS;EACTC,IAAI,EAAE,CAACH,IAAI,CAAC;EACZO;AAAI,CACiB;EACrB,MAAM;IAAEK,WAAW;IAAEX;EAAc,CAAE,GAAGH,2CAA2C,CAACoB,MAAM,CAACX,IAAI,CAAC;EAEhG,OAAO;IACHL,SAAS;IACTC,IAAI,EAAE;MACFH;KACH;IACDO,IAAI,EAAE;MACFK,WAAW;MACXX;;GAEP;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
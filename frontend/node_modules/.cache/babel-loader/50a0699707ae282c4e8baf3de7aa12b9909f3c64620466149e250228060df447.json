{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createTransferInstruction } from '../instructions/transfer.js';\nimport { getSigners } from './internal.js';\n/**\r\n * Transfer tokens from one account to another\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param source         Source account\r\n * @param destination    Destination account\r\n * @param owner          Owner of the source account\r\n * @param amount         Number of tokens to transfer\r\n * @param multiSigners   Signing accounts if `owner` is a multisig\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\nexport async function transfer(connection, payer, source, destination, owner, amount, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createTransferInstruction(source, destination, ownerPublicKey, amount, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createTransferInstruction","getSigners","transfer","connection","payer","source","destination","owner","amount","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\actions\\transfer.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\r\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport { createTransferInstruction } from '../instructions/transfer.js';\r\nimport { getSigners } from './internal.js';\r\n\r\n/**\r\n * Transfer tokens from one account to another\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param source         Source account\r\n * @param destination    Destination account\r\n * @param owner          Owner of the source account\r\n * @param amount         Number of tokens to transfer\r\n * @param multiSigners   Signing accounts if `owner` is a multisig\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\r\nexport async function transfer(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    source: PublicKey,\r\n    destination: PublicKey,\r\n    owner: Signer | PublicKey,\r\n    amount: number | bigint,\r\n    multiSigners: Signer[] = [],\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): Promise<TransactionSignature> {\r\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\r\n\r\n    const transaction = new Transaction().add(\r\n        createTransferInstruction(source, destination, ownerPublicKey, amount, multiSigners, programId),\r\n    );\r\n\r\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\r\n}\r\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,yBAAyB,QAAQ,6BAA6B;AACvE,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;;;;;;;;;;;;AAeA,OAAO,eAAeC,QAAQA,CAC1BC,UAAsB,EACtBC,KAAa,EACbC,MAAiB,EACjBC,WAAsB,EACtBC,KAAyB,EACzBC,MAAuB,EACvBC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGZ,gBAAgB;EAE5B,MAAM,CAACa,cAAc,EAAEC,OAAO,CAAC,GAAGZ,UAAU,CAACM,KAAK,EAAEE,YAAY,CAAC;EAEjE,MAAMK,WAAW,GAAG,IAAIhB,WAAW,EAAE,CAACiB,GAAG,CACrCf,yBAAyB,CAACK,MAAM,EAAEC,WAAW,EAAEM,cAAc,EAAEJ,MAAM,EAAEC,YAAY,EAAEE,SAAS,CAAC,CAClG;EAED,OAAO,MAAMd,yBAAyB,CAACM,UAAU,EAAEW,WAAW,EAAE,CAACV,KAAK,EAAE,GAAGS,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountIdempotentInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n/**\n * Create and initialize a new associated token account\n * The instruction will succeed even if the associated token account already exists\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new or existing associated token account\n */\nexport async function createAssociatedTokenAccountIdempotent(connection, payer, mint, owner, confirmOptions, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n  const associatedToken = getAssociatedTokenAddressSync(mint, owner, false, programId, associatedTokenProgramId);\n  const transaction = new Transaction().add(createAssociatedTokenAccountIdempotentInstruction(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n  await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n  return associatedToken;\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","createAssociatedTokenAccountIdempotentInstruction","getAssociatedTokenAddressSync","createAssociatedTokenAccountIdempotent","connection","payer","mint","owner","confirmOptions","programId","associatedTokenProgramId","associatedToken","transaction","add","publicKey"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/actions/createAssociatedTokenAccountIdempotent.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountIdempotentInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n\n/**\n * Create and initialize a new associated token account\n * The instruction will succeed even if the associated token account already exists\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new or existing associated token account\n */\nexport async function createAssociatedTokenAccountIdempotent(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): Promise<PublicKey> {\n    const associatedToken = getAssociatedTokenAddressSync(mint, owner, false, programId, associatedTokenProgramId);\n\n    const transaction = new Transaction().add(\n        createAssociatedTokenAccountIdempotentInstruction(\n            payer.publicKey,\n            associatedToken,\n            owner,\n            mint,\n            programId,\n            associatedTokenProgramId,\n        ),\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n    return associatedToken;\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,2BAA2B,EAAEC,gBAAgB,QAAQ,iBAAiB;AAC/E,SAASC,iDAAiD,QAAQ,2CAA2C;AAC7G,SAASC,6BAA6B,QAAQ,kBAAkB;AAEhE;;;;;;;;;;;;;;AAcA,OAAO,eAAeC,sCAAsCA,CACxDC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAgB,EAChBC,cAA+B,EAC/BC,SAAS,GAAGT,gBAAgB,EAC5BU,wBAAwB,GAAGX,2BAA2B;EAEtD,MAAMY,eAAe,GAAGT,6BAA6B,CAACI,IAAI,EAAEC,KAAK,EAAE,KAAK,EAAEE,SAAS,EAAEC,wBAAwB,CAAC;EAE9G,MAAME,WAAW,GAAG,IAAId,WAAW,EAAE,CAACe,GAAG,CACrCZ,iDAAiD,CAC7CI,KAAK,CAACS,SAAS,EACfH,eAAe,EACfJ,KAAK,EACLD,IAAI,EACJG,SAAS,EACTC,wBAAwB,CAC3B,CACJ;EAED,MAAMb,yBAAyB,CAACO,UAAU,EAAEQ,WAAW,EAAE,CAACP,KAAK,CAAC,EAAEG,cAAc,CAAC;EAEjF,OAAOG,eAAe;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
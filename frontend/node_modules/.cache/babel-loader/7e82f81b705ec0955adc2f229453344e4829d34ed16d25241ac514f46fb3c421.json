{"ast":null,"code":"import { PublicKey } from '@solana/web3.js';\nimport { unpackTokenGroup, unpackTokenGroupMember } from '@solana/spl-token-group';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nexport { TOKEN_GROUP_SIZE, TOKEN_GROUP_MEMBER_SIZE } from '@solana/spl-token-group';\nexport function getTokenGroupState(mint) {\n  const extensionData = getExtensionData(ExtensionType.TokenGroup, mint.tlvData);\n  if (extensionData !== null) {\n    const {\n      updateAuthority,\n      mint,\n      size,\n      maxSize\n    } = unpackTokenGroup(extensionData);\n    // Explicitly set None/Zero keys to null\n    return {\n      updateAuthority: updateAuthority?.equals(PublicKey.default) ? undefined : updateAuthority,\n      mint,\n      size,\n      maxSize\n    };\n  } else {\n    return null;\n  }\n}\nexport function getTokenGroupMemberState(mint) {\n  const extensionData = getExtensionData(ExtensionType.TokenGroupMember, mint.tlvData);\n  if (extensionData !== null) {\n    const {\n      mint,\n      group,\n      memberNumber\n    } = unpackTokenGroupMember(extensionData);\n    return {\n      mint,\n      group,\n      memberNumber\n    };\n  } else {\n    return null;\n  }\n}","map":{"version":3,"names":["PublicKey","unpackTokenGroup","unpackTokenGroupMember","ExtensionType","getExtensionData","TOKEN_GROUP_SIZE","TOKEN_GROUP_MEMBER_SIZE","getTokenGroupState","mint","extensionData","TokenGroup","tlvData","updateAuthority","size","maxSize","equals","default","undefined","getTokenGroupMemberState","TokenGroupMember","group","memberNumber"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/extensions/tokenGroup/state.ts"],"sourcesContent":["import { struct, u32 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport {\n    unpackTokenGroup,\n    unpackTokenGroupMember,\n    type TokenGroup,\n    type TokenGroupMember,\n} from '@solana/spl-token-group';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\nexport { TOKEN_GROUP_SIZE, TOKEN_GROUP_MEMBER_SIZE } from '@solana/spl-token-group';\n\nexport function getTokenGroupState(mint: Mint): Partial<TokenGroup> | null {\n    const extensionData = getExtensionData(ExtensionType.TokenGroup, mint.tlvData);\n    if (extensionData !== null) {\n        const { updateAuthority, mint, size, maxSize } = unpackTokenGroup(extensionData);\n\n        // Explicitly set None/Zero keys to null\n        return {\n            updateAuthority: updateAuthority?.equals(PublicKey.default) ? undefined : updateAuthority,\n            mint,\n            size,\n            maxSize,\n        };\n    } else {\n        return null;\n    }\n}\n\nexport function getTokenGroupMemberState(mint: Mint): Partial<TokenGroupMember> | null {\n    const extensionData = getExtensionData(ExtensionType.TokenGroupMember, mint.tlvData);\n    if (extensionData !== null) {\n        const { mint, group, memberNumber } = unpackTokenGroupMember(extensionData);\n\n        return {\n            mint,\n            group,\n            memberNumber,\n        };\n    } else {\n        return null;\n    }\n}\n"],"mappings":"AAEA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SACIC,gBAAgB,EAChBC,sBAAsB,QAGnB,yBAAyB;AAEhC,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,qBAAqB;AAErE,SAASC,gBAAgB,EAAEC,uBAAuB,QAAQ,yBAAyB;AAEnF,OAAM,SAAUC,kBAAkBA,CAACC,IAAU;EACzC,MAAMC,aAAa,GAAGL,gBAAgB,CAACD,aAAa,CAACO,UAAU,EAAEF,IAAI,CAACG,OAAO,CAAC;EAC9E,IAAIF,aAAa,KAAK,IAAI,EAAE;IACxB,MAAM;MAAEG,eAAe;MAAEJ,IAAI;MAAEK,IAAI;MAAEC;IAAO,CAAE,GAAGb,gBAAgB,CAACQ,aAAa,CAAC;IAEhF;IACA,OAAO;MACHG,eAAe,EAAEA,eAAe,EAAEG,MAAM,CAACf,SAAS,CAACgB,OAAO,CAAC,GAAGC,SAAS,GAAGL,eAAe;MACzFJ,IAAI;MACJK,IAAI;MACJC;KACH;EACL,CAAC,MAAM;IACH,OAAO,IAAI;EACf;AACJ;AAEA,OAAM,SAAUI,wBAAwBA,CAACV,IAAU;EAC/C,MAAMC,aAAa,GAAGL,gBAAgB,CAACD,aAAa,CAACgB,gBAAgB,EAAEX,IAAI,CAACG,OAAO,CAAC;EACpF,IAAIF,aAAa,KAAK,IAAI,EAAE;IACxB,MAAM;MAAED,IAAI;MAAEY,KAAK;MAAEC;IAAY,CAAE,GAAGnB,sBAAsB,CAACO,aAAa,CAAC;IAE3E,OAAO;MACHD,IAAI;MACJY,KAAK;MACLC;KACH;EACL,CAAC,MAAM;IACH,OAAO,IAAI;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
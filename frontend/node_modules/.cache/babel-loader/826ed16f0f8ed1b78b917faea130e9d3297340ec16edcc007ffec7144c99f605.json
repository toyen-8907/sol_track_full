{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const amountToUiAmountInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\r\n * Construct a AmountToUiAmount instruction\r\n *\r\n * @param mint         Public key of the mint\r\n * @param amount       Amount of tokens to be converted to UiAmount\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createAmountToUiAmountInstruction(mint, amount, programId = TOKEN_PROGRAM_ID) {\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(amountToUiAmountInstructionData.span);\n  amountToUiAmountInstructionData.encode({\n    instruction: TokenInstruction.AmountToUiAmount,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\r\n * Decode a AmountToUiAmount instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\nexport function decodeAmountToUiAmountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== amountToUiAmountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint\n    },\n    data\n  } = decodeAmountToUiAmountInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.AmountToUiAmount) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data\n  };\n}\n/**\r\n * Decode a AmountToUiAmount instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\nexport function decodeAmountToUiAmountInstructionUnchecked({\n  programId,\n  keys: [mint],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data: amountToUiAmountInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","amountToUiAmountInstructionData","createAmountToUiAmountInstruction","mint","amount","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","AmountToUiAmount","BigInt","decodeAmountToUiAmountInstruction","equals","length","decodeAmountToUiAmountInstructionUnchecked","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\amountToUiAmount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport { u64 } from '@solana/buffer-layout-utils';\r\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\r\nimport { TransactionInstruction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport {\r\n    TokenInvalidInstructionDataError,\r\n    TokenInvalidInstructionKeysError,\r\n    TokenInvalidInstructionProgramError,\r\n    TokenInvalidInstructionTypeError,\r\n} from '../errors.js';\r\nimport { TokenInstruction } from './types.js';\r\n\r\n/** TODO: docs */\r\nexport interface AmountToUiAmountInstructionData {\r\n    instruction: TokenInstruction.AmountToUiAmount;\r\n    amount: bigint;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const amountToUiAmountInstructionData = struct<AmountToUiAmountInstructionData>([\r\n    u8('instruction'),\r\n    u64('amount'),\r\n]);\r\n\r\n/**\r\n * Construct a AmountToUiAmount instruction\r\n *\r\n * @param mint         Public key of the mint\r\n * @param amount       Amount of tokens to be converted to UiAmount\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createAmountToUiAmountInstruction(\r\n    mint: PublicKey,\r\n    amount: number | bigint,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];\r\n\r\n    const data = Buffer.alloc(amountToUiAmountInstructionData.span);\r\n    amountToUiAmountInstructionData.encode(\r\n        {\r\n            instruction: TokenInstruction.AmountToUiAmount,\r\n            amount: BigInt(amount),\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\n/** A decoded, valid AmountToUiAmount instruction */\r\nexport interface DecodedAmountToUiAmountInstruction {\r\n    programId: PublicKey;\r\n    keys: {\r\n        mint: AccountMeta;\r\n    };\r\n    data: {\r\n        instruction: TokenInstruction.AmountToUiAmount;\r\n        amount: bigint;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a AmountToUiAmount instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\r\nexport function decodeAmountToUiAmountInstruction(\r\n    instruction: TransactionInstruction,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): DecodedAmountToUiAmountInstruction {\r\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\r\n    if (instruction.data.length !== amountToUiAmountInstructionData.span) throw new TokenInvalidInstructionDataError();\r\n\r\n    const {\r\n        keys: { mint },\r\n        data,\r\n    } = decodeAmountToUiAmountInstructionUnchecked(instruction);\r\n    if (data.instruction !== TokenInstruction.AmountToUiAmount) throw new TokenInvalidInstructionTypeError();\r\n    if (!mint) throw new TokenInvalidInstructionKeysError();\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            mint,\r\n        },\r\n        data,\r\n    };\r\n}\r\n\r\n/** A decoded, non-validated AmountToUiAmount instruction */\r\nexport interface DecodedAmountToUiAmountInstructionUnchecked {\r\n    programId: PublicKey;\r\n    keys: {\r\n        mint: AccountMeta | undefined;\r\n    };\r\n    data: {\r\n        instruction: number;\r\n        amount: bigint;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a AmountToUiAmount instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\r\nexport function decodeAmountToUiAmountInstructionUnchecked({\r\n    programId,\r\n    keys: [mint],\r\n    data,\r\n}: TransactionInstruction): DecodedAmountToUiAmountInstructionUnchecked {\r\n    return {\r\n        programId,\r\n        keys: {\r\n            mint,\r\n        },\r\n        data: amountToUiAmountInstructionData.decode(data),\r\n    };\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAClD,SAASC,GAAG,QAAQ,6BAA6B;AAEjD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,gBAAgB,QAAQ,YAAY;AAQ7C;AACA,OAAO,MAAMC,+BAA+B,GAAGV,MAAM,CAAkC,CACnFC,EAAE,CAAC,aAAa,CAAC,EACjBC,GAAG,CAAC,QAAQ,CAAC,CAChB,CAAC;AAEF;;;;;;;;;AASA,OAAM,SAAUS,iCAAiCA,CAC7CC,IAAe,EACfC,MAAuB,EACvBC,SAAS,GAAGV,gBAAgB;EAE5B,MAAMW,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEJ,IAAI;IAAEK,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CAAC;EAEnE,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACX,+BAA+B,CAACY,IAAI,CAAC;EAC/DZ,+BAA+B,CAACa,MAAM,CAClC;IACIC,WAAW,EAAEf,gBAAgB,CAACgB,gBAAgB;IAC9CZ,MAAM,EAAEa,MAAM,CAACb,MAAM;GACxB,EACDM,IAAI,CACP;EAED,OAAO,IAAIhB,sBAAsB,CAAC;IAAEY,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAcA;;;;;;;;AAQA,OAAM,SAAUQ,iCAAiCA,CAC7CH,WAAmC,EACnCV,SAAS,GAAGV,gBAAgB;EAE5B,IAAI,CAACoB,WAAW,CAACV,SAAS,CAACc,MAAM,CAACd,SAAS,CAAC,EAAE,MAAM,IAAIP,mCAAmC,EAAE;EAC7F,IAAIiB,WAAW,CAACL,IAAI,CAACU,MAAM,KAAKnB,+BAA+B,CAACY,IAAI,EAAE,MAAM,IAAIjB,gCAAgC,EAAE;EAElH,MAAM;IACFU,IAAI,EAAE;MAAEH;IAAI,CAAE;IACdO;EAAI,CACP,GAAGW,0CAA0C,CAACN,WAAW,CAAC;EAC3D,IAAIL,IAAI,CAACK,WAAW,KAAKf,gBAAgB,CAACgB,gBAAgB,EAAE,MAAM,IAAIjB,gCAAgC,EAAE;EACxG,IAAI,CAACI,IAAI,EAAE,MAAM,IAAIN,gCAAgC,EAAE;EAEvD,OAAO;IACHQ,SAAS;IACTC,IAAI,EAAE;MACFH;KACH;IACDO;GACH;AACL;AAcA;;;;;;;AAOA,OAAM,SAAUW,0CAA0CA,CAAC;EACvDhB,SAAS;EACTC,IAAI,EAAE,CAACH,IAAI,CAAC;EACZO;AAAI,CACiB;EACrB,OAAO;IACHL,SAAS;IACTC,IAAI,EAAE;MACFH;KACH;IACDO,IAAI,EAAET,+BAA+B,CAACqB,MAAM,CAACZ,IAAI;GACpD;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
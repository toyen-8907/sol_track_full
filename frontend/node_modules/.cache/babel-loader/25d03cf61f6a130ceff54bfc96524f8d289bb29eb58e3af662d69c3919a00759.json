{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeTransferHookInstruction, createTransferCheckedWithFeeAndTransferHookInstruction, createTransferCheckedWithTransferHookInstruction, createUpdateTransferHookInstruction } from './instructions.js';\n/**\n * Initialize a transfer hook on a mint\n *\n * @param connection            Connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  Mint to initialize with extension\n * @param authority             Transfer hook authority account\n * @param transferHookProgramId The transfer hook program account\n * @param confirmOptions        Options for confirming the transaction\n * @param programId             SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function initializeTransferHook(connection, payer, mint, authority, transferHookProgramId, confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const transaction = new Transaction().add(createInitializeTransferHookInstruction(mint, authority, transferHookProgramId, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n/**\n * Update the transfer hook program on a mint\n *\n * @param connection            Connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  Mint to modify\n * @param transferHookProgramId New transfer hook program account\n * @param authority             Transfer hook update authority\n * @param multiSigners          Signing accounts if `freezeAuthority` is a multisig\n * @param confirmOptions        Options for confirming the transaction\n * @param programId             SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateTransferHook(connection, payer, mint, transferHookProgramId, authority, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createUpdateTransferHookInstruction(mint, authorityPublicKey, transferHookProgramId, signers, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Transfer tokens from one account to another, asserting the token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param authority      Authority of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithTransferHook(connection, payer, source, mint, destination, authority, amount, decimals, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(await createTransferCheckedWithTransferHookInstruction(connection, source, mint, destination, authorityPublicKey, amount, decimals, signers, confirmOptions?.commitment, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param authority      Authority of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param fee            The calculated fee for the transfer fee extension\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithFeeAndTransferHook(connection, payer, source, mint, destination, authority, amount, decimals, fee, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(await createTransferCheckedWithFeeAndTransferHookInstruction(connection, source, mint, destination, authorityPublicKey, amount, decimals, fee, signers, confirmOptions?.commitment, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","getSigners","TOKEN_2022_PROGRAM_ID","TOKEN_PROGRAM_ID","createInitializeTransferHookInstruction","createTransferCheckedWithFeeAndTransferHookInstruction","createTransferCheckedWithTransferHookInstruction","createUpdateTransferHookInstruction","initializeTransferHook","connection","payer","mint","authority","transferHookProgramId","confirmOptions","programId","transaction","add","updateTransferHook","multiSigners","authorityPublicKey","signers","transferCheckedWithTransferHook","source","destination","amount","decimals","commitment","transferCheckedWithFeeAndTransferHook","fee"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/extensions/transferHook/actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, Signer, TransactionSignature } from '@solana/web3.js';\nimport type { PublicKey } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../../constants.js';\nimport {\n    createInitializeTransferHookInstruction,\n    createTransferCheckedWithFeeAndTransferHookInstruction,\n    createTransferCheckedWithTransferHookInstruction,\n    createUpdateTransferHookInstruction,\n} from './instructions.js';\n\n/**\n * Initialize a transfer hook on a mint\n *\n * @param connection            Connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  Mint to initialize with extension\n * @param authority             Transfer hook authority account\n * @param transferHookProgramId The transfer hook program account\n * @param confirmOptions        Options for confirming the transaction\n * @param programId             SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function initializeTransferHook(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    authority: PublicKey,\n    transferHookProgramId: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID,\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(\n        createInitializeTransferHookInstruction(mint, authority, transferHookProgramId, programId),\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n\n/**\n * Update the transfer hook program on a mint\n *\n * @param connection            Connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  Mint to modify\n * @param transferHookProgramId New transfer hook program account\n * @param authority             Transfer hook update authority\n * @param multiSigners          Signing accounts if `freezeAuthority` is a multisig\n * @param confirmOptions        Options for confirming the transaction\n * @param programId             SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateTransferHook(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    transferHookProgramId: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID,\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createUpdateTransferHookInstruction(mint, authorityPublicKey, transferHookProgramId, signers, programId),\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Transfer tokens from one account to another, asserting the token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param authority      Authority of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithTransferHook(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    amount: bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        await createTransferCheckedWithTransferHookInstruction(\n            connection,\n            source,\n            mint,\n            destination,\n            authorityPublicKey,\n            amount,\n            decimals,\n            signers,\n            confirmOptions?.commitment,\n            programId,\n        ),\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param authority      Authority of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param fee            The calculated fee for the transfer fee extension\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithFeeAndTransferHook(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    amount: bigint,\n    decimals: number,\n    fee: bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        await createTransferCheckedWithFeeAndTransferHookInstruction(\n            connection,\n            source,\n            mint,\n            destination,\n            authorityPublicKey,\n            amount,\n            decimals,\n            fee,\n            signers,\n            confirmOptions?.commitment,\n            programId,\n        ),\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID, programSupportsExtensions } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { addSigners } from '../../instructions/internal.js';\nexport var MetadataPointerInstruction;\n(function (MetadataPointerInstruction) {\n  MetadataPointerInstruction[MetadataPointerInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  MetadataPointerInstruction[MetadataPointerInstruction[\"Update\"] = 1] = \"Update\";\n})(MetadataPointerInstruction || (MetadataPointerInstruction = {}));\nexport const initializeMetadataPointerData = struct([\n// prettier-ignore\nu8('instruction'), u8('metadataPointerInstruction'), publicKey('authority'), publicKey('metadataAddress')]);\n/**\n * Construct an Initialize MetadataPointer instruction\n *\n * @param mint            Token mint account\n * @param authority       Optional Authority that can set the metadata address\n * @param metadataAddress Optional Account address that holds the metadata\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMetadataPointerInstruction(mint, authority, metadataAddress, programId) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(initializeMetadataPointerData.span);\n  initializeMetadataPointerData.encode({\n    instruction: TokenInstruction.MetadataPointerExtension,\n    metadataPointerInstruction: MetadataPointerInstruction.Initialize,\n    authority: authority ?? PublicKey.default,\n    metadataAddress: metadataAddress ?? PublicKey.default\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: data\n  });\n}\nexport const updateMetadataPointerData = struct([\n// prettier-ignore\nu8('instruction'), u8('metadataPointerInstruction'), publicKey('metadataAddress')]);\nexport function createUpdateMetadataPointerInstruction(mint, authority, metadataAddress, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(updateMetadataPointerData.span);\n  updateMetadataPointerData.encode({\n    instruction: TokenInstruction.MetadataPointerExtension,\n    metadataPointerInstruction: MetadataPointerInstruction.Update,\n    metadataAddress: metadataAddress ?? PublicKey.default\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: data\n  });\n}","map":{"version":3,"names":["struct","u8","publicKey","PublicKey","TransactionInstruction","TOKEN_2022_PROGRAM_ID","programSupportsExtensions","TokenUnsupportedInstructionError","TokenInstruction","addSigners","MetadataPointerInstruction","initializeMetadataPointerData","createInitializeMetadataPointerInstruction","mint","authority","metadataAddress","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","MetadataPointerExtension","metadataPointerInstruction","Initialize","default","updateMetadataPointerData","createUpdateMetadataPointerInstruction","multiSigners","Update"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/extensions/metadataPointer/instructions.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { Signer } from '@solana/web3.js';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID, programSupportsExtensions } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { addSigners } from '../../instructions/internal.js';\n\nexport enum MetadataPointerInstruction {\n    Initialize = 0,\n    Update = 1,\n}\n\nexport const initializeMetadataPointerData = struct<{\n    instruction: TokenInstruction.MetadataPointerExtension;\n    metadataPointerInstruction: number;\n    authority: PublicKey;\n    metadataAddress: PublicKey;\n}>([\n    // prettier-ignore\n    u8('instruction'),\n    u8('metadataPointerInstruction'),\n    publicKey('authority'),\n    publicKey('metadataAddress'),\n]);\n\n/**\n * Construct an Initialize MetadataPointer instruction\n *\n * @param mint            Token mint account\n * @param authority       Optional Authority that can set the metadata address\n * @param metadataAddress Optional Account address that holds the metadata\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMetadataPointerInstruction(\n    mint: PublicKey,\n    authority: PublicKey | null,\n    metadataAddress: PublicKey | null,\n    programId: PublicKey,\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeMetadataPointerData.span);\n    initializeMetadataPointerData.encode(\n        {\n            instruction: TokenInstruction.MetadataPointerExtension,\n            metadataPointerInstruction: MetadataPointerInstruction.Initialize,\n            authority: authority ?? PublicKey.default,\n            metadataAddress: metadataAddress ?? PublicKey.default,\n        },\n        data,\n    );\n\n    return new TransactionInstruction({ keys, programId, data: data });\n}\n\nexport const updateMetadataPointerData = struct<{\n    instruction: TokenInstruction.MetadataPointerExtension;\n    metadataPointerInstruction: number;\n    metadataAddress: PublicKey;\n}>([\n    // prettier-ignore\n    u8('instruction'),\n    u8('metadataPointerInstruction'),\n    publicKey('metadataAddress'),\n]);\n\nexport function createUpdateMetadataPointerInstruction(\n    mint: PublicKey,\n    authority: PublicKey,\n    metadataAddress: PublicKey | null,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId: PublicKey = TOKEN_2022_PROGRAM_ID,\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], authority, multiSigners);\n\n    const data = Buffer.alloc(updateMetadataPointerData.span);\n    updateMetadataPointerData.encode(\n        {\n            instruction: TokenInstruction.MetadataPointerExtension,\n            metadataPointerInstruction: MetadataPointerInstruction.Update,\n            metadataAddress: metadataAddress ?? PublicKey.default,\n        },\n        data,\n    );\n\n    return new TransactionInstruction({ keys, programId, data: data });\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAClD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,SAASC,SAAS,EAAEC,sBAAsB,QAAQ,iBAAiB;AACnE,SAASC,qBAAqB,EAAEC,yBAAyB,QAAQ,oBAAoB;AACrF,SAASC,gCAAgC,QAAQ,iBAAiB;AAClE,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,UAAU,QAAQ,gCAAgC;AAE3D,WAAYC,0BAGX;AAHD,WAAYA,0BAA0B;EAClCA,0BAAA,CAAAA,0BAAA,kCAAc;EACdA,0BAAA,CAAAA,0BAAA,0BAAU;AACd,CAAC,EAHWA,0BAA0B,KAA1BA,0BAA0B;AAKtC,OAAO,MAAMC,6BAA6B,GAAGX,MAAM,CAKhD;AACC;AACAC,EAAE,CAAC,aAAa,CAAC,EACjBA,EAAE,CAAC,4BAA4B,CAAC,EAChCC,SAAS,CAAC,WAAW,CAAC,EACtBA,SAAS,CAAC,iBAAiB,CAAC,CAC/B,CAAC;AAEF;;;;;;;;;;AAUA,OAAM,SAAUU,0CAA0CA,CACtDC,IAAe,EACfC,SAA2B,EAC3BC,eAAiC,EACjCC,SAAoB;EAEpB,IAAI,CAACV,yBAAyB,CAACU,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIT,gCAAgC,EAAE;EAChD;EACA,MAAMU,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEL,IAAI;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAElE,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACZ,6BAA6B,CAACa,IAAI,CAAC;EAC7Db,6BAA6B,CAACc,MAAM,CAChC;IACIC,WAAW,EAAElB,gBAAgB,CAACmB,wBAAwB;IACtDC,0BAA0B,EAAElB,0BAA0B,CAACmB,UAAU;IACjEf,SAAS,EAAEA,SAAS,IAAIX,SAAS,CAAC2B,OAAO;IACzCf,eAAe,EAAEA,eAAe,IAAIZ,SAAS,CAAC2B;GACjD,EACDT,IAAI,CACP;EAED,OAAO,IAAIjB,sBAAsB,CAAC;IAAEa,IAAI;IAAED,SAAS;IAAEK,IAAI,EAAEA;EAAI,CAAE,CAAC;AACtE;AAEA,OAAO,MAAMU,yBAAyB,GAAG/B,MAAM,CAI5C;AACC;AACAC,EAAE,CAAC,aAAa,CAAC,EACjBA,EAAE,CAAC,4BAA4B,CAAC,EAChCC,SAAS,CAAC,iBAAiB,CAAC,CAC/B,CAAC;AAEF,OAAM,SAAU8B,sCAAsCA,CAClDnB,IAAe,EACfC,SAAoB,EACpBC,eAAiC,EACjCkB,YAAA,GAAuC,EAAE,EACzCjB,SAAA,GAAuBX,qBAAqB;EAE5C,IAAI,CAACC,yBAAyB,CAACU,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIT,gCAAgC,EAAE;EAChD;EAEA,MAAMU,IAAI,GAAGR,UAAU,CAAC,CAAC;IAAES,MAAM,EAAEL,IAAI;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC,EAAEN,SAAS,EAAEmB,YAAY,CAAC;EAEvG,MAAMZ,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACQ,yBAAyB,CAACP,IAAI,CAAC;EACzDO,yBAAyB,CAACN,MAAM,CAC5B;IACIC,WAAW,EAAElB,gBAAgB,CAACmB,wBAAwB;IACtDC,0BAA0B,EAAElB,0BAA0B,CAACwB,MAAM;IAC7DnB,eAAe,EAAEA,eAAe,IAAIZ,SAAS,CAAC2B;GACjD,EACDT,IAAI,CACP;EAED,OAAO,IAAIjB,sBAAsB,CAAC;IAAEa,IAAI;IAAED,SAAS;IAAEK,IAAI,EAAEA;EAAI,CAAE,CAAC;AACtE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createEncoder, getEncodedSize, createDecoder, combineCodec, assertByteArrayHasEnoughBytesForCodec, transformEncoder, transformDecoder, containsBytes, isFixedSize, assertIsFixedSize, fixEncoderSize, fixDecoderSize } from '@solana/codecs-core';\nimport { getU32Encoder, getU32Decoder, getU8Encoder, getU8Decoder } from '@solana/codecs-numbers';\nimport { SolanaError, SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, SOLANA_ERROR__CODECS__INVALID_CONSTANT, SOLANA_ERROR__CODECS__UNION_VARIANT_OUT_OF_RANGE, SOLANA_ERROR__CODECS__INVALID_DISCRIMINATED_UNION_VARIANT, SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS, SOLANA_ERROR__CODECS__INVALID_ENUM_VARIANT, SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE } from '@solana/errors';\n\n// src/array.ts\nfunction assertValidNumberOfItemsForCodec(codecDescription, expected, actual) {\n  if (expected !== actual) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, {\n      actual,\n      codecDescription,\n      expected\n    });\n  }\n}\nfunction maxCodecSizes(sizes) {\n  return sizes.reduce((all, size) => all === null || size === null ? null : Math.max(all, size), 0);\n}\nfunction sumCodecSizes(sizes) {\n  return sizes.reduce((all, size) => all === null || size === null ? null : all + size, 0);\n}\nfunction getFixedSize(codec) {\n  return isFixedSize(codec) ? codec.fixedSize : null;\n}\nfunction getMaxSize(codec) {\n  return isFixedSize(codec) ? codec.fixedSize : codec.maxSize ?? null;\n}\n\n// src/array.ts\nfunction getArrayEncoder(item, config = {}) {\n  const size = config.size ?? getU32Encoder();\n  const fixedSize = computeArrayLikeCodecSize(size, getFixedSize(item));\n  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;\n  return createEncoder({\n    ...(fixedSize !== null ? {\n      fixedSize\n    } : {\n      getSizeFromValue: array => {\n        const prefixSize = typeof size === \"object\" ? getEncodedSize(array.length, size) : 0;\n        return prefixSize + [...array].reduce((all, value) => all + getEncodedSize(value, item), 0);\n      },\n      maxSize\n    }),\n    write: (array, bytes, offset) => {\n      if (typeof size === \"number\") {\n        assertValidNumberOfItemsForCodec(\"array\", size, array.length);\n      }\n      if (typeof size === \"object\") {\n        offset = size.write(array.length, bytes, offset);\n      }\n      array.forEach(value => {\n        offset = item.write(value, bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getArrayDecoder(item, config = {}) {\n  const size = config.size ?? getU32Decoder();\n  const itemSize = getFixedSize(item);\n  const fixedSize = computeArrayLikeCodecSize(size, itemSize);\n  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;\n  return createDecoder({\n    ...(fixedSize !== null ? {\n      fixedSize\n    } : {\n      maxSize\n    }),\n    read: (bytes, offset) => {\n      const array = [];\n      if (typeof size === \"object\" && bytes.slice(offset).length === 0) {\n        return [array, offset];\n      }\n      if (size === \"remainder\") {\n        while (offset < bytes.length) {\n          const [value, newOffset2] = item.read(bytes, offset);\n          offset = newOffset2;\n          array.push(value);\n        }\n        return [array, offset];\n      }\n      const [resolvedSize, newOffset] = typeof size === \"number\" ? [size, offset] : size.read(bytes, offset);\n      offset = newOffset;\n      for (let i = 0; i < resolvedSize; i += 1) {\n        const [value, newOffset2] = item.read(bytes, offset);\n        offset = newOffset2;\n        array.push(value);\n      }\n      return [array, offset];\n    }\n  });\n}\nfunction getArrayCodec(item, config = {}) {\n  return combineCodec(getArrayEncoder(item, config), getArrayDecoder(item, config));\n}\nfunction computeArrayLikeCodecSize(size, itemSize) {\n  if (typeof size !== \"number\") return null;\n  if (size === 0) return 0;\n  return itemSize === null ? null : itemSize * size;\n}\nfunction getBitArrayEncoder(size, config = {}) {\n  const parsedConfig = typeof config === \"boolean\" ? {\n    backward: config\n  } : config;\n  const backward = parsedConfig.backward ?? false;\n  return createEncoder({\n    fixedSize: size,\n    write(value, bytes, offset) {\n      const bytesToAdd = [];\n      for (let i = 0; i < size; i += 1) {\n        let byte = 0;\n        for (let j = 0; j < 8; j += 1) {\n          const feature = Number(value[i * 8 + j] ?? 0);\n          byte |= feature << (backward ? j : 7 - j);\n        }\n        if (backward) {\n          bytesToAdd.unshift(byte);\n        } else {\n          bytesToAdd.push(byte);\n        }\n      }\n      bytes.set(bytesToAdd, offset);\n      return size;\n    }\n  });\n}\nfunction getBitArrayDecoder(size, config = {}) {\n  const parsedConfig = typeof config === \"boolean\" ? {\n    backward: config\n  } : config;\n  const backward = parsedConfig.backward ?? false;\n  return createDecoder({\n    fixedSize: size,\n    read(bytes, offset) {\n      assertByteArrayHasEnoughBytesForCodec(\"bitArray\", size, bytes, offset);\n      const booleans = [];\n      let slice = bytes.slice(offset, offset + size);\n      slice = backward ? slice.reverse() : slice;\n      slice.forEach(byte => {\n        for (let i = 0; i < 8; i += 1) {\n          if (backward) {\n            booleans.push(Boolean(byte & 1));\n            byte >>= 1;\n          } else {\n            booleans.push(Boolean(byte & 128));\n            byte <<= 1;\n          }\n        }\n      });\n      return [booleans, offset + size];\n    }\n  });\n}\nfunction getBitArrayCodec(size, config = {}) {\n  return combineCodec(getBitArrayEncoder(size, config), getBitArrayDecoder(size, config));\n}\nfunction getBooleanEncoder(config = {}) {\n  return transformEncoder(config.size ?? getU8Encoder(), value => value ? 1 : 0);\n}\nfunction getBooleanDecoder(config = {}) {\n  return transformDecoder(config.size ?? getU8Decoder(), value => Number(value) === 1);\n}\nfunction getBooleanCodec(config = {}) {\n  return combineCodec(getBooleanEncoder(config), getBooleanDecoder(config));\n}\nfunction getBytesEncoder() {\n  return createEncoder({\n    getSizeFromValue: value => value.length,\n    write: (value, bytes, offset) => {\n      bytes.set(value, offset);\n      return offset + value.length;\n    }\n  });\n}\nfunction getBytesDecoder() {\n  return createDecoder({\n    read: (bytes, offset) => {\n      const slice = bytes.slice(offset);\n      return [slice, offset + slice.length];\n    }\n  });\n}\nfunction getBytesCodec() {\n  return combineCodec(getBytesEncoder(), getBytesDecoder());\n}\nvar getBase16Decoder = () => createDecoder({\n  read(bytes, offset) {\n    const value = bytes.slice(offset).reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n    return [value, bytes.length];\n  }\n});\nfunction getConstantEncoder(constant) {\n  return createEncoder({\n    fixedSize: constant.length,\n    write: (_, bytes, offset) => {\n      bytes.set(constant, offset);\n      return offset + constant.length;\n    }\n  });\n}\nfunction getConstantDecoder(constant) {\n  return createDecoder({\n    fixedSize: constant.length,\n    read: (bytes, offset) => {\n      const base16 = getBase16Decoder();\n      if (!containsBytes(bytes, constant, offset)) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_CONSTANT, {\n          constant,\n          data: bytes,\n          hexConstant: base16.decode(constant),\n          hexData: base16.decode(bytes),\n          offset\n        });\n      }\n      return [void 0, offset + constant.length];\n    }\n  });\n}\nfunction getConstantCodec(constant) {\n  return combineCodec(getConstantEncoder(constant), getConstantDecoder(constant));\n}\nfunction getTupleEncoder(items) {\n  const fixedSize = sumCodecSizes(items.map(getFixedSize));\n  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;\n  return createEncoder({\n    ...(fixedSize === null ? {\n      getSizeFromValue: value => items.map((item, index) => getEncodedSize(value[index], item)).reduce((all, one) => all + one, 0),\n      maxSize\n    } : {\n      fixedSize\n    }),\n    write: (value, bytes, offset) => {\n      assertValidNumberOfItemsForCodec(\"tuple\", items.length, value.length);\n      items.forEach((item, index) => {\n        offset = item.write(value[index], bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getTupleDecoder(items) {\n  const fixedSize = sumCodecSizes(items.map(getFixedSize));\n  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;\n  return createDecoder({\n    ...(fixedSize === null ? {\n      maxSize\n    } : {\n      fixedSize\n    }),\n    read: (bytes, offset) => {\n      const values = [];\n      items.forEach(item => {\n        const [newValue, newOffset] = item.read(bytes, offset);\n        values.push(newValue);\n        offset = newOffset;\n      });\n      return [values, offset];\n    }\n  });\n}\nfunction getTupleCodec(items) {\n  return combineCodec(getTupleEncoder(items), getTupleDecoder(items));\n}\nfunction getUnionEncoder(variants, getIndexFromValue) {\n  const fixedSize = getUnionFixedSize(variants);\n  const write = (variant, bytes, offset) => {\n    const index = getIndexFromValue(variant);\n    assertValidVariantIndex(variants, index);\n    return variants[index].write(variant, bytes, offset);\n  };\n  if (fixedSize !== null) {\n    return createEncoder({\n      fixedSize,\n      write\n    });\n  }\n  const maxSize = getUnionMaxSize(variants);\n  return createEncoder({\n    ...(maxSize !== null ? {\n      maxSize\n    } : {}),\n    getSizeFromValue: variant => {\n      const index = getIndexFromValue(variant);\n      assertValidVariantIndex(variants, index);\n      return getEncodedSize(variant, variants[index]);\n    },\n    write\n  });\n}\nfunction getUnionDecoder(variants, getIndexFromBytes) {\n  const fixedSize = getUnionFixedSize(variants);\n  const read = (bytes, offset) => {\n    const index = getIndexFromBytes(bytes, offset);\n    assertValidVariantIndex(variants, index);\n    return variants[index].read(bytes, offset);\n  };\n  if (fixedSize !== null) {\n    return createDecoder({\n      fixedSize,\n      read\n    });\n  }\n  const maxSize = getUnionMaxSize(variants);\n  return createDecoder({\n    ...(maxSize !== null ? {\n      maxSize\n    } : {}),\n    read\n  });\n}\nfunction getUnionCodec(variants, getIndexFromValue, getIndexFromBytes) {\n  return combineCodec(getUnionEncoder(variants, getIndexFromValue), getUnionDecoder(variants, getIndexFromBytes));\n}\nfunction assertValidVariantIndex(variants, index) {\n  if (typeof variants[index] === \"undefined\") {\n    throw new SolanaError(SOLANA_ERROR__CODECS__UNION_VARIANT_OUT_OF_RANGE, {\n      maxRange: variants.length - 1,\n      minRange: 0,\n      variant: index\n    });\n  }\n}\nfunction getUnionFixedSize(variants) {\n  if (variants.length === 0) return 0;\n  if (!isFixedSize(variants[0])) return null;\n  const variantSize = variants[0].fixedSize;\n  const sameSizedVariants = variants.every(variant => isFixedSize(variant) && variant.fixedSize === variantSize);\n  return sameSizedVariants ? variantSize : null;\n}\nfunction getUnionMaxSize(variants) {\n  return maxCodecSizes(variants.map(variant => getMaxSize(variant)));\n}\n\n// src/discriminated-union.ts\nfunction getDiscriminatedUnionEncoder(variants, config = {}) {\n  const discriminatorProperty = config.discriminator ?? \"__kind\";\n  const prefix = config.size ?? getU8Encoder();\n  return getUnionEncoder(variants.map(([, variant], index) => transformEncoder(getTupleEncoder([prefix, variant]), value => [index, value])), value => getVariantDiscriminator(variants, value[discriminatorProperty]));\n}\nfunction getDiscriminatedUnionDecoder(variants, config = {}) {\n  const discriminatorProperty = config.discriminator ?? \"__kind\";\n  const prefix = config.size ?? getU8Decoder();\n  return getUnionDecoder(variants.map(([discriminator, variant]) => transformDecoder(getTupleDecoder([prefix, variant]), ([, value]) => ({\n    [discriminatorProperty]: discriminator,\n    ...value\n  }))), (bytes, offset) => Number(prefix.read(bytes, offset)[0]));\n}\nfunction getDiscriminatedUnionCodec(variants, config = {}) {\n  return combineCodec(getDiscriminatedUnionEncoder(variants, config), getDiscriminatedUnionDecoder(variants, config));\n}\nfunction getVariantDiscriminator(variants, discriminatorValue) {\n  const discriminator = variants.findIndex(([key]) => discriminatorValue === key);\n  if (discriminator < 0) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_DISCRIMINATED_UNION_VARIANT, {\n      value: discriminatorValue,\n      variants: variants.map(([key]) => key)\n    });\n  }\n  return discriminator;\n}\nvar getDataEnumEncoder = getDiscriminatedUnionEncoder;\nvar getDataEnumDecoder = getDiscriminatedUnionDecoder;\nvar getDataEnumCodec = getDiscriminatedUnionCodec;\n\n// src/enum-helpers.ts\nfunction getEnumStats(constructor) {\n  const numericalValues = [...new Set(Object.values(constructor).filter(v => typeof v === \"number\"))].sort();\n  const enumRecord = Object.fromEntries(Object.entries(constructor).slice(numericalValues.length));\n  const enumKeys = Object.keys(enumRecord);\n  const enumValues = Object.values(enumRecord);\n  const stringValues = [... /* @__PURE__ */new Set([...enumKeys, ...enumValues.filter(v => typeof v === \"string\")])];\n  return {\n    enumKeys,\n    enumRecord,\n    enumValues,\n    numericalValues,\n    stringValues\n  };\n}\nfunction getEnumIndexFromVariant({\n  enumKeys,\n  enumValues,\n  variant\n}) {\n  const valueIndex = findLastIndex(enumValues, value => value === variant);\n  if (valueIndex >= 0) return valueIndex;\n  return enumKeys.findIndex(key => key === variant);\n}\nfunction getEnumIndexFromDiscriminator({\n  discriminator,\n  enumKeys,\n  enumValues,\n  useValuesAsDiscriminators\n}) {\n  if (!useValuesAsDiscriminators) {\n    return discriminator >= 0 && discriminator < enumKeys.length ? discriminator : -1;\n  }\n  return findLastIndex(enumValues, value => value === discriminator);\n}\nfunction findLastIndex(array, predicate) {\n  let l = array.length;\n  while (l--) {\n    if (predicate(array[l], l, array)) return l;\n  }\n  return -1;\n}\nfunction formatNumericalValues(values) {\n  if (values.length === 0) return \"\";\n  let range = [values[0], values[0]];\n  const ranges = [];\n  for (let index = 1; index < values.length; index++) {\n    const value = values[index];\n    if (range[1] + 1 === value) {\n      range[1] = value;\n    } else {\n      ranges.push(range[0] === range[1] ? `${range[0]}` : `${range[0]}-${range[1]}`);\n      range = [value, value];\n    }\n  }\n  ranges.push(range[0] === range[1] ? `${range[0]}` : `${range[0]}-${range[1]}`);\n  return ranges.join(\", \");\n}\n\n// src/enum.ts\nfunction getEnumEncoder(constructor, config = {}) {\n  const prefix = config.size ?? getU8Encoder();\n  const useValuesAsDiscriminators = config.useValuesAsDiscriminators ?? false;\n  const {\n    enumKeys,\n    enumValues,\n    numericalValues,\n    stringValues\n  } = getEnumStats(constructor);\n  if (useValuesAsDiscriminators && enumValues.some(value => typeof value === \"string\")) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS, {\n      stringValues: enumValues.filter(v => typeof v === \"string\")\n    });\n  }\n  return transformEncoder(prefix, variant => {\n    const index = getEnumIndexFromVariant({\n      enumKeys,\n      enumValues,\n      variant\n    });\n    if (index < 0) {\n      throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_ENUM_VARIANT, {\n        formattedNumericalValues: formatNumericalValues(numericalValues),\n        numericalValues,\n        stringValues,\n        variant\n      });\n    }\n    return useValuesAsDiscriminators ? enumValues[index] : index;\n  });\n}\nfunction getEnumDecoder(constructor, config = {}) {\n  const prefix = config.size ?? getU8Decoder();\n  const useValuesAsDiscriminators = config.useValuesAsDiscriminators ?? false;\n  const {\n    enumKeys,\n    enumValues,\n    numericalValues\n  } = getEnumStats(constructor);\n  if (useValuesAsDiscriminators && enumValues.some(value => typeof value === \"string\")) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS, {\n      stringValues: enumValues.filter(v => typeof v === \"string\")\n    });\n  }\n  return transformDecoder(prefix, value => {\n    const discriminator = Number(value);\n    const index = getEnumIndexFromDiscriminator({\n      discriminator,\n      enumKeys,\n      enumValues,\n      useValuesAsDiscriminators\n    });\n    if (index < 0) {\n      const validDiscriminators = useValuesAsDiscriminators ? numericalValues : [...Array(enumKeys.length).keys()];\n      throw new SolanaError(SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, {\n        discriminator,\n        formattedValidDiscriminators: formatNumericalValues(validDiscriminators),\n        validDiscriminators\n      });\n    }\n    return enumValues[index];\n  });\n}\nfunction getEnumCodec(constructor, config = {}) {\n  return combineCodec(getEnumEncoder(constructor, config), getEnumDecoder(constructor, config));\n}\nvar getScalarEnumEncoder = getEnumEncoder;\nvar getScalarEnumDecoder = getEnumDecoder;\nvar getScalarEnumCodec = getEnumCodec;\nfunction getHiddenPrefixEncoder(encoder, prefixedEncoders) {\n  return transformEncoder(getTupleEncoder([...prefixedEncoders, encoder]), value => [...prefixedEncoders.map(() => void 0), value]);\n}\nfunction getHiddenPrefixDecoder(decoder, prefixedDecoders) {\n  return transformDecoder(getTupleDecoder([...prefixedDecoders, decoder]), tuple => tuple[tuple.length - 1]);\n}\nfunction getHiddenPrefixCodec(codec, prefixedCodecs) {\n  return combineCodec(getHiddenPrefixEncoder(codec, prefixedCodecs), getHiddenPrefixDecoder(codec, prefixedCodecs));\n}\nfunction getHiddenSuffixEncoder(encoder, suffixedEncoders) {\n  return transformEncoder(getTupleEncoder([encoder, ...suffixedEncoders]), value => [value, ...suffixedEncoders.map(() => void 0)]);\n}\nfunction getHiddenSuffixDecoder(decoder, suffixedDecoders) {\n  return transformDecoder(getTupleDecoder([decoder, ...suffixedDecoders]), tuple => tuple[0]);\n}\nfunction getHiddenSuffixCodec(codec, suffixedCodecs) {\n  return combineCodec(getHiddenSuffixEncoder(codec, suffixedCodecs), getHiddenSuffixDecoder(codec, suffixedCodecs));\n}\nfunction getMapEncoder(key, value, config = {}) {\n  return transformEncoder(getArrayEncoder(getTupleEncoder([key, value]), config), map => [...map.entries()]);\n}\nfunction getMapDecoder(key, value, config = {}) {\n  return transformDecoder(getArrayDecoder(getTupleDecoder([key, value]), config), entries => new Map(entries));\n}\nfunction getMapCodec(key, value, config = {}) {\n  return combineCodec(getMapEncoder(key, value, config), getMapDecoder(key, value, config));\n}\nfunction getUnitEncoder() {\n  return createEncoder({\n    fixedSize: 0,\n    write: (_value, _bytes, offset) => offset\n  });\n}\nfunction getUnitDecoder() {\n  return createDecoder({\n    fixedSize: 0,\n    read: (_bytes, offset) => [void 0, offset]\n  });\n}\nfunction getUnitCodec() {\n  return combineCodec(getUnitEncoder(), getUnitDecoder());\n}\n\n// src/nullable.ts\nfunction getNullableEncoder(item, config = {}) {\n  const prefix = (() => {\n    if (config.prefix === null) {\n      return transformEncoder(getUnitEncoder(), _boolean => void 0);\n    }\n    return getBooleanEncoder({\n      size: config.prefix ?? getU8Encoder()\n    });\n  })();\n  const noneValue = (() => {\n    if (config.noneValue === \"zeroes\") {\n      assertIsFixedSize(item);\n      return fixEncoderSize(getUnitEncoder(), item.fixedSize);\n    }\n    if (!config.noneValue) {\n      return getUnitEncoder();\n    }\n    return getConstantEncoder(config.noneValue);\n  })();\n  return getUnionEncoder([transformEncoder(getTupleEncoder([prefix, noneValue]), _value => [false, void 0]), transformEncoder(getTupleEncoder([prefix, item]), value => [true, value])], variant => Number(variant !== null));\n}\nfunction getNullableDecoder(item, config = {}) {\n  const prefix = (() => {\n    if (config.prefix === null) {\n      return transformDecoder(getUnitDecoder(), () => false);\n    }\n    return getBooleanDecoder({\n      size: config.prefix ?? getU8Decoder()\n    });\n  })();\n  const noneValue = (() => {\n    if (config.noneValue === \"zeroes\") {\n      assertIsFixedSize(item);\n      return fixDecoderSize(getUnitDecoder(), item.fixedSize);\n    }\n    if (!config.noneValue) {\n      return getUnitDecoder();\n    }\n    return getConstantDecoder(config.noneValue);\n  })();\n  return getUnionDecoder([transformDecoder(getTupleDecoder([prefix, noneValue]), () => null), transformDecoder(getTupleDecoder([prefix, item]), ([, value]) => value)], (bytes, offset) => {\n    if (config.prefix === null && !config.noneValue) {\n      return Number(offset < bytes.length);\n    }\n    if (config.prefix === null && config.noneValue != null) {\n      const zeroValue = config.noneValue === \"zeroes\" ? new Uint8Array(noneValue.fixedSize).fill(0) : config.noneValue;\n      return containsBytes(bytes, zeroValue, offset) ? 0 : 1;\n    }\n    return Number(prefix.read(bytes, offset)[0]);\n  });\n}\nfunction getNullableCodec(item, config = {}) {\n  return combineCodec(getNullableEncoder(item, config), getNullableDecoder(item, config));\n}\nfunction getSetEncoder(item, config = {}) {\n  return transformEncoder(getArrayEncoder(item, config), set => [...set]);\n}\nfunction getSetDecoder(item, config = {}) {\n  return transformDecoder(getArrayDecoder(item, config), entries => new Set(entries));\n}\nfunction getSetCodec(item, config = {}) {\n  return combineCodec(getSetEncoder(item, config), getSetDecoder(item, config));\n}\nfunction getStructEncoder(fields) {\n  const fieldCodecs = fields.map(([, codec]) => codec);\n  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;\n  return createEncoder({\n    ...(fixedSize === null ? {\n      getSizeFromValue: value => fields.map(([key, codec]) => getEncodedSize(value[key], codec)).reduce((all, one) => all + one, 0),\n      maxSize\n    } : {\n      fixedSize\n    }),\n    write: (struct, bytes, offset) => {\n      fields.forEach(([key, codec]) => {\n        offset = codec.write(struct[key], bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getStructDecoder(fields) {\n  const fieldCodecs = fields.map(([, codec]) => codec);\n  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;\n  return createDecoder({\n    ...(fixedSize === null ? {\n      maxSize\n    } : {\n      fixedSize\n    }),\n    read: (bytes, offset) => {\n      const struct = {};\n      fields.forEach(([key, codec]) => {\n        const [value, newOffset] = codec.read(bytes, offset);\n        offset = newOffset;\n        struct[key] = value;\n      });\n      return [struct, offset];\n    }\n  });\n}\nfunction getStructCodec(fields) {\n  return combineCodec(getStructEncoder(fields), getStructDecoder(fields));\n}\nexport { assertValidNumberOfItemsForCodec, getArrayCodec, getArrayDecoder, getArrayEncoder, getBitArrayCodec, getBitArrayDecoder, getBitArrayEncoder, getBooleanCodec, getBooleanDecoder, getBooleanEncoder, getBytesCodec, getBytesDecoder, getBytesEncoder, getConstantCodec, getConstantDecoder, getConstantEncoder, getDataEnumCodec, getDataEnumDecoder, getDataEnumEncoder, getDiscriminatedUnionCodec, getDiscriminatedUnionDecoder, getDiscriminatedUnionEncoder, getEnumCodec, getEnumDecoder, getEnumEncoder, getHiddenPrefixCodec, getHiddenPrefixDecoder, getHiddenPrefixEncoder, getHiddenSuffixCodec, getHiddenSuffixDecoder, getHiddenSuffixEncoder, getMapCodec, getMapDecoder, getMapEncoder, getNullableCodec, getNullableDecoder, getNullableEncoder, getScalarEnumCodec, getScalarEnumDecoder, getScalarEnumEncoder, getSetCodec, getSetDecoder, getSetEncoder, getStructCodec, getStructDecoder, getStructEncoder, getTupleCodec, getTupleDecoder, getTupleEncoder, getUnionCodec, getUnionDecoder, getUnionEncoder, getUnitCodec, getUnitDecoder, getUnitEncoder };\n\n//# sourceMappingURL=index.browser.mjs.map","map":{"version":3,"names":["assertValidNumberOfItemsForCodec","codecDescription","expected","actual","SolanaError","SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS","maxCodecSizes","sizes","reduce","all","size","Math","max","sumCodecSizes","getFixedSize","codec","isFixedSize","fixedSize","getMaxSize","maxSize","getArrayEncoder","item","config","getU32Encoder","computeArrayLikeCodecSize","createEncoder","getSizeFromValue","array","prefixSize","getEncodedSize","length","value","write","bytes","offset","forEach","getArrayDecoder","getU32Decoder","itemSize","createDecoder","read","slice","newOffset2","push","resolvedSize","newOffset","i","getArrayCodec","combineCodec","getBitArrayEncoder","parsedConfig","backward","bytesToAdd","byte","j","feature","Number","unshift","set","getBitArrayDecoder","assertByteArrayHasEnoughBytesForCodec","booleans","reverse","Boolean","getBitArrayCodec","getBooleanEncoder","transformEncoder","getU8Encoder","getBooleanDecoder","transformDecoder","getU8Decoder","getBooleanCodec","getBytesEncoder","getBytesDecoder","getBytesCodec","getBase16Decoder","str","toString","padStart","getConstantEncoder","constant","_","getConstantDecoder","base16","containsBytes","SOLANA_ERROR__CODECS__INVALID_CONSTANT","data","hexConstant","decode","hexData","getConstantCodec","getTupleEncoder","items","map","index","one","getTupleDecoder","values","newValue","getTupleCodec","getUnionEncoder","variants","getIndexFromValue","getUnionFixedSize","variant","assertValidVariantIndex","getUnionMaxSize","getUnionDecoder","getIndexFromBytes","getUnionCodec","SOLANA_ERROR__CODECS__UNION_VARIANT_OUT_OF_RANGE","maxRange","minRange","variantSize","sameSizedVariants","every","getDiscriminatedUnionEncoder","discriminatorProperty","discriminator","prefix","getVariantDiscriminator","getDiscriminatedUnionDecoder","getDiscriminatedUnionCodec","discriminatorValue","findIndex","key","SOLANA_ERROR__CODECS__INVALID_DISCRIMINATED_UNION_VARIANT","getDataEnumEncoder","getDataEnumDecoder","getDataEnumCodec","getEnumStats","constructor","numericalValues","Set","Object","filter","v","sort","enumRecord","fromEntries","entries","enumKeys","keys","enumValues","stringValues","getEnumIndexFromVariant","valueIndex","findLastIndex","getEnumIndexFromDiscriminator","useValuesAsDiscriminators","predicate","l","formatNumericalValues","range","ranges","join","getEnumEncoder","some","SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS","SOLANA_ERROR__CODECS__INVALID_ENUM_VARIANT","formattedNumericalValues","getEnumDecoder","validDiscriminators","Array","SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE","formattedValidDiscriminators","getEnumCodec","getScalarEnumEncoder","getScalarEnumDecoder","getScalarEnumCodec","getHiddenPrefixEncoder","encoder","prefixedEncoders","getHiddenPrefixDecoder","decoder","prefixedDecoders","tuple","getHiddenPrefixCodec","prefixedCodecs","getHiddenSuffixEncoder","suffixedEncoders","getHiddenSuffixDecoder","suffixedDecoders","getHiddenSuffixCodec","suffixedCodecs","getMapEncoder","getMapDecoder","Map","getMapCodec","getUnitEncoder","_value","_bytes","getUnitDecoder","getUnitCodec","getNullableEncoder","_boolean","noneValue","assertIsFixedSize","fixEncoderSize","getNullableDecoder","fixDecoderSize","zeroValue","Uint8Array","fill","getNullableCodec","getSetEncoder","getSetDecoder","getSetCodec","getStructEncoder","fields","fieldCodecs","struct","getStructDecoder","getStructCodec"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/assertions.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/utils.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/array.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/bit-array.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/boolean.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/bytes.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-strings/src/base16.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/constant.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/tuple.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/union.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/discriminated-union.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/enum-helpers.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/enum.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/hidden-prefix.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/hidden-suffix.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/map.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/unit.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/nullable.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/set.ts","/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/node_modules/@solana/codecs-data-structures/src/struct.ts"],"sourcesContent":["import { SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, SolanaError } from '@solana/errors';\n\n/** Checks the number of items in an array-like structure is expected. */\nexport function assertValidNumberOfItemsForCodec(\n    codecDescription: string,\n    expected: bigint | number,\n    actual: bigint | number,\n) {\n    if (expected !== actual) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, {\n            actual,\n            codecDescription,\n            expected,\n        });\n    }\n}\n","import { isFixedSize } from '@solana/codecs-core';\n\n/**\n * Functionally, this type helper is equivalent to the identity type — i.e. `type Identity<T> = T`.\n * However, wrapping generic object mappings in this type significantly reduces the number\n * of instantiation expressions processed, which increases TypeScript performance and\n * prevents \"Type instantiation is excessively deep and possibly infinite\" errors.\n *\n * This works because TypeScript doesn't create a new level of nesting when encountering conditional generic types.\n * @see https://github.com/microsoft/TypeScript/issues/34933\n * @see https://github.com/kysely-org/kysely/pull/483\n */\nexport type DrainOuterGeneric<T> = [T] extends [unknown] ? T : never;\n\nexport function maxCodecSizes(sizes: (number | null)[]): number | null {\n    return sizes.reduce(\n        (all, size) => (all === null || size === null ? null : Math.max(all, size)),\n        0 as number | null,\n    );\n}\n\nexport function sumCodecSizes(sizes: (number | null)[]): number | null {\n    return sizes.reduce((all, size) => (all === null || size === null ? null : all + size), 0 as number | null);\n}\n\nexport function getFixedSize(codec: { fixedSize: number } | { maxSize?: number }): number | null {\n    return isFixedSize(codec) ? codec.fixedSize : null;\n}\n\nexport function getMaxSize(codec: { fixedSize: number } | { maxSize?: number }): number | null {\n    return isFixedSize(codec) ? codec.fixedSize : (codec.maxSize ?? null);\n}\n","import {\n    Codec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    getEncodedSize,\n    ReadonlyUint8Array,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport { getU32Decoder, getU32Encoder, NumberCodec, NumberDecoder, NumberEncoder } from '@solana/codecs-numbers';\n\nimport { assertValidNumberOfItemsForCodec } from './assertions';\nimport { getFixedSize, getMaxSize } from './utils';\n\n/**\n * Represents all the size options for array-like codecs\n * — i.e. `array`, `map` and `set`.\n *\n * It can be one of the following:\n * - a {@link NumberCodec} that prefixes its content with its size.\n * - a fixed number of items.\n * - or `'remainder'` to infer the number of items by dividing\n *   the rest of the byte array by the fixed size of its item.\n *   Note that this option is only available for fixed-size items.\n */\nexport type ArrayLikeCodecSize<TPrefix extends NumberCodec | NumberDecoder | NumberEncoder> =\n    | TPrefix\n    | number\n    | 'remainder';\n\n/** Defines the configs for array codecs. */\nexport type ArrayCodecConfig<TPrefix extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * The size of the array.\n     * @defaultValue u32 prefix.\n     */\n    size?: ArrayLikeCodecSize<TPrefix>;\n};\n\n/**\n * Encodes an array of items.\n *\n * @param item - The encoder to use for the array's items.\n * @param config - A set of config for the encoder.\n */\nexport function getArrayEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config: ArrayCodecConfig<NumberEncoder> & { size: 0 },\n): FixedSizeEncoder<TFrom[], 0>;\nexport function getArrayEncoder<TFrom>(\n    item: FixedSizeEncoder<TFrom>,\n    config: ArrayCodecConfig<NumberEncoder> & { size: number },\n): FixedSizeEncoder<TFrom[]>;\nexport function getArrayEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config?: ArrayCodecConfig<NumberEncoder>,\n): VariableSizeEncoder<TFrom[]>;\nexport function getArrayEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config: ArrayCodecConfig<NumberEncoder> = {},\n): Encoder<TFrom[]> {\n    const size = config.size ?? getU32Encoder();\n    const fixedSize = computeArrayLikeCodecSize(size, getFixedSize(item));\n    const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? undefined;\n\n    return createEncoder({\n        ...(fixedSize !== null\n            ? { fixedSize }\n            : {\n                  getSizeFromValue: (array: TFrom[]) => {\n                      const prefixSize = typeof size === 'object' ? getEncodedSize(array.length, size) : 0;\n                      return prefixSize + [...array].reduce((all, value) => all + getEncodedSize(value, item), 0);\n                  },\n                  maxSize,\n              }),\n        write: (array: TFrom[], bytes, offset) => {\n            if (typeof size === 'number') {\n                assertValidNumberOfItemsForCodec('array', size, array.length);\n            }\n            if (typeof size === 'object') {\n                offset = size.write(array.length, bytes, offset);\n            }\n            array.forEach(value => {\n                offset = item.write(value, bytes, offset);\n            });\n            return offset;\n        },\n    });\n}\n\n/**\n * Decodes an array of items.\n *\n * @param item - The encoder to use for the array's items.\n * @param config - A set of config for the encoder.\n */\nexport function getArrayDecoder<TTo>(\n    item: Decoder<TTo>,\n    config: ArrayCodecConfig<NumberDecoder> & { size: 0 },\n): FixedSizeDecoder<TTo[], 0>;\nexport function getArrayDecoder<TTo>(\n    item: FixedSizeDecoder<TTo>,\n    config: ArrayCodecConfig<NumberDecoder> & { size: number },\n): FixedSizeDecoder<TTo[]>;\nexport function getArrayDecoder<TTo>(\n    item: Decoder<TTo>,\n    config?: ArrayCodecConfig<NumberDecoder>,\n): VariableSizeDecoder<TTo[]>;\nexport function getArrayDecoder<TTo>(item: Decoder<TTo>, config: ArrayCodecConfig<NumberDecoder> = {}): Decoder<TTo[]> {\n    const size = config.size ?? getU32Decoder();\n    const itemSize = getFixedSize(item);\n    const fixedSize = computeArrayLikeCodecSize(size, itemSize);\n    const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? undefined;\n\n    return createDecoder({\n        ...(fixedSize !== null ? { fixedSize } : { maxSize }),\n        read: (bytes: ReadonlyUint8Array | Uint8Array, offset) => {\n            const array: TTo[] = [];\n            if (typeof size === 'object' && bytes.slice(offset).length === 0) {\n                return [array, offset];\n            }\n\n            if (size === 'remainder') {\n                while (offset < bytes.length) {\n                    const [value, newOffset] = item.read(bytes, offset);\n                    offset = newOffset;\n                    array.push(value);\n                }\n                return [array, offset];\n            }\n\n            const [resolvedSize, newOffset] = typeof size === 'number' ? [size, offset] : size.read(bytes, offset);\n            offset = newOffset;\n            for (let i = 0; i < resolvedSize; i += 1) {\n                const [value, newOffset] = item.read(bytes, offset);\n                offset = newOffset;\n                array.push(value);\n            }\n            return [array, offset];\n        },\n    });\n}\n\n/**\n * Creates a codec for an array of items.\n *\n * @param item - The codec to use for the array's items.\n * @param config - A set of config for the codec.\n */\nexport function getArrayCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config: ArrayCodecConfig<NumberCodec> & { size: 0 },\n): FixedSizeCodec<TFrom[], TTo[], 0>;\nexport function getArrayCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: FixedSizeCodec<TFrom, TTo>,\n    config: ArrayCodecConfig<NumberCodec> & { size: number },\n): FixedSizeCodec<TFrom[], TTo[]>;\nexport function getArrayCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config?: ArrayCodecConfig<NumberCodec>,\n): VariableSizeCodec<TFrom[], TTo[]>;\nexport function getArrayCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config: ArrayCodecConfig<NumberCodec> = {},\n): Codec<TFrom[], TTo[]> {\n    return combineCodec(getArrayEncoder(item, config as object), getArrayDecoder(item, config as object));\n}\n\nfunction computeArrayLikeCodecSize(size: number | object | 'remainder', itemSize: number | null): number | null {\n    if (typeof size !== 'number') return null;\n    if (size === 0) return 0;\n    return itemSize === null ? null : itemSize * size;\n}\n","import {\n    assertByteArrayHasEnoughBytesForCodec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n} from '@solana/codecs-core';\n\n/** Defines the config for bitArray codecs. */\nexport type BitArrayCodecConfig = {\n    /**\n     * Whether to read the bits in reverse order.\n     * @defaultValue `false`\n     */\n    backward?: boolean;\n};\n\n/**\n * Encodes an array of booleans into bits.\n *\n * @param size - The amount of bytes to use for the bit array.\n * @param config - A set of config for the encoder.\n */\nexport function getBitArrayEncoder<TSize extends number>(\n    size: TSize,\n    config: BitArrayCodecConfig | boolean = {},\n): FixedSizeEncoder<boolean[], TSize> {\n    const parsedConfig: BitArrayCodecConfig = typeof config === 'boolean' ? { backward: config } : config;\n    const backward = parsedConfig.backward ?? false;\n    return createEncoder({\n        fixedSize: size,\n        write(value: boolean[], bytes, offset) {\n            const bytesToAdd: number[] = [];\n\n            for (let i = 0; i < size; i += 1) {\n                let byte = 0;\n                for (let j = 0; j < 8; j += 1) {\n                    const feature = Number(value[i * 8 + j] ?? 0);\n                    byte |= feature << (backward ? j : 7 - j);\n                }\n                if (backward) {\n                    bytesToAdd.unshift(byte);\n                } else {\n                    bytesToAdd.push(byte);\n                }\n            }\n\n            bytes.set(bytesToAdd, offset);\n            return size;\n        },\n    });\n}\n\n/**\n * Decodes bits into an array of booleans.\n *\n * @param size - The amount of bytes to use for the bit array.\n * @param config - A set of config for the decoder.\n */\nexport function getBitArrayDecoder<TSize extends number>(\n    size: TSize,\n    config: BitArrayCodecConfig | boolean = {},\n): FixedSizeDecoder<boolean[], TSize> {\n    const parsedConfig: BitArrayCodecConfig = typeof config === 'boolean' ? { backward: config } : config;\n    const backward = parsedConfig.backward ?? false;\n    return createDecoder({\n        fixedSize: size,\n        read(bytes, offset) {\n            assertByteArrayHasEnoughBytesForCodec('bitArray', size, bytes, offset);\n            const booleans: boolean[] = [];\n            let slice = bytes.slice(offset, offset + size);\n            slice = backward ? slice.reverse() : slice;\n\n            slice.forEach(byte => {\n                for (let i = 0; i < 8; i += 1) {\n                    if (backward) {\n                        booleans.push(Boolean(byte & 1));\n                        byte >>= 1;\n                    } else {\n                        booleans.push(Boolean(byte & 0b1000_0000));\n                        byte <<= 1;\n                    }\n                }\n            });\n\n            return [booleans, offset + size];\n        },\n    });\n}\n\n/**\n * An array of boolean codec that converts booleans to bits and vice versa.\n *\n * @param size - The amount of bytes to use for the bit array.\n * @param config - A set of config for the codec.\n */\nexport function getBitArrayCodec<TSize extends number>(\n    size: TSize,\n    config: BitArrayCodecConfig | boolean = {},\n): FixedSizeCodec<boolean[], boolean[], TSize> {\n    return combineCodec(getBitArrayEncoder(size, config), getBitArrayDecoder(size, config));\n}\n","import {\n    Codec,\n    combineCodec,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    transformDecoder,\n    transformEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport {\n    FixedSizeNumberCodec,\n    FixedSizeNumberDecoder,\n    FixedSizeNumberEncoder,\n    getU8Decoder,\n    getU8Encoder,\n    NumberCodec,\n    NumberDecoder,\n    NumberEncoder,\n} from '@solana/codecs-numbers';\n\n/** Defines the config for boolean codecs. */\nexport type BooleanCodecConfig<TSize extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * The number codec to delegate to.\n     * @defaultValue u8 size.\n     */\n    size?: TSize;\n};\n\n/**\n * Encodes booleans.\n *\n * @param config - A set of config for the encoder.\n */\nexport function getBooleanEncoder(): FixedSizeEncoder<boolean, 1>;\nexport function getBooleanEncoder<TSize extends number>(\n    config: BooleanCodecConfig<NumberEncoder> & { size: FixedSizeNumberEncoder<TSize> },\n): FixedSizeEncoder<boolean, TSize>;\nexport function getBooleanEncoder(config: BooleanCodecConfig<NumberEncoder>): VariableSizeEncoder<boolean>;\nexport function getBooleanEncoder(config: BooleanCodecConfig<NumberEncoder> = {}): Encoder<boolean> {\n    return transformEncoder(config.size ?? getU8Encoder(), (value: boolean) => (value ? 1 : 0));\n}\n\n/**\n * Decodes booleans.\n *\n * @param config - A set of config for the decoder.\n */\nexport function getBooleanDecoder(): FixedSizeDecoder<boolean, 1>;\nexport function getBooleanDecoder<TSize extends number>(\n    config: BooleanCodecConfig<NumberDecoder> & { size: FixedSizeNumberDecoder<TSize> },\n): FixedSizeDecoder<boolean, TSize>;\nexport function getBooleanDecoder(config: BooleanCodecConfig<NumberDecoder>): VariableSizeDecoder<boolean>;\nexport function getBooleanDecoder(config: BooleanCodecConfig<NumberDecoder> = {}): Decoder<boolean> {\n    return transformDecoder(config.size ?? getU8Decoder(), (value: bigint | number): boolean => Number(value) === 1);\n}\n\n/**\n * Creates a boolean codec.\n *\n * @param config - A set of config for the codec.\n */\nexport function getBooleanCodec(): FixedSizeCodec<boolean, boolean, 1>;\nexport function getBooleanCodec<TSize extends number>(\n    config: BooleanCodecConfig<NumberCodec> & { size: FixedSizeNumberCodec<TSize> },\n): FixedSizeCodec<boolean, boolean, TSize>;\nexport function getBooleanCodec(config: BooleanCodecConfig<NumberCodec>): VariableSizeCodec<boolean>;\nexport function getBooleanCodec(config: BooleanCodecConfig<NumberCodec> = {}): Codec<boolean> {\n    return combineCodec(getBooleanEncoder(config), getBooleanDecoder(config));\n}\n","import {\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    ReadonlyUint8Array,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\n\n/**\n * Encodes byte arrays as provided.\n *\n * To control the size of the encoded byte array, you can use\n * the `fixEncoderSize` or `addEncoderSizePrefix` functions.\n */\nexport function getBytesEncoder(): VariableSizeEncoder<ReadonlyUint8Array | Uint8Array> {\n    return createEncoder({\n        getSizeFromValue: value => value.length,\n        write: (value, bytes, offset) => {\n            bytes.set(value, offset);\n            return offset + value.length;\n        },\n    });\n}\n\n/**\n * Decodes byte arrays as-is.\n *\n * To control the size of the decoded byte array, you can use\n * the `fixDecoderSize` or `addDecoderSizePrefix` functions.\n */\nexport function getBytesDecoder(): VariableSizeDecoder<ReadonlyUint8Array> {\n    return createDecoder({\n        read: (bytes, offset) => {\n            const slice = bytes.slice(offset);\n            return [slice, offset + slice.length];\n        },\n    });\n}\n\n/**\n * Creates a sized bytes codec.\n *\n * To control the size of the encoded and decoded byte arrays,\n * you can use the `fixCodecSize` or `addCodecSizePrefix` functions.\n */\nexport function getBytesCodec(): VariableSizeCodec<ReadonlyUint8Array | Uint8Array, ReadonlyUint8Array> {\n    return combineCodec(getBytesEncoder(), getBytesDecoder());\n}\n","import {\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport { SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, SolanaError } from '@solana/errors';\n\nconst enum HexC {\n    ZERO = 48, // 0\n    NINE = 57, // 9\n    A_UP = 65, // A\n    F_UP = 70, // F\n    A_LO = 97, // a\n    F_LO = 102, // f\n}\n\nconst INVALID_STRING_ERROR_BASE_CONFIG = {\n    alphabet: '0123456789abcdef',\n    base: 16,\n} as const;\n\nfunction charCodeToBase16(char: number) {\n    if (char >= HexC.ZERO && char <= HexC.NINE) return char - HexC.ZERO;\n    if (char >= HexC.A_UP && char <= HexC.F_UP) return char - (HexC.A_UP - 10);\n    if (char >= HexC.A_LO && char <= HexC.F_LO) return char - (HexC.A_LO - 10);\n}\n\n/** Encodes strings in base16. */\nexport const getBase16Encoder = (): VariableSizeEncoder<string> =>\n    createEncoder({\n        getSizeFromValue: (value: string) => Math.ceil(value.length / 2),\n        write(value: string, bytes, offset) {\n            const len = value.length;\n            const al = len / 2;\n            if (len === 1) {\n                const c = value.charCodeAt(0);\n                const n = charCodeToBase16(c);\n                if (n === undefined) {\n                    throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n                        ...INVALID_STRING_ERROR_BASE_CONFIG,\n                        value,\n                    });\n                }\n                bytes.set([n], offset);\n                return 1 + offset;\n            }\n            const hexBytes = new Uint8Array(al);\n            for (let i = 0, j = 0; i < al; i++) {\n                const c1 = value.charCodeAt(j++);\n                const c2 = value.charCodeAt(j++);\n\n                const n1 = charCodeToBase16(c1);\n                const n2 = charCodeToBase16(c2);\n                if (n1 === undefined || (n2 === undefined && !Number.isNaN(c2))) {\n                    throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n                        ...INVALID_STRING_ERROR_BASE_CONFIG,\n                        value,\n                    });\n                }\n                hexBytes[i] = !Number.isNaN(c2) ? (n1 << 4) | (n2 ?? 0) : n1;\n            }\n\n            bytes.set(hexBytes, offset);\n            return hexBytes.length + offset;\n        },\n    });\n\n/** Decodes strings in base16. */\nexport const getBase16Decoder = (): VariableSizeDecoder<string> =>\n    createDecoder({\n        read(bytes, offset) {\n            const value = bytes.slice(offset).reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n            return [value, bytes.length];\n        },\n    });\n\n/** Encodes and decodes strings in base16. */\nexport const getBase16Codec = (): VariableSizeCodec<string> => combineCodec(getBase16Encoder(), getBase16Decoder());\n","import {\n    combineCodec,\n    containsBytes,\n    createDecoder,\n    createEncoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    ReadonlyUint8Array,\n} from '@solana/codecs-core';\nimport { getBase16Decoder } from '@solana/codecs-strings';\nimport { SOLANA_ERROR__CODECS__INVALID_CONSTANT, SolanaError } from '@solana/errors';\n\n/**\n * Creates a void encoder that always sets the provided byte array when encoding.\n */\nexport function getConstantEncoder<TConstant extends ReadonlyUint8Array>(\n    constant: TConstant,\n): FixedSizeEncoder<void, TConstant['length']> {\n    return createEncoder({\n        fixedSize: constant.length,\n        write: (_, bytes, offset) => {\n            bytes.set(constant, offset);\n            return offset + constant.length;\n        },\n    });\n}\n\n/**\n * Creates a void decoder that reads the next bytes and fails if they do not match the provided constant.\n */\nexport function getConstantDecoder<TConstant extends ReadonlyUint8Array>(\n    constant: TConstant,\n): FixedSizeDecoder<void, TConstant['length']> {\n    return createDecoder({\n        fixedSize: constant.length,\n        read: (bytes, offset) => {\n            const base16 = getBase16Decoder();\n            if (!containsBytes(bytes, constant, offset)) {\n                throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_CONSTANT, {\n                    constant,\n                    data: bytes,\n                    hexConstant: base16.decode(constant),\n                    hexData: base16.decode(bytes),\n                    offset,\n                });\n            }\n            return [undefined, offset + constant.length];\n        },\n    });\n}\n\n/**\n * Creates a void codec that always sets the provided byte array\n * when encoding and, when decoding, asserts that the next\n * bytes match the provided byte array.\n */\nexport function getConstantCodec<TConstant extends ReadonlyUint8Array>(\n    constant: TConstant,\n): FixedSizeCodec<void, void, TConstant['length']> {\n    return combineCodec(getConstantEncoder(constant), getConstantDecoder(constant));\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n    Codec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    getEncodedSize,\n    ReadonlyUint8Array,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\n\nimport { assertValidNumberOfItemsForCodec } from './assertions';\nimport { DrainOuterGeneric, getFixedSize, getMaxSize, sumCodecSizes } from './utils';\n\ntype GetEncoderTypeFromItems<TItems extends readonly Encoder<any>[]> = DrainOuterGeneric<{\n    [I in keyof TItems]: TItems[I] extends Encoder<infer TFrom> ? TFrom : never;\n}>;\n\ntype GetDecoderTypeFromItems<TItems extends readonly Decoder<any>[]> = DrainOuterGeneric<{\n    [I in keyof TItems]: TItems[I] extends Decoder<infer TTo> ? TTo : never;\n}>;\n\n/**\n * Creates a encoder for a tuple-like array.\n *\n * @param items - The encoders to use for each item in the tuple.\n */\nexport function getTupleEncoder<const TItems extends readonly FixedSizeEncoder<any>[]>(\n    items: TItems,\n): FixedSizeEncoder<GetEncoderTypeFromItems<TItems>>;\nexport function getTupleEncoder<const TItems extends readonly Encoder<any>[]>(\n    items: TItems,\n): VariableSizeEncoder<GetEncoderTypeFromItems<TItems>>;\nexport function getTupleEncoder<const TItems extends readonly Encoder<any>[]>(\n    items: TItems,\n): Encoder<GetEncoderTypeFromItems<TItems>> {\n    type TFrom = GetEncoderTypeFromItems<TItems>;\n    const fixedSize = sumCodecSizes(items.map(getFixedSize));\n    const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? undefined;\n\n    return createEncoder({\n        ...(fixedSize === null\n            ? {\n                  getSizeFromValue: (value: TFrom) =>\n                      items.map((item, index) => getEncodedSize(value[index], item)).reduce((all, one) => all + one, 0),\n                  maxSize,\n              }\n            : { fixedSize }),\n        write: (value: TFrom, bytes, offset) => {\n            assertValidNumberOfItemsForCodec('tuple', items.length, value.length);\n            items.forEach((item, index) => {\n                offset = item.write(value[index], bytes, offset);\n            });\n            return offset;\n        },\n    });\n}\n\n/**\n * Creates a decoder for a tuple-like array.\n *\n * @param items - The decoders to use for each item in the tuple.\n */\n\nexport function getTupleDecoder<const TItems extends readonly FixedSizeDecoder<any>[]>(\n    items: TItems,\n): FixedSizeDecoder<GetDecoderTypeFromItems<TItems>>;\nexport function getTupleDecoder<const TItems extends readonly Decoder<any>[]>(\n    items: TItems,\n): VariableSizeDecoder<GetDecoderTypeFromItems<TItems>>;\nexport function getTupleDecoder<const TItems extends readonly Decoder<any>[]>(\n    items: TItems,\n): Decoder<GetDecoderTypeFromItems<TItems>> {\n    type TTo = GetDecoderTypeFromItems<TItems>;\n    const fixedSize = sumCodecSizes(items.map(getFixedSize));\n    const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? undefined;\n\n    return createDecoder({\n        ...(fixedSize === null ? { maxSize } : { fixedSize }),\n        read: (bytes: ReadonlyUint8Array | Uint8Array, offset) => {\n            const values = [] as Array<any> & TTo;\n            items.forEach(item => {\n                const [newValue, newOffset] = item.read(bytes, offset);\n                values.push(newValue);\n                offset = newOffset;\n            });\n            return [values, offset];\n        },\n    });\n}\n\n/**\n * Creates a codec for a tuple-like array.\n *\n * @param items - The codecs to use for each item in the tuple.\n */\nexport function getTupleCodec<const TItems extends readonly FixedSizeCodec<any>[]>(\n    items: TItems,\n): FixedSizeCodec<GetEncoderTypeFromItems<TItems>, GetDecoderTypeFromItems<TItems> & GetEncoderTypeFromItems<TItems>>;\nexport function getTupleCodec<const TItems extends readonly Codec<any>[]>(\n    items: TItems,\n): VariableSizeCodec<\n    GetEncoderTypeFromItems<TItems>,\n    GetDecoderTypeFromItems<TItems> & GetEncoderTypeFromItems<TItems>\n>;\nexport function getTupleCodec<const TItems extends readonly Codec<any>[]>(\n    items: TItems,\n): Codec<GetEncoderTypeFromItems<TItems>, GetDecoderTypeFromItems<TItems> & GetEncoderTypeFromItems<TItems>> {\n    return combineCodec(\n        getTupleEncoder(items),\n        getTupleDecoder(items) as Decoder<GetDecoderTypeFromItems<TItems> & GetEncoderTypeFromItems<TItems>>,\n    );\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n    Codec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    getEncodedSize,\n    isFixedSize,\n    Offset,\n    ReadonlyUint8Array,\n} from '@solana/codecs-core';\nimport { SOLANA_ERROR__CODECS__UNION_VARIANT_OUT_OF_RANGE, SolanaError } from '@solana/errors';\n\nimport { DrainOuterGeneric, getMaxSize, maxCodecSizes } from './utils';\n\ntype GetEncoderTypeFromVariants<TVariants extends readonly Encoder<any>[]> = DrainOuterGeneric<{\n    [I in keyof TVariants]: TVariants[I] extends Encoder<infer TFrom> ? TFrom : never;\n}>[number];\n\ntype GetDecoderTypeFromVariants<TVariants extends readonly Decoder<any>[]> = DrainOuterGeneric<{\n    [I in keyof TVariants]: TVariants[I] extends Decoder<infer TFrom> ? TFrom : never;\n}>[number];\n\n/**\n * Creates a union encoder from the provided array of encoder.\n *\n * @param variants - The variant encoders of the union.\n * @param getIndexFromValue - A function that returns the index of the variant from the provided value.\n */\nexport function getUnionEncoder<const TVariants extends readonly Encoder<any>[]>(\n    variants: TVariants,\n    getIndexFromValue: (value: GetEncoderTypeFromVariants<TVariants>) => number,\n): Encoder<GetEncoderTypeFromVariants<TVariants>> {\n    type TFrom = GetEncoderTypeFromVariants<TVariants>;\n    const fixedSize = getUnionFixedSize(variants);\n    const write: Encoder<TFrom>['write'] = (variant, bytes, offset) => {\n        const index = getIndexFromValue(variant);\n        assertValidVariantIndex(variants, index);\n        return variants[index].write(variant, bytes, offset);\n    };\n\n    if (fixedSize !== null) {\n        return createEncoder({ fixedSize, write });\n    }\n\n    const maxSize = getUnionMaxSize(variants);\n    return createEncoder({\n        ...(maxSize !== null ? { maxSize } : {}),\n        getSizeFromValue: variant => {\n            const index = getIndexFromValue(variant);\n            assertValidVariantIndex(variants, index);\n            return getEncodedSize(variant, variants[index]);\n        },\n        write,\n    });\n}\n\n/**\n * Creates a union decoder from the provided array of decoder.\n *\n * @param variants - The variant decoders of the union.\n * @param getIndexFromBytes - A function that returns the index of the variant from the byte array.\n */\nexport function getUnionDecoder<const TVariants extends readonly Decoder<any>[]>(\n    variants: TVariants,\n    getIndexFromBytes: (bytes: ReadonlyUint8Array, offset: Offset) => number,\n): Decoder<GetDecoderTypeFromVariants<TVariants>> {\n    type TTo = GetDecoderTypeFromVariants<TVariants>;\n    const fixedSize = getUnionFixedSize(variants);\n    const read: Decoder<TTo>['read'] = (bytes, offset) => {\n        const index = getIndexFromBytes(bytes, offset);\n        assertValidVariantIndex(variants, index);\n        return variants[index].read(bytes, offset);\n    };\n\n    if (fixedSize !== null) {\n        return createDecoder({ fixedSize, read });\n    }\n\n    const maxSize = getUnionMaxSize(variants);\n    return createDecoder({ ...(maxSize !== null ? { maxSize } : {}), read });\n}\n\n/**\n * Creates a union codec from the provided array of codec.\n *\n * @param variants - The variant codecs of the union.\n * @param getIndexFromValue - A function that returns the index of the variant from the provided value.\n * @param getIndexFromBytes - A function that returns the index of the variant from the byte array.\n */\nexport function getUnionCodec<const TVariants extends readonly Codec<any>[]>(\n    variants: TVariants,\n    getIndexFromValue: (value: GetEncoderTypeFromVariants<TVariants>) => number,\n    getIndexFromBytes: (bytes: ReadonlyUint8Array, offset: Offset) => number,\n): Codec<\n    GetEncoderTypeFromVariants<TVariants>,\n    GetDecoderTypeFromVariants<TVariants> & GetEncoderTypeFromVariants<TVariants>\n> {\n    return combineCodec(\n        getUnionEncoder(variants, getIndexFromValue),\n        getUnionDecoder(variants, getIndexFromBytes) as Decoder<\n            GetDecoderTypeFromVariants<TVariants> & GetEncoderTypeFromVariants<TVariants>\n        >,\n    );\n}\n\nfunction assertValidVariantIndex(variants: readonly unknown[], index: number) {\n    if (typeof variants[index] === 'undefined') {\n        throw new SolanaError(SOLANA_ERROR__CODECS__UNION_VARIANT_OUT_OF_RANGE, {\n            maxRange: variants.length - 1,\n            minRange: 0,\n            variant: index,\n        });\n    }\n}\n\nfunction getUnionFixedSize<const TVariants extends readonly (Decoder<any> | Encoder<any>)[]>(variants: TVariants) {\n    if (variants.length === 0) return 0;\n    if (!isFixedSize(variants[0])) return null;\n    const variantSize = variants[0].fixedSize;\n    const sameSizedVariants = variants.every(variant => isFixedSize(variant) && variant.fixedSize === variantSize);\n    return sameSizedVariants ? variantSize : null;\n}\n\nfunction getUnionMaxSize<const TVariants extends readonly (Decoder<any> | Encoder<any>)[]>(variants: TVariants) {\n    return maxCodecSizes(variants.map(variant => getMaxSize(variant)));\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Codec, combineCodec, Decoder, Encoder, transformDecoder, transformEncoder } from '@solana/codecs-core';\nimport { getU8Decoder, getU8Encoder, NumberCodec, NumberDecoder, NumberEncoder } from '@solana/codecs-numbers';\nimport { SOLANA_ERROR__CODECS__INVALID_DISCRIMINATED_UNION_VARIANT, SolanaError } from '@solana/errors';\n\nimport { getTupleDecoder, getTupleEncoder } from './tuple';\nimport { getUnionDecoder, getUnionEncoder } from './union';\nimport { DrainOuterGeneric } from './utils';\n\n/**\n * Defines a discriminated union using discriminated union types.\n *\n * @example\n * ```ts\n * type WebPageEvent =\n *   | { __kind: 'pageview', url: string }\n *   | { __kind: 'click', x: number, y: number };\n * ```\n */\nexport type DiscriminatedUnion<\n    TDiscriminatorProperty extends string = '__kind',\n    TDiscriminatorValue extends string = string,\n> = {\n    [P in TDiscriminatorProperty]: TDiscriminatorValue;\n};\n\n/**\n * Extracts a variant from a discriminated union.\n *\n * @example\n * ```ts\n * type WebPageEvent =\n *   | { __kind: 'pageview', url: string }\n *   | { __kind: 'click', x: number, y: number };\n * type ClickEvent = GetDiscriminatedUnionVariant<WebPageEvent, '__kind', 'click'>;\n * // -> { __kind: 'click', x: number, y: number }\n * ```\n */\nexport type GetDiscriminatedUnionVariant<\n    TUnion extends DiscriminatedUnion<TDiscriminatorProperty>,\n    TDiscriminatorProperty extends string,\n    TDiscriminatorValue extends TUnion[TDiscriminatorProperty],\n> = Extract<TUnion, DiscriminatedUnion<TDiscriminatorProperty, TDiscriminatorValue>>;\n\n/**\n * Extracts a variant from a discriminated union without its discriminator.\n *\n * @example\n * ```ts\n * type WebPageEvent =\n *   | { __kind: 'pageview', url: string }\n *   | { __kind: 'click', x: number, y: number };\n * type ClickEvent = GetDiscriminatedUnionVariantContent<WebPageEvent, '__kind', 'click'>;\n * // -> { x: number, y: number }\n * ```\n */\nexport type GetDiscriminatedUnionVariantContent<\n    TUnion extends DiscriminatedUnion<TDiscriminatorProperty>,\n    TDiscriminatorProperty extends string,\n    TDiscriminatorValue extends TUnion[TDiscriminatorProperty],\n> = Omit<GetDiscriminatedUnionVariant<TUnion, TDiscriminatorProperty, TDiscriminatorValue>, TDiscriminatorProperty>;\n\n/** Defines the config for discriminated union codecs. */\nexport type DiscriminatedUnionCodecConfig<\n    TDiscriminatorProperty extends string = '__kind',\n    TDiscriminatorSize = NumberCodec | NumberDecoder | NumberEncoder,\n> = {\n    /**\n     * The property name of the discriminator.\n     * @defaultValue `__kind`.\n     */\n    discriminator?: TDiscriminatorProperty;\n    /**\n     * The codec to use for the enum discriminator prefixing the variant.\n     * @defaultValue u8 prefix.\n     */\n    size?: TDiscriminatorSize;\n};\n\ntype DiscriminatorValue = bigint | boolean | number | string | null | undefined;\ntype Variants<T> = readonly (readonly [DiscriminatorValue, T])[];\ntype ArrayIndices<T extends readonly unknown[]> = Exclude<Partial<T>['length'], T['length']> & number;\n\ntype GetEncoderTypeFromVariants<\n    TVariants extends Variants<Encoder<any>>,\n    TDiscriminatorProperty extends string,\n> = DrainOuterGeneric<{\n    [I in ArrayIndices<TVariants>]: (TVariants[I][1] extends Encoder<infer TFrom>\n        ? TFrom extends object\n            ? TFrom\n            : object\n        : never) & { [P in TDiscriminatorProperty]: TVariants[I][0] };\n}>[ArrayIndices<TVariants>];\n\ntype GetDecoderTypeFromVariants<\n    TVariants extends Variants<Decoder<any>>,\n    TDiscriminatorProperty extends string,\n> = DrainOuterGeneric<{\n    [I in ArrayIndices<TVariants>]: (TVariants[I][1] extends Decoder<infer TTo>\n        ? TTo extends object\n            ? TTo\n            : object\n        : never) & { [P in TDiscriminatorProperty]: TVariants[I][0] };\n}>[ArrayIndices<TVariants>];\n\n/**\n * Creates a discriminated union encoder.\n *\n * @param variants - The variant encoders of the discriminated union.\n * @param config - A set of config for the encoder.\n */\nexport function getDiscriminatedUnionEncoder<\n    const TVariants extends Variants<Encoder<any>>,\n    const TDiscriminatorProperty extends string = '__kind',\n>(\n    variants: TVariants,\n    config: DiscriminatedUnionCodecConfig<TDiscriminatorProperty, NumberEncoder> = {},\n): Encoder<GetEncoderTypeFromVariants<TVariants, TDiscriminatorProperty>> {\n    type TFrom = GetEncoderTypeFromVariants<TVariants, TDiscriminatorProperty>;\n    const discriminatorProperty = (config.discriminator ?? '__kind') as TDiscriminatorProperty;\n    const prefix = config.size ?? getU8Encoder();\n    return getUnionEncoder(\n        variants.map(([, variant], index) =>\n            transformEncoder(getTupleEncoder([prefix, variant]), (value: TFrom): [number, TFrom] => [index, value]),\n        ),\n        value => getVariantDiscriminator(variants, value[discriminatorProperty]),\n    );\n}\n\n/**\n * Creates a discriminated union decoder.\n *\n * @param variants - The variant decoders of the discriminated union.\n * @param config - A set of config for the decoder.\n */\nexport function getDiscriminatedUnionDecoder<\n    const TVariants extends Variants<Decoder<any>>,\n    const TDiscriminatorProperty extends string = '__kind',\n>(\n    variants: TVariants,\n    config: DiscriminatedUnionCodecConfig<TDiscriminatorProperty, NumberDecoder> = {},\n): Decoder<GetDecoderTypeFromVariants<TVariants, TDiscriminatorProperty>> {\n    const discriminatorProperty = config.discriminator ?? '__kind';\n    const prefix = config.size ?? getU8Decoder();\n    return getUnionDecoder(\n        variants.map(([discriminator, variant]) =>\n            transformDecoder(getTupleDecoder([prefix, variant]), ([, value]) => ({\n                [discriminatorProperty]: discriminator,\n                ...value,\n            })),\n        ),\n        (bytes, offset) => Number(prefix.read(bytes, offset)[0]),\n    );\n}\n\n/**\n * Creates a discriminated union codec.\n *\n * @param variants - The variant codecs of the discriminated union.\n * @param config - A set of config for the codec.\n */\nexport function getDiscriminatedUnionCodec<\n    const TVariants extends Variants<Codec<any, any>>,\n    const TDiscriminatorProperty extends string = '__kind',\n>(\n    variants: TVariants,\n    config: DiscriminatedUnionCodecConfig<TDiscriminatorProperty, NumberCodec> = {},\n): Codec<\n    GetEncoderTypeFromVariants<TVariants, TDiscriminatorProperty>,\n    GetDecoderTypeFromVariants<TVariants, TDiscriminatorProperty> &\n        GetEncoderTypeFromVariants<TVariants, TDiscriminatorProperty>\n> {\n    return combineCodec(\n        getDiscriminatedUnionEncoder(variants, config),\n        getDiscriminatedUnionDecoder(variants, config) as Decoder<\n            GetDecoderTypeFromVariants<TVariants, TDiscriminatorProperty> &\n                GetEncoderTypeFromVariants<TVariants, TDiscriminatorProperty>\n        >,\n    );\n}\n\nfunction getVariantDiscriminator<const TVariants extends Variants<Decoder<any> | Encoder<any>>>(\n    variants: TVariants,\n    discriminatorValue: DiscriminatorValue,\n) {\n    const discriminator = variants.findIndex(([key]) => discriminatorValue === key);\n    if (discriminator < 0) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_DISCRIMINATED_UNION_VARIANT, {\n            value: discriminatorValue,\n            variants: variants.map(([key]) => key),\n        });\n    }\n    return discriminator;\n}\n\n/** @deprecated Use `getDiscriminatedUnionEncoder` instead. */\nexport const getDataEnumEncoder = getDiscriminatedUnionEncoder;\n\n/** @deprecated Use `getDiscriminatedUnionDecoder` instead. */\nexport const getDataEnumDecoder = getDiscriminatedUnionDecoder;\n\n/** @deprecated Use `getDiscriminatedUnionCodec` instead. */\nexport const getDataEnumCodec = getDiscriminatedUnionCodec;\n","/**\n * Defines the \"lookup object\" of an enum.\n *\n * @example\n * ```ts\n * enum Direction { Left, Right };\n * ```\n */\nexport type EnumLookupObject = { [key: string]: number | string };\n\n/**\n * Returns the allowed input for an enum.\n *\n * @example\n * ```ts\n * enum Direction { Left, Right };\n * type DirectionInput = GetEnumFrom<Direction>; // \"Left\" | \"Right\" | 0 | 1\n * ```\n */\nexport type GetEnumFrom<TEnum extends EnumLookupObject> = TEnum[keyof TEnum] | keyof TEnum;\n\n/**\n * Returns all the available variants of an enum.\n *\n * @example\n * ```ts\n * enum Direction { Left, Right };\n * type DirectionOutput = GetEnumTo<Direction>; // 0 | 1\n * ```\n */\nexport type GetEnumTo<TEnum extends EnumLookupObject> = TEnum[keyof TEnum];\n\nexport function getEnumStats(constructor: EnumLookupObject) {\n    const numericalValues = [\n        ...new Set(Object.values(constructor).filter(v => typeof v === 'number') as number[]),\n    ].sort();\n    const enumRecord = Object.fromEntries(Object.entries(constructor).slice(numericalValues.length)) as Record<\n        string,\n        number | string\n    >;\n    const enumKeys = Object.keys(enumRecord);\n    const enumValues = Object.values(enumRecord);\n    const stringValues: string[] = [\n        ...new Set([...enumKeys, ...enumValues.filter((v): v is string => typeof v === 'string')]),\n    ];\n\n    return { enumKeys, enumRecord, enumValues, numericalValues, stringValues };\n}\n\nexport function getEnumIndexFromVariant({\n    enumKeys,\n    enumValues,\n    variant,\n}: {\n    enumKeys: string[];\n    enumValues: (number | string)[];\n    variant: number | string | symbol;\n}): number {\n    const valueIndex = findLastIndex(enumValues, value => value === variant);\n    if (valueIndex >= 0) return valueIndex;\n    return enumKeys.findIndex(key => key === variant);\n}\n\nexport function getEnumIndexFromDiscriminator({\n    discriminator,\n    enumKeys,\n    enumValues,\n    useValuesAsDiscriminators,\n}: {\n    discriminator: number;\n    enumKeys: string[];\n    enumValues: (number | string)[];\n    useValuesAsDiscriminators: boolean;\n}): number {\n    if (!useValuesAsDiscriminators) {\n        return discriminator >= 0 && discriminator < enumKeys.length ? discriminator : -1;\n    }\n    return findLastIndex(enumValues, value => value === discriminator);\n}\n\nfunction findLastIndex<T>(array: Array<T>, predicate: (value: T, index: number, obj: T[]) => boolean): number {\n    let l = array.length;\n    while (l--) {\n        if (predicate(array[l], l, array)) return l;\n    }\n    return -1;\n}\n\nexport function formatNumericalValues(values: number[]): string {\n    if (values.length === 0) return '';\n    let range: [number, number] = [values[0], values[0]];\n    const ranges: string[] = [];\n    for (let index = 1; index < values.length; index++) {\n        const value = values[index];\n        if (range[1] + 1 === value) {\n            range[1] = value;\n        } else {\n            ranges.push(range[0] === range[1] ? `${range[0]}` : `${range[0]}-${range[1]}`);\n            range = [value, value];\n        }\n    }\n    ranges.push(range[0] === range[1] ? `${range[0]}` : `${range[0]}-${range[1]}`);\n    return ranges.join(', ');\n}\n","import {\n    Codec,\n    combineCodec,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    transformDecoder,\n    transformEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport {\n    FixedSizeNumberCodec,\n    FixedSizeNumberDecoder,\n    FixedSizeNumberEncoder,\n    getU8Decoder,\n    getU8Encoder,\n    NumberCodec,\n    NumberDecoder,\n    NumberEncoder,\n} from '@solana/codecs-numbers';\nimport {\n    SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS,\n    SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE,\n    SOLANA_ERROR__CODECS__INVALID_ENUM_VARIANT,\n    SolanaError,\n} from '@solana/errors';\n\nimport {\n    EnumLookupObject,\n    formatNumericalValues,\n    GetEnumFrom,\n    getEnumIndexFromDiscriminator,\n    getEnumIndexFromVariant,\n    getEnumStats,\n    GetEnumTo,\n} from './enum-helpers';\n\n/** Defines the config for enum codecs. */\nexport type EnumCodecConfig<TDiscriminator extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * The codec to use for the enum discriminator.\n     * @defaultValue u8 discriminator.\n     */\n    size?: TDiscriminator;\n\n    /**\n     * When set to `true`, numeric values will be used as discriminantors and\n     * an error will be thrown if a string value is found on the enum.\n     * @defaultValue `false`\n     */\n    useValuesAsDiscriminators?: boolean;\n};\n\n/**\n * Creates an enum encoder.\n *\n * @param constructor - The constructor of the enum.\n * @param config - A set of config for the encoder.\n */\nexport function getEnumEncoder<TEnum extends EnumLookupObject>(\n    constructor: TEnum,\n    config?: Omit<EnumCodecConfig<NumberEncoder>, 'size'>,\n): FixedSizeEncoder<GetEnumFrom<TEnum>, 1>;\nexport function getEnumEncoder<TEnum extends EnumLookupObject, TSize extends number>(\n    constructor: TEnum,\n    config: EnumCodecConfig<NumberEncoder> & { size: FixedSizeNumberEncoder<TSize> },\n): FixedSizeEncoder<GetEnumFrom<TEnum>, TSize>;\nexport function getEnumEncoder<TEnum extends EnumLookupObject>(\n    constructor: TEnum,\n    config?: EnumCodecConfig<NumberEncoder>,\n): VariableSizeEncoder<GetEnumFrom<TEnum>>;\nexport function getEnumEncoder<TEnum extends EnumLookupObject>(\n    constructor: TEnum,\n    config: EnumCodecConfig<NumberEncoder> = {},\n): Encoder<GetEnumFrom<TEnum>> {\n    const prefix = config.size ?? getU8Encoder();\n    const useValuesAsDiscriminators = config.useValuesAsDiscriminators ?? false;\n    const { enumKeys, enumValues, numericalValues, stringValues } = getEnumStats(constructor);\n    if (useValuesAsDiscriminators && enumValues.some(value => typeof value === 'string')) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS, {\n            stringValues: enumValues.filter((v): v is string => typeof v === 'string'),\n        });\n    }\n    return transformEncoder(prefix, (variant: GetEnumFrom<TEnum>): number => {\n        const index = getEnumIndexFromVariant({ enumKeys, enumValues, variant });\n        if (index < 0) {\n            throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_ENUM_VARIANT, {\n                formattedNumericalValues: formatNumericalValues(numericalValues),\n                numericalValues,\n                stringValues,\n                variant,\n            });\n        }\n        return useValuesAsDiscriminators ? (enumValues[index] as number) : index;\n    });\n}\n\n/**\n * Creates an enum decoder.\n *\n * @param constructor - The constructor of the enum.\n * @param config - A set of config for the decoder.\n */\nexport function getEnumDecoder<TEnum extends EnumLookupObject>(\n    constructor: TEnum,\n    config?: Omit<EnumCodecConfig<NumberDecoder>, 'size'>,\n): FixedSizeDecoder<GetEnumTo<TEnum>, 1>;\nexport function getEnumDecoder<TEnum extends EnumLookupObject, TSize extends number>(\n    constructor: TEnum,\n    config: EnumCodecConfig<NumberDecoder> & { size: FixedSizeNumberDecoder<TSize> },\n): FixedSizeDecoder<GetEnumTo<TEnum>, TSize>;\nexport function getEnumDecoder<TEnum extends EnumLookupObject>(\n    constructor: TEnum,\n    config?: EnumCodecConfig<NumberDecoder>,\n): VariableSizeDecoder<GetEnumTo<TEnum>>;\nexport function getEnumDecoder<TEnum extends EnumLookupObject>(\n    constructor: TEnum,\n    config: EnumCodecConfig<NumberDecoder> = {},\n): Decoder<GetEnumTo<TEnum>> {\n    const prefix = config.size ?? getU8Decoder();\n    const useValuesAsDiscriminators = config.useValuesAsDiscriminators ?? false;\n    const { enumKeys, enumValues, numericalValues } = getEnumStats(constructor);\n    if (useValuesAsDiscriminators && enumValues.some(value => typeof value === 'string')) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS, {\n            stringValues: enumValues.filter((v): v is string => typeof v === 'string'),\n        });\n    }\n    return transformDecoder(prefix, (value: bigint | number): GetEnumTo<TEnum> => {\n        const discriminator = Number(value);\n        const index = getEnumIndexFromDiscriminator({\n            discriminator,\n            enumKeys,\n            enumValues,\n            useValuesAsDiscriminators,\n        });\n        if (index < 0) {\n            const validDiscriminators = useValuesAsDiscriminators\n                ? numericalValues\n                : [...Array(enumKeys.length).keys()];\n            throw new SolanaError(SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, {\n                discriminator,\n                formattedValidDiscriminators: formatNumericalValues(validDiscriminators),\n                validDiscriminators,\n            });\n        }\n        return enumValues[index] as GetEnumTo<TEnum>;\n    });\n}\n\n/**\n * Creates an enum codec.\n *\n * @param constructor - The constructor of the enum.\n * @param config - A set of config for the codec.\n */\nexport function getEnumCodec<TEnum extends EnumLookupObject>(\n    constructor: TEnum,\n    config?: Omit<EnumCodecConfig<NumberCodec>, 'size'>,\n): FixedSizeCodec<GetEnumFrom<TEnum>, GetEnumTo<TEnum>, 1>;\nexport function getEnumCodec<TEnum extends EnumLookupObject, TSize extends number>(\n    constructor: TEnum,\n    config: EnumCodecConfig<NumberCodec> & { size: FixedSizeNumberCodec<TSize> },\n): FixedSizeCodec<GetEnumFrom<TEnum>, GetEnumTo<TEnum>, TSize>;\nexport function getEnumCodec<TEnum extends EnumLookupObject>(\n    constructor: TEnum,\n    config?: EnumCodecConfig<NumberCodec>,\n): VariableSizeCodec<GetEnumFrom<TEnum>, GetEnumTo<TEnum>>;\nexport function getEnumCodec<TEnum extends EnumLookupObject>(\n    constructor: TEnum,\n    config: EnumCodecConfig<NumberCodec> = {},\n): Codec<GetEnumFrom<TEnum>, GetEnumTo<TEnum>> {\n    return combineCodec(getEnumEncoder(constructor, config), getEnumDecoder(constructor, config));\n}\n\n/** @deprecated Use `getEnumEncoder` instead. */\nexport const getScalarEnumEncoder = getEnumEncoder;\n\n/** @deprecated Use `getEnumDecoder` instead. */\nexport const getScalarEnumDecoder = getEnumDecoder;\n\n/** @deprecated Use `getEnumCodec` instead. */\nexport const getScalarEnumCodec = getEnumCodec;\n","import {\n    Codec,\n    combineCodec,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    transformDecoder,\n    transformEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\n\nimport { getTupleDecoder, getTupleEncoder } from './tuple';\n\n/**\n * Prefixes a given encoder with a list of void encoders.\n * All void encoders are hidden from the returned encoder.\n */\nexport function getHiddenPrefixEncoder<TFrom>(\n    encoder: FixedSizeEncoder<TFrom>,\n    prefixedEncoders: readonly FixedSizeEncoder<void>[],\n): FixedSizeEncoder<TFrom>;\nexport function getHiddenPrefixEncoder<TFrom>(\n    encoder: Encoder<TFrom>,\n    prefixedEncoders: readonly Encoder<void>[],\n): VariableSizeEncoder<TFrom>;\nexport function getHiddenPrefixEncoder<TFrom>(\n    encoder: Encoder<TFrom>,\n    prefixedEncoders: readonly Encoder<void>[],\n): Encoder<TFrom> {\n    return transformEncoder(\n        getTupleEncoder([...prefixedEncoders, encoder]) as Encoder<readonly [...void[], TFrom]>,\n        (value: TFrom) => [...prefixedEncoders.map(() => undefined), value] as const,\n    );\n}\n\n/**\n * Prefixes a given decoder with a list of void decoder.\n * All void decoder are hidden from the returned decoder.\n */\nexport function getHiddenPrefixDecoder<TTo>(\n    decoder: FixedSizeDecoder<TTo>,\n    prefixedDecoders: readonly FixedSizeDecoder<void>[],\n): FixedSizeDecoder<TTo>;\nexport function getHiddenPrefixDecoder<TTo>(\n    decoder: Decoder<TTo>,\n    prefixedDecoders: readonly Decoder<void>[],\n): VariableSizeDecoder<TTo>;\nexport function getHiddenPrefixDecoder<TTo>(\n    decoder: Decoder<TTo>,\n    prefixedDecoders: readonly Decoder<void>[],\n): Decoder<TTo> {\n    return transformDecoder(\n        getTupleDecoder([...prefixedDecoders, decoder]) as Decoder<readonly [...void[], TTo]>,\n        tuple => tuple[tuple.length - 1] as TTo,\n    );\n}\n\n/**\n * Prefixes a given codec with a list of void codec.\n * All void codec are hidden from the returned codec.\n */\nexport function getHiddenPrefixCodec<TFrom, TTo extends TFrom>(\n    codec: FixedSizeCodec<TFrom, TTo>,\n    prefixedCodecs: readonly FixedSizeCodec<void>[],\n): FixedSizeCodec<TFrom, TTo>;\nexport function getHiddenPrefixCodec<TFrom, TTo extends TFrom>(\n    codec: Codec<TFrom, TTo>,\n    prefixedCodecs: readonly Codec<void>[],\n): VariableSizeCodec<TFrom, TTo>;\nexport function getHiddenPrefixCodec<TFrom, TTo extends TFrom>(\n    codec: Codec<TFrom, TTo>,\n    prefixedCodecs: readonly Codec<void>[],\n): Codec<TFrom, TTo> {\n    return combineCodec(getHiddenPrefixEncoder(codec, prefixedCodecs), getHiddenPrefixDecoder(codec, prefixedCodecs));\n}\n","import {\n    Codec,\n    combineCodec,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    transformDecoder,\n    transformEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\n\nimport { getTupleDecoder, getTupleEncoder } from './tuple';\n\n/**\n * Suffixes a given encoder with a list of void encoders.\n * All void encoders are hidden from the returned encoder.\n */\nexport function getHiddenSuffixEncoder<TFrom>(\n    encoder: FixedSizeEncoder<TFrom>,\n    suffixedEncoders: readonly FixedSizeEncoder<void>[],\n): FixedSizeEncoder<TFrom>;\nexport function getHiddenSuffixEncoder<TFrom>(\n    encoder: Encoder<TFrom>,\n    suffixedEncoders: readonly Encoder<void>[],\n): VariableSizeEncoder<TFrom>;\nexport function getHiddenSuffixEncoder<TFrom>(\n    encoder: Encoder<TFrom>,\n    suffixedEncoders: readonly Encoder<void>[],\n): Encoder<TFrom> {\n    return transformEncoder(\n        getTupleEncoder([encoder, ...suffixedEncoders]) as Encoder<readonly [TFrom, ...void[]]>,\n        (value: TFrom) => [value, ...suffixedEncoders.map(() => undefined)] as const,\n    );\n}\n\n/**\n * Suffixes a given decoder with a list of void decoder.\n * All void decoder are hidden from the returned decoder.\n */\nexport function getHiddenSuffixDecoder<TTo>(\n    decoder: FixedSizeDecoder<TTo>,\n    suffixedDecoders: readonly FixedSizeDecoder<void>[],\n): FixedSizeDecoder<TTo>;\nexport function getHiddenSuffixDecoder<TTo>(\n    decoder: Decoder<TTo>,\n    suffixedDecoders: readonly Decoder<void>[],\n): VariableSizeDecoder<TTo>;\nexport function getHiddenSuffixDecoder<TTo>(\n    decoder: Decoder<TTo>,\n    suffixedDecoders: readonly Decoder<void>[],\n): Decoder<TTo> {\n    return transformDecoder(\n        getTupleDecoder([decoder, ...suffixedDecoders]) as Decoder<readonly [TTo, ...void[]]>,\n        tuple => tuple[0],\n    );\n}\n\n/**\n * Suffixes a given codec with a list of void codec.\n * All void codec are hidden from the returned codec.\n */\nexport function getHiddenSuffixCodec<TFrom, TTo extends TFrom>(\n    codec: FixedSizeCodec<TFrom, TTo>,\n    suffixedCodecs: readonly FixedSizeCodec<void>[],\n): FixedSizeCodec<TFrom, TTo>;\nexport function getHiddenSuffixCodec<TFrom, TTo extends TFrom>(\n    codec: Codec<TFrom, TTo>,\n    suffixedCodecs: readonly Codec<void>[],\n): VariableSizeCodec<TFrom, TTo>;\nexport function getHiddenSuffixCodec<TFrom, TTo extends TFrom>(\n    codec: Codec<TFrom, TTo>,\n    suffixedCodecs: readonly Codec<void>[],\n): Codec<TFrom, TTo> {\n    return combineCodec(getHiddenSuffixEncoder(codec, suffixedCodecs), getHiddenSuffixDecoder(codec, suffixedCodecs));\n}\n","import {\n    Codec,\n    combineCodec,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    transformDecoder,\n    transformEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport { NumberCodec, NumberDecoder, NumberEncoder } from '@solana/codecs-numbers';\n\nimport { ArrayLikeCodecSize, getArrayDecoder, getArrayEncoder } from './array';\nimport { getTupleDecoder, getTupleEncoder } from './tuple';\n\n/** Defines the config for Map codecs. */\nexport type MapCodecConfig<TPrefix extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * The size of the array.\n     * @defaultValue u32 prefix.\n     */\n    size?: ArrayLikeCodecSize<TPrefix>;\n};\n\n/**\n * Creates a encoder for a map.\n *\n * @param key - The encoder to use for the map's keys.\n * @param value - The encoder to use for the map's values.\n * @param config - A set of config for the encoder.\n */\nexport function getMapEncoder<TFromKey, TFromValue>(\n    key: Encoder<TFromKey>,\n    value: Encoder<TFromValue>,\n    config: MapCodecConfig<NumberEncoder> & { size: 0 },\n): FixedSizeEncoder<Map<TFromKey, TFromValue>, 0>;\nexport function getMapEncoder<TFromKey, TFromValue>(\n    key: FixedSizeEncoder<TFromKey>,\n    value: FixedSizeEncoder<TFromValue>,\n    config: MapCodecConfig<NumberEncoder> & { size: number },\n): FixedSizeEncoder<Map<TFromKey, TFromValue>>;\nexport function getMapEncoder<TFromKey, TFromValue>(\n    key: Encoder<TFromKey>,\n    value: Encoder<TFromValue>,\n    config?: MapCodecConfig<NumberEncoder>,\n): VariableSizeEncoder<Map<TFromKey, TFromValue>>;\nexport function getMapEncoder<TFromKey, TFromValue>(\n    key: Encoder<TFromKey>,\n    value: Encoder<TFromValue>,\n    config: MapCodecConfig<NumberEncoder> = {},\n): Encoder<Map<TFromKey, TFromValue>> {\n    return transformEncoder(\n        getArrayEncoder(getTupleEncoder([key, value]), config as object),\n        (map: Map<TFromKey, TFromValue>): [TFromKey, TFromValue][] => [...map.entries()],\n    );\n}\n\n/**\n * Creates a decoder for a map.\n *\n * @param key - The decoder to use for the map's keys.\n * @param value - The decoder to use for the map's values.\n * @param config - A set of config for the decoder.\n */\nexport function getMapDecoder<TToKey, TToValue>(\n    key: Decoder<TToKey>,\n    value: Decoder<TToValue>,\n    config: MapCodecConfig<NumberDecoder> & { size: 0 },\n): FixedSizeDecoder<Map<TToKey, TToValue>, 0>;\nexport function getMapDecoder<TToKey, TToValue>(\n    key: FixedSizeDecoder<TToKey>,\n    value: FixedSizeDecoder<TToValue>,\n    config: MapCodecConfig<NumberDecoder> & { size: number },\n): FixedSizeDecoder<Map<TToKey, TToValue>>;\nexport function getMapDecoder<TToKey, TToValue>(\n    key: Decoder<TToKey>,\n    value: Decoder<TToValue>,\n    config?: MapCodecConfig<NumberDecoder>,\n): VariableSizeDecoder<Map<TToKey, TToValue>>;\nexport function getMapDecoder<TToKey, TToValue>(\n    key: Decoder<TToKey>,\n    value: Decoder<TToValue>,\n    config: MapCodecConfig<NumberDecoder> = {},\n): Decoder<Map<TToKey, TToValue>> {\n    return transformDecoder(\n        getArrayDecoder(getTupleDecoder([key, value]), config as object) as Decoder<[TToKey, TToValue][]>,\n        (entries: [TToKey, TToValue][]): Map<TToKey, TToValue> => new Map(entries),\n    );\n}\n\n/**\n * Creates a codec for a map.\n *\n * @param key - The codec to use for the map's keys.\n * @param value - The codec to use for the map's values.\n * @param config - A set of config for the codec.\n */\nexport function getMapCodec<\n    TFromKey,\n    TFromValue,\n    TToKey extends TFromKey = TFromKey,\n    TToValue extends TFromValue = TFromValue,\n>(\n    key: Codec<TFromKey, TToKey>,\n    value: Codec<TFromValue, TToValue>,\n    config: MapCodecConfig<NumberCodec> & { size: 0 },\n): FixedSizeCodec<Map<TFromKey, TFromValue>, Map<TToKey, TToValue>, 0>;\nexport function getMapCodec<\n    TFromKey,\n    TFromValue,\n    TToKey extends TFromKey = TFromKey,\n    TToValue extends TFromValue = TFromValue,\n>(\n    key: FixedSizeCodec<TFromKey, TToKey>,\n    value: FixedSizeCodec<TFromValue, TToValue>,\n    config: MapCodecConfig<NumberCodec> & { size: number },\n): FixedSizeCodec<Map<TFromKey, TFromValue>, Map<TToKey, TToValue>>;\nexport function getMapCodec<\n    TFromKey,\n    TFromValue,\n    TToKey extends TFromKey = TFromKey,\n    TToValue extends TFromValue = TFromValue,\n>(\n    key: Codec<TFromKey, TToKey>,\n    value: Codec<TFromValue, TToValue>,\n    config?: MapCodecConfig<NumberCodec>,\n): VariableSizeCodec<Map<TFromKey, TFromValue>, Map<TToKey, TToValue>>;\nexport function getMapCodec<\n    TFromKey,\n    TFromValue,\n    TToKey extends TFromKey = TFromKey,\n    TToValue extends TFromValue = TFromValue,\n>(\n    key: Codec<TFromKey, TToKey>,\n    value: Codec<TFromValue, TToValue>,\n    config: MapCodecConfig<NumberCodec> = {},\n): Codec<Map<TFromKey, TFromValue>, Map<TToKey, TToValue>> {\n    return combineCodec(getMapEncoder(key, value, config as object), getMapDecoder(key, value, config as object));\n}\n","import {\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    ReadonlyUint8Array,\n} from '@solana/codecs-core';\n\n/**\n * Creates a void encoder.\n */\nexport function getUnitEncoder(): FixedSizeEncoder<void, 0> {\n    return createEncoder({\n        fixedSize: 0,\n        write: (_value, _bytes, offset) => offset,\n    });\n}\n\n/**\n * Creates a void decoder.\n */\nexport function getUnitDecoder(): FixedSizeDecoder<void, 0> {\n    return createDecoder({\n        fixedSize: 0,\n        read: (_bytes: ReadonlyUint8Array | Uint8Array, offset) => [undefined, offset],\n    });\n}\n\n/**\n * Creates a void codec.\n */\nexport function getUnitCodec(): FixedSizeCodec<void, void, 0> {\n    return combineCodec(getUnitEncoder(), getUnitDecoder());\n}\n","import {\n    assertIsFixedSize,\n    Codec,\n    combineCodec,\n    containsBytes,\n    Decoder,\n    Encoder,\n    fixDecoderSize,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    fixEncoderSize,\n    ReadonlyUint8Array,\n    transformDecoder,\n    transformEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport {\n    FixedSizeNumberCodec,\n    FixedSizeNumberDecoder,\n    FixedSizeNumberEncoder,\n    getU8Decoder,\n    getU8Encoder,\n    NumberCodec,\n    NumberDecoder,\n    NumberEncoder,\n} from '@solana/codecs-numbers';\n\nimport { getBooleanDecoder, getBooleanEncoder } from './boolean';\nimport { getConstantDecoder, getConstantEncoder } from './constant';\nimport { getTupleDecoder, getTupleEncoder } from './tuple';\nimport { getUnionDecoder, getUnionEncoder } from './union';\nimport { getUnitDecoder, getUnitEncoder } from './unit';\n\n/** Defines the config for nullable codecs. */\nexport type NullableCodecConfig<TPrefix extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * Defines how the `None` (or `null`) value should be represented.\n     *\n     * By default, no none value is used. This means a `null` value will be\n     * represented by the absence of the item.\n     *\n     * When `'zeroes'` is provided, a `null` value will skip the bytes that would\n     * have been used for the item. Note that this returns a fixed-size codec\n     * and thus will only work if the item codec is of fixed size.\n     *\n     * When a custom byte array is provided, a `null` value will be represented\n     * by the provided byte array. Note that this returns a variable-size codec\n     * since the byte array representing `null` does not need to match the size\n     * of the item codec.\n     *\n     * @defaultValue No none value is used.\n     */\n    noneValue?: ReadonlyUint8Array | 'zeroes';\n\n    /**\n     * The codec to use for the boolean prefix, if any.\n     *\n     * By default a `u8` number is used as a prefix to determine if the value is `null`.\n     * The value `0` is encoded for `null` and `1` if the value is present.\n     * This can be set to any number codec to customize the prefix.\n     *\n     * When `null` is provided, no prefix is used and the `noneValue` is used to\n     * determine if the value is `null`. If no `noneValue` is provided, then the\n     * absence of any bytes is used to determine if the value is `null`.\n     *\n     * @defaultValue `u8` prefix.\n     */\n    prefix?: TPrefix | null;\n};\n\n/**\n * Creates a encoder for an optional value using `null` as the `None` value.\n *\n * @param item - The encoder to use for the value that may be present.\n * @param config - A set of config for the encoder.\n */\nexport function getNullableEncoder<TFrom, TSize extends number>(\n    item: FixedSizeEncoder<TFrom, TSize>,\n    config: NullableCodecConfig<NumberEncoder> & { noneValue: 'zeroes'; prefix: null },\n): FixedSizeEncoder<TFrom | null, TSize>;\nexport function getNullableEncoder<TFrom>(\n    item: FixedSizeEncoder<TFrom>,\n    config: NullableCodecConfig<FixedSizeNumberEncoder> & { noneValue: 'zeroes' },\n): FixedSizeEncoder<TFrom | null>;\nexport function getNullableEncoder<TFrom>(\n    item: FixedSizeEncoder<TFrom>,\n    config: NullableCodecConfig<NumberEncoder> & { noneValue: 'zeroes' },\n): VariableSizeEncoder<TFrom | null>;\nexport function getNullableEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config?: NullableCodecConfig<NumberEncoder> & { noneValue?: ReadonlyUint8Array },\n): VariableSizeEncoder<TFrom | null>;\nexport function getNullableEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config: NullableCodecConfig<NumberEncoder> = {},\n): Encoder<TFrom | null> {\n    const prefix = (() => {\n        if (config.prefix === null) {\n            return transformEncoder(getUnitEncoder(), (_boolean: boolean) => undefined);\n        }\n        return getBooleanEncoder({ size: config.prefix ?? getU8Encoder() });\n    })();\n    const noneValue = (() => {\n        if (config.noneValue === 'zeroes') {\n            assertIsFixedSize(item);\n            return fixEncoderSize(getUnitEncoder(), item.fixedSize);\n        }\n        if (!config.noneValue) {\n            return getUnitEncoder();\n        }\n        return getConstantEncoder(config.noneValue);\n    })();\n\n    return getUnionEncoder(\n        [\n            transformEncoder(getTupleEncoder([prefix, noneValue]), (_value: null): [boolean, void] => [\n                false,\n                undefined,\n            ]),\n            transformEncoder(getTupleEncoder([prefix, item]), (value: TFrom): [boolean, TFrom] => [true, value]),\n        ],\n        variant => Number(variant !== null),\n    );\n}\n\n/**\n * Creates a decoder for an optional value using `null` as the `None` value.\n *\n * @param item - The decoder to use for the value that may be present.\n * @param config - A set of config for the decoder.\n */\nexport function getNullableDecoder<TTo, TSize extends number>(\n    item: FixedSizeDecoder<TTo, TSize>,\n    config: NullableCodecConfig<NumberDecoder> & { noneValue: 'zeroes'; prefix: null },\n): FixedSizeDecoder<TTo | null, TSize>;\nexport function getNullableDecoder<TTo>(\n    item: FixedSizeDecoder<TTo>,\n    config: NullableCodecConfig<FixedSizeNumberDecoder> & { noneValue: 'zeroes' },\n): FixedSizeDecoder<TTo | null>;\nexport function getNullableDecoder<TTo>(\n    item: FixedSizeDecoder<TTo>,\n    config: NullableCodecConfig<NumberDecoder> & { noneValue: 'zeroes' },\n): VariableSizeDecoder<TTo | null>;\nexport function getNullableDecoder<TTo>(\n    item: Decoder<TTo>,\n    config?: NullableCodecConfig<NumberDecoder> & { noneValue?: ReadonlyUint8Array },\n): VariableSizeDecoder<TTo | null>;\nexport function getNullableDecoder<TTo>(\n    item: Decoder<TTo>,\n    config: NullableCodecConfig<NumberDecoder> = {},\n): Decoder<TTo | null> {\n    const prefix = (() => {\n        if (config.prefix === null) {\n            return transformDecoder(getUnitDecoder(), () => false);\n        }\n        return getBooleanDecoder({ size: config.prefix ?? getU8Decoder() });\n    })();\n    const noneValue = (() => {\n        if (config.noneValue === 'zeroes') {\n            assertIsFixedSize(item);\n            return fixDecoderSize(getUnitDecoder(), item.fixedSize);\n        }\n        if (!config.noneValue) {\n            return getUnitDecoder();\n        }\n        return getConstantDecoder(config.noneValue);\n    })();\n\n    return getUnionDecoder(\n        [\n            transformDecoder(getTupleDecoder([prefix, noneValue]), () => null),\n            transformDecoder(getTupleDecoder([prefix, item]), ([, value]): TTo => value),\n        ],\n        (bytes, offset) => {\n            if (config.prefix === null && !config.noneValue) {\n                return Number(offset < bytes.length);\n            }\n            if (config.prefix === null && config.noneValue != null) {\n                const zeroValue =\n                    config.noneValue === 'zeroes' ? new Uint8Array(noneValue.fixedSize).fill(0) : config.noneValue;\n                return containsBytes(bytes, zeroValue, offset) ? 0 : 1;\n            }\n            return Number(prefix.read(bytes, offset)[0]);\n        },\n    );\n}\n\n/**\n * Creates a codec for an optional value using `null` as the `None` value.\n *\n * @param item - The codec to use for the value that may be present.\n * @param config - A set of config for the codec.\n */\nexport function getNullableCodec<TFrom, TTo extends TFrom, TSize extends number>(\n    item: FixedSizeCodec<TFrom, TTo, TSize>,\n    config: NullableCodecConfig<NumberCodec> & { noneValue: 'zeroes'; prefix: null },\n): FixedSizeCodec<TFrom | null, TTo | null, TSize>;\nexport function getNullableCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: FixedSizeCodec<TFrom, TTo>,\n    config: NullableCodecConfig<FixedSizeNumberCodec> & { noneValue: 'zeroes' },\n): FixedSizeCodec<TFrom | null, TTo | null>;\nexport function getNullableCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: FixedSizeCodec<TFrom, TTo>,\n    config: NullableCodecConfig<NumberCodec> & { noneValue: 'zeroes' },\n): VariableSizeCodec<TFrom | null, TTo | null>;\nexport function getNullableCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config?: NullableCodecConfig<NumberCodec> & { noneValue?: ReadonlyUint8Array },\n): VariableSizeCodec<TFrom | null, TTo | null>;\nexport function getNullableCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config: NullableCodecConfig<NumberCodec> = {},\n): Codec<TFrom | null, TTo | null> {\n    type ConfigCast = NullableCodecConfig<NumberCodec> & { noneValue?: ReadonlyUint8Array };\n    return combineCodec(\n        getNullableEncoder<TFrom>(item, config as ConfigCast),\n        getNullableDecoder<TTo>(item, config as ConfigCast),\n    );\n}\n","import {\n    Codec,\n    combineCodec,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    transformDecoder,\n    transformEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport { NumberCodec, NumberDecoder, NumberEncoder } from '@solana/codecs-numbers';\n\nimport { ArrayLikeCodecSize, getArrayDecoder, getArrayEncoder } from './array';\n\n/** Defines the config for set codecs. */\nexport type SetCodecConfig<TPrefix extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * The size of the set.\n     * @defaultValue u32 prefix.\n     */\n    size?: ArrayLikeCodecSize<TPrefix>;\n};\n\n/**\n * Encodes an set of items.\n *\n * @param item - The encoder to use for the set's items.\n * @param config - A set of config for the encoder.\n */\nexport function getSetEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config: SetCodecConfig<NumberEncoder> & { size: 0 },\n): FixedSizeEncoder<Set<TFrom>, 0>;\nexport function getSetEncoder<TFrom>(\n    item: FixedSizeEncoder<TFrom>,\n    config: SetCodecConfig<NumberEncoder> & { size: number },\n): FixedSizeEncoder<Set<TFrom>>;\nexport function getSetEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config?: SetCodecConfig<NumberEncoder>,\n): VariableSizeEncoder<Set<TFrom>>;\nexport function getSetEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config: SetCodecConfig<NumberEncoder> = {},\n): Encoder<Set<TFrom>> {\n    return transformEncoder(getArrayEncoder(item, config as object), (set: Set<TFrom>): TFrom[] => [...set]);\n}\n\n/**\n * Decodes an set of items.\n *\n * @param item - The encoder to use for the set's items.\n * @param config - A set of config for the encoder.\n */\nexport function getSetDecoder<TTo>(\n    item: Decoder<TTo>,\n    config: SetCodecConfig<NumberDecoder> & { size: 0 },\n): FixedSizeDecoder<Set<TTo>, 0>;\nexport function getSetDecoder<TTo>(\n    item: FixedSizeDecoder<TTo>,\n    config: SetCodecConfig<NumberDecoder> & { size: number },\n): FixedSizeDecoder<Set<TTo>>;\nexport function getSetDecoder<TTo>(\n    item: Decoder<TTo>,\n    config?: SetCodecConfig<NumberDecoder>,\n): VariableSizeDecoder<Set<TTo>>;\nexport function getSetDecoder<TTo>(item: Decoder<TTo>, config: SetCodecConfig<NumberDecoder> = {}): Decoder<Set<TTo>> {\n    return transformDecoder(getArrayDecoder(item, config as object), (entries: TTo[]): Set<TTo> => new Set(entries));\n}\n\n/**\n * Creates a codec for an set of items.\n *\n * @param item - The codec to use for the set's items.\n * @param config - A set of config for the codec.\n */\nexport function getSetCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config: SetCodecConfig<NumberCodec> & { size: 0 },\n): FixedSizeCodec<Set<TFrom>, Set<TTo>, 0>;\nexport function getSetCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: FixedSizeCodec<TFrom, TTo>,\n    config: SetCodecConfig<NumberCodec> & { size: number },\n): FixedSizeCodec<Set<TFrom>, Set<TTo>>;\nexport function getSetCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config?: SetCodecConfig<NumberCodec>,\n): VariableSizeCodec<Set<TFrom>, Set<TTo>>;\nexport function getSetCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config: SetCodecConfig<NumberCodec> = {},\n): Codec<Set<TFrom>, Set<TTo>> {\n    return combineCodec(getSetEncoder(item, config as object), getSetDecoder(item, config as object));\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n    Codec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    getEncodedSize,\n    ReadonlyUint8Array,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\n\nimport { DrainOuterGeneric, getFixedSize, getMaxSize, sumCodecSizes } from './utils';\n\ntype Fields<T> = readonly (readonly [string, T])[];\ntype ArrayIndices<T extends readonly unknown[]> = Exclude<Partial<T>['length'], T['length']> & number;\n\ntype GetEncoderTypeFromFields<TFields extends Fields<Encoder<any>>> = DrainOuterGeneric<{\n    [I in ArrayIndices<TFields> as TFields[I][0]]: TFields[I][1] extends Encoder<infer TFrom> ? TFrom : never;\n}>;\n\ntype GetDecoderTypeFromFields<TFields extends Fields<Decoder<any>>> = DrainOuterGeneric<{\n    [I in ArrayIndices<TFields> as TFields[I][0]]: TFields[I][1] extends Decoder<infer TTo> ? TTo : never;\n}>;\n\n/**\n * Creates a encoder for a custom object.\n *\n * @param fields - The name and encoder of each field.\n */\nexport function getStructEncoder<const TFields extends Fields<FixedSizeEncoder<any>>>(\n    fields: TFields,\n): FixedSizeEncoder<GetEncoderTypeFromFields<TFields>>;\nexport function getStructEncoder<const TFields extends Fields<Encoder<any>>>(\n    fields: TFields,\n): VariableSizeEncoder<GetEncoderTypeFromFields<TFields>>;\nexport function getStructEncoder<const TFields extends Fields<Encoder<any>>>(\n    fields: TFields,\n): Encoder<GetEncoderTypeFromFields<TFields>> {\n    type TFrom = GetEncoderTypeFromFields<TFields>;\n    const fieldCodecs = fields.map(([, codec]) => codec);\n    const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n    const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? undefined;\n\n    return createEncoder({\n        ...(fixedSize === null\n            ? {\n                  getSizeFromValue: (value: TFrom) =>\n                      fields\n                          .map(([key, codec]) => getEncodedSize(value[key as keyof TFrom], codec))\n                          .reduce((all, one) => all + one, 0),\n                  maxSize,\n              }\n            : { fixedSize }),\n        write: (struct: TFrom, bytes, offset) => {\n            fields.forEach(([key, codec]) => {\n                offset = codec.write(struct[key as keyof TFrom], bytes, offset);\n            });\n            return offset;\n        },\n    });\n}\n\n/**\n * Creates a decoder for a custom object.\n *\n * @param fields - The name and decoder of each field.\n */\nexport function getStructDecoder<const TFields extends Fields<FixedSizeDecoder<any>>>(\n    fields: TFields,\n): FixedSizeDecoder<GetDecoderTypeFromFields<TFields>>;\nexport function getStructDecoder<const TFields extends Fields<Decoder<any>>>(\n    fields: TFields,\n): VariableSizeDecoder<GetDecoderTypeFromFields<TFields>>;\nexport function getStructDecoder<const TFields extends Fields<Decoder<any>>>(\n    fields: TFields,\n): Decoder<GetDecoderTypeFromFields<TFields>> {\n    type TTo = GetDecoderTypeFromFields<TFields>;\n    const fieldCodecs = fields.map(([, codec]) => codec);\n    const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n    const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? undefined;\n\n    return createDecoder({\n        ...(fixedSize === null ? { maxSize } : { fixedSize }),\n        read: (bytes: ReadonlyUint8Array | Uint8Array, offset) => {\n            const struct = {} as TTo;\n            fields.forEach(([key, codec]) => {\n                const [value, newOffset] = codec.read(bytes, offset);\n                offset = newOffset;\n                struct[key as keyof TTo] = value;\n            });\n            return [struct, offset];\n        },\n    });\n}\n\n/**\n * Creates a codec for a custom object.\n *\n * @param fields - The name and codec of each field.\n */\nexport function getStructCodec<const TFields extends Fields<FixedSizeCodec<any>>>(\n    fields: TFields,\n): FixedSizeCodec<\n    GetEncoderTypeFromFields<TFields>,\n    GetDecoderTypeFromFields<TFields> & GetEncoderTypeFromFields<TFields>\n>;\nexport function getStructCodec<const TFields extends Fields<Codec<any>>>(\n    fields: TFields,\n): VariableSizeCodec<\n    GetEncoderTypeFromFields<TFields>,\n    GetDecoderTypeFromFields<TFields> & GetEncoderTypeFromFields<TFields>\n>;\nexport function getStructCodec<const TFields extends Fields<Codec<any>>>(\n    fields: TFields,\n): Codec<GetEncoderTypeFromFields<TFields>, GetDecoderTypeFromFields<TFields> & GetEncoderTypeFromFields<TFields>> {\n    return combineCodec(\n        getStructEncoder(fields),\n        getStructDecoder(fields) as Decoder<GetDecoderTypeFromFields<TFields> & GetEncoderTypeFromFields<TFields>>,\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\n// 导入 React 和必要的钩子函数\nimport React, { useEffect } from 'react';\n\n// 定义 WebSocketComponent 组件，并使用 React.memo 优化\nconst WebSocketComponent = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(({\n  onConnectionStatus,\n  account,\n  onMessageReceived\n}) => {\n  _s();\n  // 使用 useEffect 处理副作用：建立 WebSocket 连接\n  useEffect(() => {\n    // 创建 WebSocket 连接\n    const ws = new WebSocket(\"wss://api.devnet.solana.com/\");\n\n    // WebSocket 连接打开时的处理函数\n    const handleOpen = () => {\n      console.log(\"WebSocket connection opened.\");\n      onConnectionStatus(\"Connected\"); // 通知父组件连接成功\n      subscribeToAccount(ws, account); // 订阅账户\n    };\n\n    // 接收到消息时的处理函数\n    const handleMessage = ev => {\n      const parsedData = JSON.parse(ev.data.toString()); // 解析接收到的消息\n      console.log(\"Received raw data:\", parsedData); // 打印原始数据\n      let Receive_data; // 定义变量接收数据\n\n      // 检查所有可能的返回值\n      if (parsedData.method) {\n        var _parsedData$params, _parsedData$params$re, _parsedData$params$re2, _parsedData$params2, _parsedData$params2$r, _parsedData$params2$r2;\n        console.log(`Received method: ${parsedData.method}`);\n        console.log(\"lamports: \", parsedData === null || parsedData === void 0 ? void 0 : (_parsedData$params = parsedData.params) === null || _parsedData$params === void 0 ? void 0 : (_parsedData$params$re = _parsedData$params.result) === null || _parsedData$params$re === void 0 ? void 0 : (_parsedData$params$re2 = _parsedData$params$re.value) === null || _parsedData$params$re2 === void 0 ? void 0 : _parsedData$params$re2.lamports);\n        Receive_data = parsedData === null || parsedData === void 0 ? void 0 : (_parsedData$params2 = parsedData.params) === null || _parsedData$params2 === void 0 ? void 0 : (_parsedData$params2$r = _parsedData$params2.result) === null || _parsedData$params2$r === void 0 ? void 0 : (_parsedData$params2$r2 = _parsedData$params2$r.value) === null || _parsedData$params2$r2 === void 0 ? void 0 : _parsedData$params2$r2.lamports;\n        if (Receive_data !== undefined) {\n          onMessageReceived(`餘額: ${Receive_data}`); // 传递接收到的余额信息\n        }\n      }\n      if (parsedData.result) {\n        console.log(\"Result: \", parsedData.result);\n        if (parsedData.result !== undefined) {\n          onMessageReceived(`餘額: ${parsedData.result}`); // 传递接收到的余额信息\n        }\n      }\n      if (parsedData.error) {\n        console.error(\"Error: \", parsedData.error);\n        if (parsedData.error !== undefined) {\n          onMessageReceived(`餘額: ${parsedData.error}`); // 传递接收到的余额信息\n        }\n      }\n    };\n\n    // WebSocket 连接关闭时的处理函数\n    const handleClose = event => {\n      console.log(\"WebSocket connection closed: \", event);\n      onConnectionStatus(\"Disconnected\"); // 更新状态为已断开\n    };\n\n    // WebSocket 出现错误时的处理函数\n    const handleError = error => {\n      console.error(\"WebSocket error: \", error);\n      onConnectionStatus(\"Error\"); // 更新状态为错误\n    };\n\n    // 添加事件监听器\n    ws.addEventListener(\"open\", handleOpen);\n    ws.addEventListener(\"message\", handleMessage);\n    ws.addEventListener(\"close\", handleClose);\n    ws.addEventListener(\"error\", handleError);\n\n    // 组件卸载时清理 WebSocket 连接\n    return () => {\n      ws.close(); // 关闭 WebSocket 连接\n    };\n  }, [onConnectionStatus, account, onMessageReceived]); // 添加依赖项\n\n  // 订阅账户的函数\n  const subscribeToAccount = (ws, account) => {\n    const requestData = {\n      jsonrpc: \"2.0\",\n      id: 1717,\n      method: \"accountSubscribe\",\n      params: [account,\n      // 使用传入的账户地址\n      {\n        encoding: \"jsonParsed\",\n        commitment: \"finalized\" // 设置数据确认级别\n      }]\n    };\n    ws.send(JSON.stringify(requestData)); // 发送订阅请求\n  };\n\n  // 该组件不渲染任何 UI\n  return null;\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n// 导出 WebSocketComponent 组件\n_c2 = WebSocketComponent;\nexport default WebSocketComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"WebSocketComponent$React.memo\");\n$RefreshReg$(_c2, \"WebSocketComponent\");","map":{"version":3,"names":["React","useEffect","WebSocketComponent","_s","memo","_c","onConnectionStatus","account","onMessageReceived","ws","WebSocket","handleOpen","console","log","subscribeToAccount","handleMessage","ev","parsedData","JSON","parse","data","toString","Receive_data","method","_parsedData$params","_parsedData$params$re","_parsedData$params$re2","_parsedData$params2","_parsedData$params2$r","_parsedData$params2$r2","params","result","value","lamports","undefined","error","handleClose","event","handleError","addEventListener","close","requestData","jsonrpc","id","encoding","commitment","send","stringify","_c2","$RefreshReg$"],"sources":["/Users/damentp01/project/sol_track_ac/src/WebSocketComponent.js"],"sourcesContent":["// 导入 React 和必要的钩子函数\nimport React, { useEffect } from 'react';\n\n// 定义 WebSocketComponent 组件，并使用 React.memo 优化\nconst WebSocketComponent = React.memo(({ onConnectionStatus, account, onMessageReceived }) => {\n\n  // 使用 useEffect 处理副作用：建立 WebSocket 连接\n  useEffect(() => {\n    // 创建 WebSocket 连接\n    const ws = new WebSocket(\"wss://api.devnet.solana.com/\");\n\n    // WebSocket 连接打开时的处理函数\n    const handleOpen = () => {\n      console.log(\"WebSocket connection opened.\");\n      onConnectionStatus(\"Connected\"); // 通知父组件连接成功\n      subscribeToAccount(ws, account); // 订阅账户\n    };\n\n    // 接收到消息时的处理函数\n    const handleMessage = (ev) => {\n      const parsedData = JSON.parse(ev.data.toString()); // 解析接收到的消息\n      console.log(\"Received raw data:\", parsedData); // 打印原始数据\n      let Receive_data; // 定义变量接收数据\n\n      // 检查所有可能的返回值\n      if (parsedData.method) {\n        console.log(`Received method: ${parsedData.method}`);\n        console.log(\"lamports: \", parsedData?.params?.result?.value?.lamports);\n        Receive_data = parsedData?.params?.result?.value?.lamports;\n        if (Receive_data !== undefined) {\n          onMessageReceived(`餘額: ${Receive_data}`); // 传递接收到的余额信息\n        }\n      }\n      if (parsedData.result) {\n        console.log(\"Result: \", parsedData.result);\n        if (parsedData.result !== undefined) {\n            onMessageReceived(`餘額: ${parsedData.result}`); // 传递接收到的余额信息\n          }\n      }\n      if (parsedData.error) {\n        console.error(\"Error: \", parsedData.error);\n        if (parsedData.error !== undefined) {\n            onMessageReceived(`餘額: ${parsedData.error}`); // 传递接收到的余额信息\n          }\n      }\n    };\n\n    // WebSocket 连接关闭时的处理函数\n    const handleClose = (event) => {\n      console.log(\"WebSocket connection closed: \", event);\n      onConnectionStatus(\"Disconnected\"); // 更新状态为已断开\n    };\n\n    // WebSocket 出现错误时的处理函数\n    const handleError = (error) => {\n      console.error(\"WebSocket error: \", error);\n      onConnectionStatus(\"Error\"); // 更新状态为错误\n    };\n\n    // 添加事件监听器\n    ws.addEventListener(\"open\", handleOpen);\n    ws.addEventListener(\"message\", handleMessage);\n    ws.addEventListener(\"close\", handleClose);\n    ws.addEventListener(\"error\", handleError);\n\n    // 组件卸载时清理 WebSocket 连接\n    return () => {\n      ws.close(); // 关闭 WebSocket 连接\n    };\n  }, [onConnectionStatus, account, onMessageReceived]); // 添加依赖项\n\n  // 订阅账户的函数\n  const subscribeToAccount = (ws, account) => {\n    const requestData = {\n      jsonrpc: \"2.0\",\n      id: 1717,\n      method: \"accountSubscribe\",\n      params: [\n        account, // 使用传入的账户地址\n        {\n          encoding: \"jsonParsed\",\n          commitment: \"finalized\", // 设置数据确认级别\n        }, \n      ],\n    };\n    ws.send(JSON.stringify(requestData)); // 发送订阅请求\n  };\n\n  // 该组件不渲染任何 UI\n  return null;\n});\n\n// 导出 WebSocketComponent 组件\nexport default WebSocketComponent;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;;AAExC;AACA,MAAMC,kBAAkB,gBAAAC,EAAA,cAAGH,KAAK,CAACI,IAAI,CAAAC,EAAA,GAAAF,EAAA,CAAC,CAAC;EAAEG,kBAAkB;EAAEC,OAAO;EAAEC;AAAkB,CAAC,KAAK;EAAAL,EAAA;EAE5F;EACAF,SAAS,CAAC,MAAM;IACd;IACA,MAAMQ,EAAE,GAAG,IAAIC,SAAS,CAAC,8BAA8B,CAAC;;IAExD;IACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;MACvBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3CP,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;MACjCQ,kBAAkB,CAACL,EAAE,EAAEF,OAAO,CAAC,CAAC,CAAC;IACnC,CAAC;;IAED;IACA,MAAMQ,aAAa,GAAIC,EAAE,IAAK;MAC5B,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,EAAE,CAACI,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MACnDT,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEI,UAAU,CAAC,CAAC,CAAC;MAC/C,IAAIK,YAAY,CAAC,CAAC;;MAElB;MACA,IAAIL,UAAU,CAACM,MAAM,EAAE;QAAA,IAAAC,kBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,mBAAA,EAAAC,qBAAA,EAAAC,sBAAA;QACrBjB,OAAO,CAACC,GAAG,CAAC,oBAAoBI,UAAU,CAACM,MAAM,EAAE,CAAC;QACpDX,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEI,UAAU,aAAVA,UAAU,wBAAAO,kBAAA,GAAVP,UAAU,CAAEa,MAAM,cAAAN,kBAAA,wBAAAC,qBAAA,GAAlBD,kBAAA,CAAoBO,MAAM,cAAAN,qBAAA,wBAAAC,sBAAA,GAA1BD,qBAAA,CAA4BO,KAAK,cAAAN,sBAAA,uBAAjCA,sBAAA,CAAmCO,QAAQ,CAAC;QACtEX,YAAY,GAAGL,UAAU,aAAVA,UAAU,wBAAAU,mBAAA,GAAVV,UAAU,CAAEa,MAAM,cAAAH,mBAAA,wBAAAC,qBAAA,GAAlBD,mBAAA,CAAoBI,MAAM,cAAAH,qBAAA,wBAAAC,sBAAA,GAA1BD,qBAAA,CAA4BI,KAAK,cAAAH,sBAAA,uBAAjCA,sBAAA,CAAmCI,QAAQ;QAC1D,IAAIX,YAAY,KAAKY,SAAS,EAAE;UAC9B1B,iBAAiB,CAAC,OAAOc,YAAY,EAAE,CAAC,CAAC,CAAC;QAC5C;MACF;MACA,IAAIL,UAAU,CAACc,MAAM,EAAE;QACrBnB,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEI,UAAU,CAACc,MAAM,CAAC;QAC1C,IAAId,UAAU,CAACc,MAAM,KAAKG,SAAS,EAAE;UACjC1B,iBAAiB,CAAC,OAAOS,UAAU,CAACc,MAAM,EAAE,CAAC,CAAC,CAAC;QACjD;MACJ;MACA,IAAId,UAAU,CAACkB,KAAK,EAAE;QACpBvB,OAAO,CAACuB,KAAK,CAAC,SAAS,EAAElB,UAAU,CAACkB,KAAK,CAAC;QAC1C,IAAIlB,UAAU,CAACkB,KAAK,KAAKD,SAAS,EAAE;UAChC1B,iBAAiB,CAAC,OAAOS,UAAU,CAACkB,KAAK,EAAE,CAAC,CAAC,CAAC;QAChD;MACJ;IACF,CAAC;;IAED;IACA,MAAMC,WAAW,GAAIC,KAAK,IAAK;MAC7BzB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEwB,KAAK,CAAC;MACnD/B,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;IACtC,CAAC;;IAED;IACA,MAAMgC,WAAW,GAAIH,KAAK,IAAK;MAC7BvB,OAAO,CAACuB,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC7B,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/B,CAAC;;IAED;IACAG,EAAE,CAAC8B,gBAAgB,CAAC,MAAM,EAAE5B,UAAU,CAAC;IACvCF,EAAE,CAAC8B,gBAAgB,CAAC,SAAS,EAAExB,aAAa,CAAC;IAC7CN,EAAE,CAAC8B,gBAAgB,CAAC,OAAO,EAAEH,WAAW,CAAC;IACzC3B,EAAE,CAAC8B,gBAAgB,CAAC,OAAO,EAAED,WAAW,CAAC;;IAEzC;IACA,OAAO,MAAM;MACX7B,EAAE,CAAC+B,KAAK,CAAC,CAAC,CAAC,CAAC;IACd,CAAC;EACH,CAAC,EAAE,CAAClC,kBAAkB,EAAEC,OAAO,EAAEC,iBAAiB,CAAC,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAMM,kBAAkB,GAAGA,CAACL,EAAE,EAAEF,OAAO,KAAK;IAC1C,MAAMkC,WAAW,GAAG;MAClBC,OAAO,EAAE,KAAK;MACdC,EAAE,EAAE,IAAI;MACRpB,MAAM,EAAE,kBAAkB;MAC1BO,MAAM,EAAE,CACNvB,OAAO;MAAE;MACT;QACEqC,QAAQ,EAAE,YAAY;QACtBC,UAAU,EAAE,WAAW,CAAE;MAC3B,CAAC;IAEL,CAAC;IACDpC,EAAE,CAACqC,IAAI,CAAC5B,IAAI,CAAC6B,SAAS,CAACN,WAAW,CAAC,CAAC,CAAC,CAAC;EACxC,CAAC;;EAED;EACA,OAAO,IAAI;AACb,CAAC,kCAAC;;AAEF;AAAAO,GAAA,GAxFM9C,kBAAkB;AAyFxB,eAAeA,kBAAkB;AAAC,IAAAG,EAAA,EAAA2C,GAAA;AAAAC,YAAA,CAAA5C,EAAA;AAAA4C,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const syncNativeInstructionData = struct([u8('instruction')]);\n/**\r\n * Construct a SyncNative instruction\r\n *\r\n * @param account   Native account to sync lamports from\r\n * @param programId SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createSyncNativeInstruction(account, programId = TOKEN_PROGRAM_ID) {\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(syncNativeInstructionData.span);\n  syncNativeInstructionData.encode({\n    instruction: TokenInstruction.SyncNative\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\r\n * Decode a SyncNative instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\nexport function decodeSyncNativeInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== syncNativeInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account\n    },\n    data\n  } = decodeSyncNativeInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.SyncNative) throw new TokenInvalidInstructionTypeError();\n  if (!account) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account\n    },\n    data\n  };\n}\n/**\r\n * Decode a SyncNative instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\nexport function decodeSyncNativeInstructionUnchecked({\n  programId,\n  keys: [account],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      account\n    },\n    data: syncNativeInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","syncNativeInstructionData","createSyncNativeInstruction","account","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","SyncNative","decodeSyncNativeInstruction","equals","length","decodeSyncNativeInstructionUnchecked","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\syncNative.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\r\nimport { TransactionInstruction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport {\r\n    TokenInvalidInstructionDataError,\r\n    TokenInvalidInstructionKeysError,\r\n    TokenInvalidInstructionProgramError,\r\n    TokenInvalidInstructionTypeError,\r\n} from '../errors.js';\r\nimport { TokenInstruction } from './types.js';\r\n\r\n/** TODO: docs */\r\nexport interface SyncNativeInstructionData {\r\n    instruction: TokenInstruction.SyncNative;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const syncNativeInstructionData = struct<SyncNativeInstructionData>([u8('instruction')]);\r\n\r\n/**\r\n * Construct a SyncNative instruction\r\n *\r\n * @param account   Native account to sync lamports from\r\n * @param programId SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createSyncNativeInstruction(account: PublicKey, programId = TOKEN_PROGRAM_ID): TransactionInstruction {\r\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\r\n\r\n    const data = Buffer.alloc(syncNativeInstructionData.span);\r\n    syncNativeInstructionData.encode({ instruction: TokenInstruction.SyncNative }, data);\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\n/** A decoded, valid SyncNative instruction */\r\nexport interface DecodedSyncNativeInstruction {\r\n    programId: PublicKey;\r\n    keys: {\r\n        account: AccountMeta;\r\n    };\r\n    data: {\r\n        instruction: TokenInstruction.SyncNative;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a SyncNative instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\r\nexport function decodeSyncNativeInstruction(\r\n    instruction: TransactionInstruction,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): DecodedSyncNativeInstruction {\r\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\r\n    if (instruction.data.length !== syncNativeInstructionData.span) throw new TokenInvalidInstructionDataError();\r\n\r\n    const {\r\n        keys: { account },\r\n        data,\r\n    } = decodeSyncNativeInstructionUnchecked(instruction);\r\n    if (data.instruction !== TokenInstruction.SyncNative) throw new TokenInvalidInstructionTypeError();\r\n    if (!account) throw new TokenInvalidInstructionKeysError();\r\n\r\n    // TODO: key checks?\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            account,\r\n        },\r\n        data,\r\n    };\r\n}\r\n\r\n/** A decoded, non-validated SyncNative instruction */\r\nexport interface DecodedSyncNativeInstructionUnchecked {\r\n    programId: PublicKey;\r\n    keys: {\r\n        account: AccountMeta | undefined;\r\n    };\r\n    data: {\r\n        instruction: number;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a SyncNative instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\r\nexport function decodeSyncNativeInstructionUnchecked({\r\n    programId,\r\n    keys: [account],\r\n    data,\r\n}: TransactionInstruction): DecodedSyncNativeInstructionUnchecked {\r\n    return {\r\n        programId,\r\n        keys: {\r\n            account,\r\n        },\r\n        data: syncNativeInstructionData.decode(data),\r\n    };\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,gBAAgB,QAAQ,YAAY;AAO7C;AACA,OAAO,MAAMC,yBAAyB,GAAGT,MAAM,CAA4B,CAACC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;AAE/F;;;;;;;;AAQA,OAAM,SAAUS,2BAA2BA,CAACC,OAAkB,EAAEC,SAAS,GAAGT,gBAAgB;EACxF,MAAMU,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEH,OAAO;IAAEI,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAErE,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACV,yBAAyB,CAACW,IAAI,CAAC;EACzDX,yBAAyB,CAACY,MAAM,CAAC;IAAEC,WAAW,EAAEd,gBAAgB,CAACe;EAAU,CAAE,EAAEN,IAAI,CAAC;EAEpF,OAAO,IAAIf,sBAAsB,CAAC;IAAEW,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAaA;;;;;;;;AAQA,OAAM,SAAUO,2BAA2BA,CACvCF,WAAmC,EACnCV,SAAS,GAAGT,gBAAgB;EAE5B,IAAI,CAACmB,WAAW,CAACV,SAAS,CAACa,MAAM,CAACb,SAAS,CAAC,EAAE,MAAM,IAAIN,mCAAmC,EAAE;EAC7F,IAAIgB,WAAW,CAACL,IAAI,CAACS,MAAM,KAAKjB,yBAAyB,CAACW,IAAI,EAAE,MAAM,IAAIhB,gCAAgC,EAAE;EAE5G,MAAM;IACFS,IAAI,EAAE;MAAEF;IAAO,CAAE;IACjBM;EAAI,CACP,GAAGU,oCAAoC,CAACL,WAAW,CAAC;EACrD,IAAIL,IAAI,CAACK,WAAW,KAAKd,gBAAgB,CAACe,UAAU,EAAE,MAAM,IAAIhB,gCAAgC,EAAE;EAClG,IAAI,CAACI,OAAO,EAAE,MAAM,IAAIN,gCAAgC,EAAE;EAE1D;EAEA,OAAO;IACHO,SAAS;IACTC,IAAI,EAAE;MACFF;KACH;IACDM;GACH;AACL;AAaA;;;;;;;AAOA,OAAM,SAAUU,oCAAoCA,CAAC;EACjDf,SAAS;EACTC,IAAI,EAAE,CAACF,OAAO,CAAC;EACfM;AAAI,CACiB;EACrB,OAAO;IACHL,SAAS;IACTC,IAAI,EAAE;MACFF;KACH;IACDM,IAAI,EAAER,yBAAyB,CAACmB,MAAM,CAACX,IAAI;GAC9C;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializePermanentDelegateInstructionData = struct([u8('instruction'), publicKey('delegate')]);\n/**\r\n * Construct an InitializePermanentDelegate instruction\r\n *\r\n * @param mint               Token mint account\r\n * @param permanentDelegate  Authority that may sign for `Transfer`s and `Burn`s on any account\r\n * @param programId          SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createInitializePermanentDelegateInstruction(mint, permanentDelegate, programId) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(initializePermanentDelegateInstructionData.span);\n  initializePermanentDelegateInstructionData.encode({\n    instruction: TokenInstruction.InitializePermanentDelegate,\n    delegate: permanentDelegate || new PublicKey(0)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\r\n * Decode an InitializePermanentDelegate instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\nexport function decodeInitializePermanentDelegateInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializePermanentDelegateInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint\n    },\n    data\n  } = decodeInitializePermanentDelegateInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializePermanentDelegate) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data\n  };\n}\n/**\r\n * Decode an InitializePermanentDelegate instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\nexport function decodeInitializePermanentDelegateInstructionUnchecked({\n  programId,\n  keys: [mint],\n  data\n}) {\n  const {\n    instruction,\n    delegate\n  } = initializePermanentDelegateInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data: {\n      instruction,\n      delegate\n    }\n  };\n}","map":{"version":3,"names":["struct","u8","publicKey","PublicKey","TransactionInstruction","programSupportsExtensions","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenUnsupportedInstructionError","TokenInstruction","initializePermanentDelegateInstructionData","createInitializePermanentDelegateInstruction","mint","permanentDelegate","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","InitializePermanentDelegate","delegate","decodeInitializePermanentDelegateInstruction","equals","length","decodeInitializePermanentDelegateInstructionUnchecked","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\initializePermanentDelegate.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport { publicKey } from '@solana/buffer-layout-utils';\r\nimport type { AccountMeta } from '@solana/web3.js';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { TransactionInstruction } from '@solana/web3.js';\r\nimport { programSupportsExtensions } from '../constants.js';\r\nimport {\r\n    TokenInvalidInstructionDataError,\r\n    TokenInvalidInstructionKeysError,\r\n    TokenInvalidInstructionProgramError,\r\n    TokenInvalidInstructionTypeError,\r\n    TokenUnsupportedInstructionError,\r\n} from '../errors.js';\r\nimport { TokenInstruction } from './types.js';\r\n\r\n/** TODO: docs */\r\nexport interface InitializePermanentDelegateInstructionData {\r\n    instruction: TokenInstruction.InitializePermanentDelegate;\r\n    delegate: PublicKey;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const initializePermanentDelegateInstructionData = struct<InitializePermanentDelegateInstructionData>([\r\n    u8('instruction'),\r\n    publicKey('delegate'),\r\n]);\r\n\r\n/**\r\n * Construct an InitializePermanentDelegate instruction\r\n *\r\n * @param mint               Token mint account\r\n * @param permanentDelegate  Authority that may sign for `Transfer`s and `Burn`s on any account\r\n * @param programId          SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createInitializePermanentDelegateInstruction(\r\n    mint: PublicKey,\r\n    permanentDelegate: PublicKey | null,\r\n    programId: PublicKey,\r\n): TransactionInstruction {\r\n    if (!programSupportsExtensions(programId)) {\r\n        throw new TokenUnsupportedInstructionError();\r\n    }\r\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\r\n\r\n    const data = Buffer.alloc(initializePermanentDelegateInstructionData.span);\r\n    initializePermanentDelegateInstructionData.encode(\r\n        {\r\n            instruction: TokenInstruction.InitializePermanentDelegate,\r\n            delegate: permanentDelegate || new PublicKey(0),\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\n/** A decoded, valid InitializePermanentDelegate instruction */\r\nexport interface DecodedInitializePermanentDelegateInstruction {\r\n    programId: PublicKey;\r\n    keys: {\r\n        mint: AccountMeta;\r\n    };\r\n    data: {\r\n        instruction: TokenInstruction.InitializePermanentDelegate;\r\n        delegate: PublicKey | null;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode an InitializePermanentDelegate instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\r\nexport function decodeInitializePermanentDelegateInstruction(\r\n    instruction: TransactionInstruction,\r\n    programId: PublicKey,\r\n): DecodedInitializePermanentDelegateInstruction {\r\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\r\n    if (instruction.data.length !== initializePermanentDelegateInstructionData.span)\r\n        throw new TokenInvalidInstructionDataError();\r\n\r\n    const {\r\n        keys: { mint },\r\n        data,\r\n    } = decodeInitializePermanentDelegateInstructionUnchecked(instruction);\r\n    if (data.instruction !== TokenInstruction.InitializePermanentDelegate) throw new TokenInvalidInstructionTypeError();\r\n    if (!mint) throw new TokenInvalidInstructionKeysError();\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            mint,\r\n        },\r\n        data,\r\n    };\r\n}\r\n\r\n/** A decoded, non-validated InitializePermanentDelegate instruction */\r\nexport interface DecodedInitializePermanentDelegateInstructionUnchecked {\r\n    programId: PublicKey;\r\n    keys: {\r\n        mint: AccountMeta | undefined;\r\n    };\r\n    data: {\r\n        instruction: number;\r\n        delegate: PublicKey | null;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode an InitializePermanentDelegate instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\r\nexport function decodeInitializePermanentDelegateInstructionUnchecked({\r\n    programId,\r\n    keys: [mint],\r\n    data,\r\n}: TransactionInstruction): DecodedInitializePermanentDelegateInstructionUnchecked {\r\n    const { instruction, delegate } = initializePermanentDelegateInstructionData.decode(data);\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            mint,\r\n        },\r\n        data: {\r\n            instruction,\r\n            delegate,\r\n        },\r\n    };\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAClD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,yBAAyB,QAAQ,iBAAiB;AAC3D,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,EAChCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,gBAAgB,QAAQ,YAAY;AAQ7C;AACA,OAAO,MAAMC,0CAA0C,GAAGZ,MAAM,CAA6C,CACzGC,EAAE,CAAC,aAAa,CAAC,EACjBC,SAAS,CAAC,UAAU,CAAC,CACxB,CAAC;AAEF;;;;;;;;;AASA,OAAM,SAAUW,4CAA4CA,CACxDC,IAAe,EACfC,iBAAmC,EACnCC,SAAoB;EAEpB,IAAI,CAACX,yBAAyB,CAACW,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIN,gCAAgC,EAAE;EAChD;EACA,MAAMO,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEJ,IAAI;IAAEK,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAElE,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACX,0CAA0C,CAACY,IAAI,CAAC;EAC1EZ,0CAA0C,CAACa,MAAM,CAC7C;IACIC,WAAW,EAAEf,gBAAgB,CAACgB,2BAA2B;IACzDC,QAAQ,EAAEb,iBAAiB,IAAI,IAAIZ,SAAS,CAAC,CAAC;GACjD,EACDkB,IAAI,CACP;EAED,OAAO,IAAIjB,sBAAsB,CAAC;IAAEa,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAcA;;;;;;;;AAQA,OAAM,SAAUQ,4CAA4CA,CACxDH,WAAmC,EACnCV,SAAoB;EAEpB,IAAI,CAACU,WAAW,CAACV,SAAS,CAACc,MAAM,CAACd,SAAS,CAAC,EAAE,MAAM,IAAIR,mCAAmC,EAAE;EAC7F,IAAIkB,WAAW,CAACL,IAAI,CAACU,MAAM,KAAKnB,0CAA0C,CAACY,IAAI,EAC3E,MAAM,IAAIlB,gCAAgC,EAAE;EAEhD,MAAM;IACFW,IAAI,EAAE;MAAEH;IAAI,CAAE;IACdO;EAAI,CACP,GAAGW,qDAAqD,CAACN,WAAW,CAAC;EACtE,IAAIL,IAAI,CAACK,WAAW,KAAKf,gBAAgB,CAACgB,2BAA2B,EAAE,MAAM,IAAIlB,gCAAgC,EAAE;EACnH,IAAI,CAACK,IAAI,EAAE,MAAM,IAAIP,gCAAgC,EAAE;EAEvD,OAAO;IACHS,SAAS;IACTC,IAAI,EAAE;MACFH;KACH;IACDO;GACH;AACL;AAcA;;;;;;;AAOA,OAAM,SAAUW,qDAAqDA,CAAC;EAClEhB,SAAS;EACTC,IAAI,EAAE,CAACH,IAAI,CAAC;EACZO;AAAI,CACiB;EACrB,MAAM;IAAEK,WAAW;IAAEE;EAAQ,CAAE,GAAGhB,0CAA0C,CAACqB,MAAM,CAACZ,IAAI,CAAC;EAEzF,OAAO;IACHL,SAAS;IACTC,IAAI,EAAE;MACFH;KACH;IACDO,IAAI,EAAE;MACFK,WAAW;MACXE;;GAEP;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const transferCheckedInstructionData = struct([u8('instruction'), u64('amount'), u8('decimals')]);\n/**\r\n * Construct a TransferChecked instruction\r\n *\r\n * @param source       Source account\r\n * @param mint         Mint account\r\n * @param destination  Destination account\r\n * @param owner        Owner of the source account\r\n * @param amount       Number of tokens to transfer\r\n * @param decimals     Number of decimals in transfer amount\r\n * @param multiSigners Signing accounts if `owner` is a multisig\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createTransferCheckedInstruction(source, mint, destination, owner, amount, decimals, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n  const keys = addSigners([{\n    pubkey: source,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(transferCheckedInstructionData.span);\n  transferCheckedInstructionData.encode({\n    instruction: TokenInstruction.TransferChecked,\n    amount: BigInt(amount),\n    decimals\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\r\n * Decode a TransferChecked instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\nexport function decodeTransferCheckedInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== transferCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      source,\n      mint,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeTransferCheckedInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.TransferChecked) throw new TokenInvalidInstructionTypeError();\n  if (!source || !mint || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      source,\n      mint,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\r\n * Decode a TransferChecked instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\nexport function decodeTransferCheckedInstructionUnchecked({\n  programId,\n  keys: [source, mint, destination, owner, ...multiSigners],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      source,\n      mint,\n      destination,\n      owner,\n      multiSigners\n    },\n    data: transferCheckedInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","transferCheckedInstructionData","createTransferCheckedInstruction","source","mint","destination","owner","amount","decimals","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","TransferChecked","BigInt","decodeTransferCheckedInstruction","equals","length","decodeTransferCheckedInstructionUnchecked","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\transferChecked.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport { u64 } from '@solana/buffer-layout-utils';\r\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\r\nimport { TransactionInstruction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport {\r\n    TokenInvalidInstructionDataError,\r\n    TokenInvalidInstructionKeysError,\r\n    TokenInvalidInstructionProgramError,\r\n    TokenInvalidInstructionTypeError,\r\n} from '../errors.js';\r\nimport { addSigners } from './internal.js';\r\nimport { TokenInstruction } from './types.js';\r\n\r\n/** TODO: docs */\r\nexport interface TransferCheckedInstructionData {\r\n    instruction: TokenInstruction.TransferChecked;\r\n    amount: bigint;\r\n    decimals: number;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const transferCheckedInstructionData = struct<TransferCheckedInstructionData>([\r\n    u8('instruction'),\r\n    u64('amount'),\r\n    u8('decimals'),\r\n]);\r\n\r\n/**\r\n * Construct a TransferChecked instruction\r\n *\r\n * @param source       Source account\r\n * @param mint         Mint account\r\n * @param destination  Destination account\r\n * @param owner        Owner of the source account\r\n * @param amount       Number of tokens to transfer\r\n * @param decimals     Number of decimals in transfer amount\r\n * @param multiSigners Signing accounts if `owner` is a multisig\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createTransferCheckedInstruction(\r\n    source: PublicKey,\r\n    mint: PublicKey,\r\n    destination: PublicKey,\r\n    owner: PublicKey,\r\n    amount: number | bigint,\r\n    decimals: number,\r\n    multiSigners: (Signer | PublicKey)[] = [],\r\n    programId = TOKEN_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    const keys = addSigners(\r\n        [\r\n            { pubkey: source, isSigner: false, isWritable: true },\r\n            { pubkey: mint, isSigner: false, isWritable: false },\r\n            { pubkey: destination, isSigner: false, isWritable: true },\r\n        ],\r\n        owner,\r\n        multiSigners,\r\n    );\r\n\r\n    const data = Buffer.alloc(transferCheckedInstructionData.span);\r\n    transferCheckedInstructionData.encode(\r\n        {\r\n            instruction: TokenInstruction.TransferChecked,\r\n            amount: BigInt(amount),\r\n            decimals,\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\n/** A decoded, valid TransferChecked instruction */\r\nexport interface DecodedTransferCheckedInstruction {\r\n    programId: PublicKey;\r\n    keys: {\r\n        source: AccountMeta;\r\n        mint: AccountMeta;\r\n        destination: AccountMeta;\r\n        owner: AccountMeta;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: TokenInstruction.TransferChecked;\r\n        amount: bigint;\r\n        decimals: number;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a TransferChecked instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\r\nexport function decodeTransferCheckedInstruction(\r\n    instruction: TransactionInstruction,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): DecodedTransferCheckedInstruction {\r\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\r\n    if (instruction.data.length !== transferCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\r\n\r\n    const {\r\n        keys: { source, mint, destination, owner, multiSigners },\r\n        data,\r\n    } = decodeTransferCheckedInstructionUnchecked(instruction);\r\n    if (data.instruction !== TokenInstruction.TransferChecked) throw new TokenInvalidInstructionTypeError();\r\n    if (!source || !mint || !destination || !owner) throw new TokenInvalidInstructionKeysError();\r\n\r\n    // TODO: key checks?\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            source,\r\n            mint,\r\n            destination,\r\n            owner,\r\n            multiSigners,\r\n        },\r\n        data,\r\n    };\r\n}\r\n\r\n/** A decoded, non-validated TransferChecked instruction */\r\nexport interface DecodedTransferCheckedInstructionUnchecked {\r\n    programId: PublicKey;\r\n    keys: {\r\n        source: AccountMeta | undefined;\r\n        mint: AccountMeta | undefined;\r\n        destination: AccountMeta | undefined;\r\n        owner: AccountMeta | undefined;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: number;\r\n        amount: bigint;\r\n        decimals: number;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a TransferChecked instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\r\nexport function decodeTransferCheckedInstructionUnchecked({\r\n    programId,\r\n    keys: [source, mint, destination, owner, ...multiSigners],\r\n    data,\r\n}: TransactionInstruction): DecodedTransferCheckedInstructionUnchecked {\r\n    return {\r\n        programId,\r\n        keys: {\r\n            source,\r\n            mint,\r\n            destination,\r\n            owner,\r\n            multiSigners,\r\n        },\r\n        data: transferCheckedInstructionData.decode(data),\r\n    };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nconst WebSocketComponent = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(({\n  onConnectionStatus,\n  account,\n  onMessageReceived,\n  onConnectionResult\n}) => {\n  _s();\n  const hasEffectRun = useRef(false);\n  const connectionRef = useRef(null);\n  const subscriptionIdRef = useRef(null);\n  useEffect(() => {\n    if (hasEffectRun.current) return;\n    hasEffectRun.current = true;\n    const RPC_ENDPOINT = process.env.REACT_APP_RPC_ENDPOINT;\n    const WS_ENDPOINT = process.env.REACT_APP_WS_ENDPOINT;\n    if (!RPC_ENDPOINT || !WS_ENDPOINT) {\n      console.error('RPC_ENDPOINT or WS_ENDPOINT is not defined in .env file.');\n      onConnectionStatus('Error');\n      return;\n    }\n\n    // 创建并存储连接\n    const connection = new Connection(RPC_ENDPOINT, {\n      commitment: 'confirmed',\n      wsEndpoint: WS_ENDPOINT\n    });\n    connectionRef.current = connection;\n\n    // 将账户地址转换为 PublicKey 对象\n    const publicKey = new PublicKey(account);\n\n    // 设置初始连接状态为 \"Connecting\"\n    onConnectionStatus('Connecting');\n\n    // 订阅账户变化\n    const subscribe = async () => {\n      try {\n        const subscriptionId = await connection.onAccountChange(publicKey, (accountInfo, context) => {\n          // 处理账户信息更新\n          const lamports = accountInfo.lamports;\n          console.log('Updated account info:', accountInfo);\n          console.log('Slot:', context.slot);\n          if (lamports !== undefined) {\n            balance = lamports / 1000000000;\n            onMessageReceived(`余额: ${lamports} $SOL`);\n          }\n          onConnectionResult(`Slot: ${context.slot}`);\n        }, 'finalized');\n        subscriptionIdRef.current = subscriptionId;\n\n        // 订阅成功，更新连接状态为 \"Connected\"\n        onConnectionStatus('Connected');\n      } catch (error) {\n        console.error('Subscription error:', error);\n        onConnectionStatus('Error');\n      }\n    };\n    subscribe();\n\n    // 组件卸载时取消订阅\n    return () => {\n      if (connectionRef.current && subscriptionIdRef.current !== null) {\n        connectionRef.current.removeAccountChangeListener(subscriptionIdRef.current).then(() => {\n          console.log('Account change listener removed.');\n          onConnectionStatus('Disconnected');\n        }).catch(error => {\n          console.error('Error removing account change listener:', error);\n        });\n      }\n    };\n  }, [onConnectionStatus, account, onMessageReceived, onConnectionResult]);\n  return null;\n}, \"XBuaGg3+G7LmJENFV3XMQqlkFWQ=\")), \"XBuaGg3+G7LmJENFV3XMQqlkFWQ=\");\n_c2 = WebSocketComponent;\nexport default WebSocketComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"WebSocketComponent$React.memo\");\n$RefreshReg$(_c2, \"WebSocketComponent\");","map":{"version":3,"names":["React","useEffect","useRef","Connection","PublicKey","WebSocketComponent","_s","memo","_c","onConnectionStatus","account","onMessageReceived","onConnectionResult","hasEffectRun","connectionRef","subscriptionIdRef","current","RPC_ENDPOINT","process","env","REACT_APP_RPC_ENDPOINT","WS_ENDPOINT","REACT_APP_WS_ENDPOINT","console","error","connection","commitment","wsEndpoint","publicKey","subscribe","subscriptionId","onAccountChange","accountInfo","context","lamports","log","slot","undefined","balance","removeAccountChangeListener","then","catch","_c2","$RefreshReg$"],"sources":["/Users/damentp01/project/sol_track_ac/src/WebSocketComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\n\nconst WebSocketComponent = React.memo(({ onConnectionStatus, account, onMessageReceived, onConnectionResult }) => {\n  const hasEffectRun = useRef(false);\n  const connectionRef = useRef(null);\n  const subscriptionIdRef = useRef(null);\n\n  useEffect(() => {\n    if (hasEffectRun.current) return;\n    hasEffectRun.current = true;\n\n    const RPC_ENDPOINT = process.env.REACT_APP_RPC_ENDPOINT;\n    const WS_ENDPOINT = process.env.REACT_APP_WS_ENDPOINT;\n\n    if (!RPC_ENDPOINT || !WS_ENDPOINT) {\n      console.error('RPC_ENDPOINT or WS_ENDPOINT is not defined in .env file.');\n      onConnectionStatus('Error');\n      return;\n    }\n\n    // 创建并存储连接\n    const connection = new Connection(RPC_ENDPOINT, {\n      commitment: 'confirmed',\n      wsEndpoint: WS_ENDPOINT,\n    });\n    connectionRef.current = connection;\n\n    // 将账户地址转换为 PublicKey 对象\n    const publicKey = new PublicKey(account);\n\n    // 设置初始连接状态为 \"Connecting\"\n    onConnectionStatus('Connecting');\n\n    // 订阅账户变化\n    const subscribe = async () => {\n      try {\n        const subscriptionId = await connection.onAccountChange(\n          publicKey,\n          (accountInfo, context) => {\n            // 处理账户信息更新\n            const lamports = accountInfo.lamports;\n            console.log('Updated account info:', accountInfo);\n            console.log('Slot:', context.slot);\n\n            if (lamports !== undefined) {\n              balance = lamports/1000000000\n              onMessageReceived(`余额: ${lamports} $SOL`);\n            }\n\n            onConnectionResult(`Slot: ${context.slot}`);\n          },\n          'finalized'\n        );\n        subscriptionIdRef.current = subscriptionId;\n\n        // 订阅成功，更新连接状态为 \"Connected\"\n        onConnectionStatus('Connected');\n      } catch (error) {\n        console.error('Subscription error:', error);\n        onConnectionStatus('Error');\n      }\n    };\n\n    subscribe();\n\n    // 组件卸载时取消订阅\n    return () => {\n      if (connectionRef.current && subscriptionIdRef.current !== null) {\n        connectionRef.current.removeAccountChangeListener(subscriptionIdRef.current)\n          .then(() => {\n            console.log('Account change listener removed.');\n            onConnectionStatus('Disconnected');\n          })\n          .catch((error) => {\n            console.error('Error removing account change listener:', error);\n          });\n      }\n    };\n  }, [onConnectionStatus, account, onMessageReceived, onConnectionResult]);\n\n  return null;\n});\n\nexport default WebSocketComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n  return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.alloc(0), programId, associatedTokenProgramId);\n}\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstruction(payer, associatedToken, owner, mint, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n  return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.from([1]), programId, associatedTokenProgramId);\n}\n/**\n * Derive the associated token account and construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstructionWithDerivation(payer, owner, mint, allowOwnerOffCurve = true, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n  const associatedToken = getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve);\n  return createAssociatedTokenAccountIdempotentInstruction(payer, associatedToken, owner, mint, programId, associatedTokenProgramId);\n}\nfunction buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, instructionData, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedToken,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new TransactionInstruction({\n    keys,\n    programId: associatedTokenProgramId,\n    data: instructionData\n  });\n}\n/**\n * Construct a RecoverNested instruction\n *\n * @param nestedAssociatedToken             Nested associated token account (must be owned by `ownerAssociatedToken`)\n * @param nestedMint                        Token mint for the nested associated token account\n * @param destinationAssociatedToken        Wallet's associated token account\n * @param ownerAssociatedToken              Owner associated token account address (must be owned by `owner`)\n * @param ownerMint                         Token mint for the owner associated token account\n * @param owner                             Wallet address for the owner associated token account\n * @param programId                         SPL Token program account\n * @param associatedTokenProgramId          SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRecoverNestedInstruction(nestedAssociatedToken, nestedMint, destinationAssociatedToken, ownerAssociatedToken, ownerMint, owner, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n  const keys = [{\n    pubkey: nestedAssociatedToken,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: nestedMint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: destinationAssociatedToken,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: ownerAssociatedToken,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: ownerMint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: owner,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new TransactionInstruction({\n    keys,\n    programId: associatedTokenProgramId,\n    data: Buffer.from([2])\n  });\n}","map":{"version":3,"names":["SystemProgram","TransactionInstruction","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","getAssociatedTokenAddressSync","createAssociatedTokenAccountInstruction","payer","associatedToken","owner","mint","programId","associatedTokenProgramId","buildAssociatedTokenAccountInstruction","Buffer","alloc","createAssociatedTokenAccountIdempotentInstruction","from","createAssociatedTokenAccountIdempotentInstructionWithDerivation","allowOwnerOffCurve","instructionData","keys","pubkey","isSigner","isWritable","data","createRecoverNestedInstruction","nestedAssociatedToken","nestedMint","destinationAssociatedToken","ownerAssociatedToken","ownerMint"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/instructions/associatedTokenAccount.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.alloc(0),\n        programId,\n        associatedTokenProgramId,\n    );\n}\n\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.from([1]),\n        programId,\n        associatedTokenProgramId,\n    );\n}\n\n/**\n * Derive the associated token account and construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstructionWithDerivation(\n    payer: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    allowOwnerOffCurve = true,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n) {\n    const associatedToken = getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve);\n\n    return createAssociatedTokenAccountIdempotentInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        programId,\n        associatedTokenProgramId,\n    );\n}\n\nfunction buildAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    instructionData: Buffer,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: instructionData,\n    });\n}\n\n/**\n * Construct a RecoverNested instruction\n *\n * @param nestedAssociatedToken             Nested associated token account (must be owned by `ownerAssociatedToken`)\n * @param nestedMint                        Token mint for the nested associated token account\n * @param destinationAssociatedToken        Wallet's associated token account\n * @param ownerAssociatedToken              Owner associated token account address (must be owned by `owner`)\n * @param ownerMint                         Token mint for the owner associated token account\n * @param owner                             Wallet address for the owner associated token account\n * @param programId                         SPL Token program account\n * @param associatedTokenProgramId          SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRecoverNestedInstruction(\n    nestedAssociatedToken: PublicKey,\n    nestedMint: PublicKey,\n    destinationAssociatedToken: PublicKey,\n    ownerAssociatedToken: PublicKey,\n    ownerMint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n    const keys = [\n        { pubkey: nestedAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: nestedMint, isSigner: false, isWritable: false },\n        { pubkey: destinationAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerMint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: true, isWritable: true },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: Buffer.from([2]),\n    });\n}\n"],"mappings":"AACA,SAASA,aAAa,EAAEC,sBAAsB,QAAQ,iBAAiB;AACvE,SAASC,2BAA2B,EAAEC,gBAAgB,QAAQ,iBAAiB;AAC/E,SAASC,6BAA6B,QAAQ,kBAAkB;AAEhE;;;;;;;;;;;;AAYA,OAAM,SAAUC,uCAAuCA,CACnDC,KAAgB,EAChBC,eAA0B,EAC1BC,KAAgB,EAChBC,IAAe,EACfC,SAAS,GAAGP,gBAAgB,EAC5BQ,wBAAwB,GAAGT,2BAA2B;EAEtD,OAAOU,sCAAsC,CACzCN,KAAK,EACLC,eAAe,EACfC,KAAK,EACLC,IAAI,EACJI,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EACfJ,SAAS,EACTC,wBAAwB,CAC3B;AACL;AAEA;;;;;;;;;;;;AAYA,OAAM,SAAUI,iDAAiDA,CAC7DT,KAAgB,EAChBC,eAA0B,EAC1BC,KAAgB,EAChBC,IAAe,EACfC,SAAS,GAAGP,gBAAgB,EAC5BQ,wBAAwB,GAAGT,2BAA2B;EAEtD,OAAOU,sCAAsC,CACzCN,KAAK,EACLC,eAAe,EACfC,KAAK,EACLC,IAAI,EACJI,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAChBN,SAAS,EACTC,wBAAwB,CAC3B;AACL;AAEA;;;;;;;;;;;;AAYA,OAAM,SAAUM,+DAA+DA,CAC3EX,KAAgB,EAChBE,KAAgB,EAChBC,IAAe,EACfS,kBAAkB,GAAG,IAAI,EACzBR,SAAS,GAAGP,gBAAgB,EAC5BQ,wBAAwB,GAAGT,2BAA2B;EAEtD,MAAMK,eAAe,GAAGH,6BAA6B,CAACK,IAAI,EAAED,KAAK,EAAEU,kBAAkB,CAAC;EAEtF,OAAOH,iDAAiD,CACpDT,KAAK,EACLC,eAAe,EACfC,KAAK,EACLC,IAAI,EACJC,SAAS,EACTC,wBAAwB,CAC3B;AACL;AAEA,SAASC,sCAAsCA,CAC3CN,KAAgB,EAChBC,eAA0B,EAC1BC,KAAgB,EAChBC,IAAe,EACfU,eAAuB,EACvBT,SAAS,GAAGP,gBAAgB,EAC5BQ,wBAAwB,GAAGT,2BAA2B;EAEtD,MAAMkB,IAAI,GAAG,CACT;IAAEC,MAAM,EAAEf,KAAK;IAAEgB,QAAQ,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAI,CAAE,EACnD;IAAEF,MAAM,EAAEd,eAAe;IAAEe,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EAC9D;IAAEF,MAAM,EAAEb,KAAK;IAAEc,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,EACrD;IAAEF,MAAM,EAAEZ,IAAI;IAAEa,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,EACpD;IAAEF,MAAM,EAAErB,aAAa,CAACU,SAAS;IAAEY,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,EACvE;IAAEF,MAAM,EAAEX,SAAS;IAAEY,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CAC5D;EAED,OAAO,IAAItB,sBAAsB,CAAC;IAC9BmB,IAAI;IACJV,SAAS,EAAEC,wBAAwB;IACnCa,IAAI,EAAEL;GACT,CAAC;AACN;AAEA;;;;;;;;;;;;;;AAcA,OAAM,SAAUM,8BAA8BA,CAC1CC,qBAAgC,EAChCC,UAAqB,EACrBC,0BAAqC,EACrCC,oBAA+B,EAC/BC,SAAoB,EACpBtB,KAAgB,EAChBE,SAAS,GAAGP,gBAAgB,EAC5BQ,wBAAwB,GAAGT,2BAA2B;EAEtD,MAAMkB,IAAI,GAAG,CACT;IAAEC,MAAM,EAAEK,qBAAqB;IAAEJ,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACpE;IAAEF,MAAM,EAAEM,UAAU;IAAEL,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,EAC1D;IAAEF,MAAM,EAAEO,0BAA0B;IAAEN,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACzE;IAAEF,MAAM,EAAEQ,oBAAoB;IAAEP,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACnE;IAAEF,MAAM,EAAES,SAAS;IAAER,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,EACzD;IAAEF,MAAM,EAAEb,KAAK;IAAEc,QAAQ,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAI,CAAE,EACnD;IAAEF,MAAM,EAAEX,SAAS;IAAEY,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CAC5D;EAED,OAAO,IAAItB,sBAAsB,CAAC;IAC9BmB,IAAI;IACJV,SAAS,EAAEC,wBAAwB;IACnCa,IAAI,EAAEX,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;GACxB,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
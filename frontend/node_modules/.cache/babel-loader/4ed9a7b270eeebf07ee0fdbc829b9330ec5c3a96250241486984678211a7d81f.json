{"ast":null,"code":"import { mod } from './modular.js';\nimport { abytes, bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n  anum(value);\n  anum(length);\n  if (value < 0 || value >= 1 << 8 * length) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({\n    length\n  }).fill(0);\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\nfunction anum(item) {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(msg, DST, lenInBytes, H) {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const {\n    outputLen: b_in_bytes,\n    blockLen: r_in_bytes\n  } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(msg, DST, lenInBytes, k, H) {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil(2 * k / 8);\n    DST = H.create({\n      dkLen\n    }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255) throw new Error('expand_message_xof: invalid lenInBytes');\n  return H.create({\n    dkLen: lenInBytes\n  }).update(msg).update(i2osp(lenInBytes, 2))\n  // 2. DST_prime = DST || I2OSP(len(DST), 1)\n  .update(DST).update(i2osp(DST.length, 1)).digest();\n}\n/**\r\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\r\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\r\n * @param msg a byte string containing the message to hash\r\n * @param count the number of elements of F to output\r\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\r\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\r\n */\nexport function hash_to_field(msg, count, options) {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash'\n  });\n  const {\n    p,\n    k,\n    m,\n    hash,\n    expand,\n    DST: _DST\n  } = options;\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\nexport function isogenyMap(field, map) {\n  // Make same order as in spec\n  const COEFF = map.map(i => Array.from(i).reverse());\n  return (x, y) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map(val => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return {\n      x,\n      y\n    };\n  };\n}\nexport function createHasher(Point, mapToCurve, def) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg, options) {\n      const u = hash_to_field(msg, 2, {\n        ...def,\n        DST: def.DST,\n        ...options\n      });\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg, options) {\n      const u = hash_to_field(msg, 1, {\n        ...def,\n        DST: def.encodeDST,\n        ...options\n      });\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n    // Same as encodeToCurve, but without hash\n    mapToCurve(scalars) {\n      if (!Array.isArray(scalars)) throw new Error('mapToCurve: expected array of bigints');\n      for (const i of scalars) if (typeof i !== 'bigint') throw new Error(`mapToCurve: expected array of bigints, got ${i} in array`);\n      const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\n      P.assertValidity();\n      return P;\n    }\n  };\n}","map":{"version":3,"names":["mod","abytes","bytesToNumberBE","concatBytes","utf8ToBytes","validateObject","os2ip","i2osp","value","length","anum","Error","res","Array","from","fill","i","Uint8Array","strxor","a","b","arr","item","Number","isSafeInteger","expand_message_xmd","msg","DST","lenInBytes","H","outputLen","b_in_bytes","blockLen","r_in_bytes","ell","Math","ceil","DST_prime","Z_pad","l_i_b_str","b_0","args","pseudo_random_bytes","slice","expand_message_xof","k","dkLen","create","update","digest","hash_to_field","count","options","p","m","hash","expand","_DST","log2p","toString","L","len_in_bytes","prb","u","e","j","elm_offset","tv","subarray","isogenyMap","field","map","COEFF","reverse","x","y","xNum","xDen","yNum","yDen","val","reduce","acc","add","mul","div","createHasher","Point","mapToCurve","def","hashToCurve","u0","fromAffine","u1","P","clearCofactor","assertValidity","encodeToCurve","encodeDST","scalars","isArray"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@noble\\curves\\src\\abstract\\hash-to-curve.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport type { AffinePoint, Group, GroupConstructor } from './curve.js';\r\nimport { IField, mod } from './modular.js';\r\nimport type { CHash } from './utils.js';\r\nimport { abytes, bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from './utils.js';\r\n\r\n/**\r\n * * `DST` is a domain separation tag, defined in section 2.2.5\r\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\r\n * * `m` is extension degree (1 for prime fields)\r\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\r\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\r\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\r\n */\r\ntype UnicodeOrBytes = string | Uint8Array;\r\nexport type Opts = {\r\n  DST: UnicodeOrBytes;\r\n  p: bigint;\r\n  m: number;\r\n  k: number;\r\n  expand: 'xmd' | 'xof';\r\n  hash: CHash;\r\n};\r\n\r\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\r\nconst os2ip = bytesToNumberBE;\r\n\r\n// Integer to Octet Stream (numberToBytesBE)\r\nfunction i2osp(value: number, length: number): Uint8Array {\r\n  anum(value);\r\n  anum(length);\r\n  if (value < 0 || value >= 1 << (8 * length)) {\r\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\r\n  }\r\n  const res = Array.from({ length }).fill(0) as number[];\r\n  for (let i = length - 1; i >= 0; i--) {\r\n    res[i] = value & 0xff;\r\n    value >>>= 8;\r\n  }\r\n  return new Uint8Array(res);\r\n}\r\n\r\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\r\n  const arr = new Uint8Array(a.length);\r\n  for (let i = 0; i < a.length; i++) {\r\n    arr[i] = a[i] ^ b[i];\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction anum(item: unknown): void {\r\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\r\n}\r\n\r\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\r\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\r\nexport function expand_message_xmd(\r\n  msg: Uint8Array,\r\n  DST: Uint8Array,\r\n  lenInBytes: number,\r\n  H: CHash\r\n): Uint8Array {\r\n  abytes(msg);\r\n  abytes(DST);\r\n  anum(lenInBytes);\r\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\r\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\r\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\r\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\r\n  if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\r\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\r\n  const Z_pad = i2osp(0, r_in_bytes);\r\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\r\n  const b = new Array<Uint8Array>(ell);\r\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\r\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\r\n  for (let i = 1; i <= ell; i++) {\r\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\r\n    b[i] = H(concatBytes(...args));\r\n  }\r\n  const pseudo_random_bytes = concatBytes(...b);\r\n  return pseudo_random_bytes.slice(0, lenInBytes);\r\n}\r\n\r\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\r\n// 1. The collision resistance of H MUST be at least k bits.\r\n// 2. H MUST be an XOF that has been proved indifferentiable from\r\n//    a random oracle under a reasonable cryptographic assumption.\r\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\r\nexport function expand_message_xof(\r\n  msg: Uint8Array,\r\n  DST: Uint8Array,\r\n  lenInBytes: number,\r\n  k: number,\r\n  H: CHash\r\n): Uint8Array {\r\n  abytes(msg);\r\n  abytes(DST);\r\n  anum(lenInBytes);\r\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\r\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\r\n  if (DST.length > 255) {\r\n    const dkLen = Math.ceil((2 * k) / 8);\r\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\r\n  }\r\n  if (lenInBytes > 65535 || DST.length > 255)\r\n    throw new Error('expand_message_xof: invalid lenInBytes');\r\n  return (\r\n    H.create({ dkLen: lenInBytes })\r\n      .update(msg)\r\n      .update(i2osp(lenInBytes, 2))\r\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\r\n      .update(DST)\r\n      .update(i2osp(DST.length, 1))\r\n      .digest()\r\n  );\r\n}\r\n\r\n/**\r\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\r\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\r\n * @param msg a byte string containing the message to hash\r\n * @param count the number of elements of F to output\r\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\r\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\r\n */\r\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\r\n  validateObject(options, {\r\n    DST: 'stringOrUint8Array',\r\n    p: 'bigint',\r\n    m: 'isSafeInteger',\r\n    k: 'isSafeInteger',\r\n    hash: 'hash',\r\n  });\r\n  const { p, k, m, hash, expand, DST: _DST } = options;\r\n  abytes(msg);\r\n  anum(count);\r\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\r\n  const log2p = p.toString(2).length;\r\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\r\n  const len_in_bytes = count * m * L;\r\n  let prb; // pseudo_random_bytes\r\n  if (expand === 'xmd') {\r\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\r\n  } else if (expand === 'xof') {\r\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\r\n  } else if (expand === '_internal_pass') {\r\n    // for internal tests only\r\n    prb = msg;\r\n  } else {\r\n    throw new Error('expand must be \"xmd\" or \"xof\"');\r\n  }\r\n  const u = new Array(count);\r\n  for (let i = 0; i < count; i++) {\r\n    const e = new Array(m);\r\n    for (let j = 0; j < m; j++) {\r\n      const elm_offset = L * (j + i * m);\r\n      const tv = prb.subarray(elm_offset, elm_offset + L);\r\n      e[j] = mod(os2ip(tv), p);\r\n    }\r\n    u[i] = e;\r\n  }\r\n  return u;\r\n}\r\n\r\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\r\n  // Make same order as in spec\r\n  const COEFF = map.map((i) => Array.from(i).reverse());\r\n  return (x: T, y: T) => {\r\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\r\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\r\n    );\r\n    x = field.div(xNum, xDen); // xNum / xDen\r\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\r\n    return { x, y };\r\n  };\r\n}\r\n\r\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\r\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\r\n  toAffine(iz?: bigint): AffinePoint<T>;\r\n  clearCofactor(): H2CPoint<T>;\r\n  assertValidity(): void;\r\n}\r\n\r\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\r\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\r\n}\r\n\r\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\r\n\r\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\r\n// (changing DST is ok!)\r\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\r\n\r\nexport function createHasher<T>(\r\n  Point: H2CPointConstructor<T>,\r\n  mapToCurve: MapToCurve<T>,\r\n  def: Opts & { encodeDST?: UnicodeOrBytes }\r\n) {\r\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\r\n  return {\r\n    // Encodes byte string to elliptic curve.\r\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\r\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\r\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\r\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\r\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\r\n      const P = u0.add(u1).clearCofactor();\r\n      P.assertValidity();\r\n      return P;\r\n    },\r\n\r\n    // Encodes byte string to elliptic curve.\r\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\r\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\r\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\r\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\r\n      P.assertValidity();\r\n      return P;\r\n    },\r\n    // Same as encodeToCurve, but without hash\r\n    mapToCurve(scalars: bigint[]) {\r\n      if (!Array.isArray(scalars)) throw new Error('mapToCurve: expected array of bigints');\r\n      for (const i of scalars)\r\n        if (typeof i !== 'bigint')\r\n          throw new Error(`mapToCurve: expected array of bigints, got ${i} in array`);\r\n      const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\r\n      P.assertValidity();\r\n      return P;\r\n    },\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
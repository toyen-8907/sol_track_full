{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\n\n// 查询指定钱包的所有 SPL Token 余额\nasync function fetchAllSplTokenBalances(connection, walletAddress) {\n  try {\n    // 获取钱包地址下所有 SPL Token 账户\n    const response = await connection.getTokenAccountsByOwner(new PublicKey(walletAddress),\n    // 钱包地址\n    {\n      programId: new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\") // SPL Token 程序 ID\n    });\n\n    // 手动解析账户数据\n    const tokenBalances = response.value.map(accountInfo => {\n      const accountData = accountInfo.account.data;\n      // 解析账户数据，需要使用 SPL Token 库或自行解析\n      // 以下是假设您使用 @solana/spl-token 库进行解析\n      const parsedData = SPLTokenAccountLayout.decode(accountData);\n      const mint = new PublicKey(parsedData.mint).toBase58();\n      const amount = parsedData.amount;\n      return {\n        mint,\n        balance: amount.toString()\n      };\n    });\n    return tokenBalances;\n  } catch (error) {\n    console.error(\"获取 SPL Token 余额时出错:\", error);\n    throw error;\n  }\n}\nconst WebSocketComponent = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(({\n  onConnectionStatus,\n  account,\n  onMessageReceived,\n  onConnectionResult,\n  onSPLbalance\n}) => {\n  _s();\n  const hasEffectRun = useRef(false);\n  const connectionRef = useRef(null);\n  const subscriptionIdRef = useRef(null);\n  useEffect(() => {\n    if (hasEffectRun.current) return;\n    hasEffectRun.current = true;\n    const RPC_ENDPOINT = process.env.REACT_APP_RPC_ENDPOINT;\n    const WS_ENDPOINT = process.env.REACT_APP_WS_ENDPOINT;\n    if (!RPC_ENDPOINT || !WS_ENDPOINT) {\n      console.error('RPC_ENDPOINT or WS_ENDPOINT is not defined in .env file.');\n      onConnectionStatus('Error');\n      return;\n    }\n\n    // 创建并存储连接\n    const connection = new Connection(RPC_ENDPOINT, {\n      commitment: 'confirmed',\n      wsEndpoint: WS_ENDPOINT\n    });\n    connectionRef.current = connection;\n\n    // 将账户地址转换为 PublicKey 对象\n    const publicKey = new PublicKey(account);\n\n    // 设置初始连接状态为 \"Connecting\"\n    onConnectionStatus('Connecting');\n\n    // 订阅账户变化\n    const subscribe = async () => {\n      try {\n        const subscriptionId = await connection.onAccountChange(publicKey, async (accountInfo, context) => {\n          // 处理账户信息更新\n          const lamports = accountInfo.lamports;\n          console.log('Updated account info:', accountInfo);\n          console.log('Slot:', context.slot);\n          if (lamports !== undefined) {\n            const balance = lamports / 1000000000;\n            onMessageReceived(`余额: ${balance} $SOL`);\n          }\n          onConnectionResult(`Slot: ${context.slot}`);\n\n          // 在账户变化时获取所有 SPL Token 余额\n          // 在账户变化时获取所有 SPL Token 余额\n          const splTokenBalances = await fetchAllSplTokenBalances(connection, account);\n          onSPLbalance(`${JSON.stringify(splTokenBalances)}`);\n        }, 'finalized');\n        subscriptionIdRef.current = subscriptionId;\n\n        // 订阅成功，更新连接状态为 \"Connected\"\n        onConnectionStatus('Connected');\n      } catch (error) {\n        console.error('Subscription error:', error);\n        onConnectionStatus('Error');\n      }\n    };\n    subscribe();\n\n    // 组件卸载时取消订阅\n    return () => {\n      if (connectionRef.current && subscriptionIdRef.current !== null) {\n        connectionRef.current.removeAccountChangeListener(subscriptionIdRef.current).then(() => {\n          console.log('Account change listener removed.');\n          onConnectionStatus('Disconnected');\n        }).catch(error => {\n          console.error('Error removing account change listener:', error);\n        });\n      }\n    };\n  }, [onConnectionStatus, account, onMessageReceived, onConnectionResult]);\n  return null;\n}, \"XBuaGg3+G7LmJENFV3XMQqlkFWQ=\")), \"XBuaGg3+G7LmJENFV3XMQqlkFWQ=\");\n_c2 = WebSocketComponent;\nexport default WebSocketComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"WebSocketComponent$React.memo\");\n$RefreshReg$(_c2, \"WebSocketComponent\");","map":{"version":3,"names":["React","useEffect","useRef","Connection","PublicKey","fetchAllSplTokenBalances","connection","walletAddress","response","getTokenAccountsByOwner","programId","tokenBalances","value","map","accountInfo","accountData","account","data","parsedData","SPLTokenAccountLayout","decode","mint","toBase58","amount","balance","toString","error","console","WebSocketComponent","_s","memo","_c","onConnectionStatus","onMessageReceived","onConnectionResult","onSPLbalance","hasEffectRun","connectionRef","subscriptionIdRef","current","RPC_ENDPOINT","process","env","REACT_APP_RPC_ENDPOINT","WS_ENDPOINT","REACT_APP_WS_ENDPOINT","commitment","wsEndpoint","publicKey","subscribe","subscriptionId","onAccountChange","context","lamports","log","slot","undefined","splTokenBalances","JSON","stringify","removeAccountChangeListener","then","catch","_c2","$RefreshReg$"],"sources":["/Users/damentp01/project/sol_track_ac/src/WebSocketComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\n\n// 查询指定钱包的所有 SPL Token 余额\nasync function fetchAllSplTokenBalances(connection, walletAddress) {\n  try {\n    // 获取钱包地址下所有 SPL Token 账户\n    const response = await connection.getTokenAccountsByOwner(\n      new PublicKey(walletAddress), // 钱包地址\n      {\n        programId: new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"), // SPL Token 程序 ID\n      }\n    );\n\n    // 手动解析账户数据\n    const tokenBalances = response.value.map((accountInfo) => {\n      const accountData = accountInfo.account.data;\n      // 解析账户数据，需要使用 SPL Token 库或自行解析\n      // 以下是假设您使用 @solana/spl-token 库进行解析\n      const parsedData = SPLTokenAccountLayout.decode(accountData);\n\n      const mint = new PublicKey(parsedData.mint).toBase58();\n      const amount = parsedData.amount;\n\n      return {\n        mint,\n        balance: amount.toString()\n      };\n    });\n\n    return tokenBalances;\n\n  } catch (error) {\n    console.error(\"获取 SPL Token 余额时出错:\", error);\n    throw error;\n  }\n}\n\n\n\nconst WebSocketComponent = React.memo(({ onConnectionStatus, account, onMessageReceived, onConnectionResult,onSPLbalance }) => {\n  const hasEffectRun = useRef(false);\n  const connectionRef = useRef(null);\n  const subscriptionIdRef = useRef(null);\n\n  useEffect(() => {\n    if (hasEffectRun.current) return;\n    hasEffectRun.current = true;\n\n    const RPC_ENDPOINT = process.env.REACT_APP_RPC_ENDPOINT;\n    const WS_ENDPOINT = process.env.REACT_APP_WS_ENDPOINT;\n\n    if (!RPC_ENDPOINT || !WS_ENDPOINT) {\n      console.error('RPC_ENDPOINT or WS_ENDPOINT is not defined in .env file.');\n      onConnectionStatus('Error');\n      return;\n    }\n\n    // 创建并存储连接\n    const connection = new Connection(RPC_ENDPOINT, {\n      commitment: 'confirmed',\n      wsEndpoint: WS_ENDPOINT,\n    });\n    connectionRef.current = connection;\n\n    // 将账户地址转换为 PublicKey 对象\n    const publicKey = new PublicKey(account);\n\n    // 设置初始连接状态为 \"Connecting\"\n    onConnectionStatus('Connecting');\n\n    // 订阅账户变化\n    const subscribe = async () => {\n      try {\n        const subscriptionId = await connection.onAccountChange(\n          publicKey,\n          async (accountInfo, context) => {\n            // 处理账户信息更新\n            const lamports = accountInfo.lamports;\n            console.log('Updated account info:', accountInfo);\n            console.log('Slot:', context.slot);\n\n            if (lamports !== undefined) {\n              const balance = lamports/1000000000;\n              onMessageReceived(`余额: ${balance} $SOL`);\n            }\n            \n            onConnectionResult(`Slot: ${context.slot}`);\n\n            // 在账户变化时获取所有 SPL Token 余额\n            // 在账户变化时获取所有 SPL Token 余额\n            const splTokenBalances = await fetchAllSplTokenBalances(connection, account);\n            onSPLbalance(`${JSON.stringify(splTokenBalances)}`);\n\n          },\n          'finalized'\n        );\n        subscriptionIdRef.current = subscriptionId;\n\n        // 订阅成功，更新连接状态为 \"Connected\"\n        onConnectionStatus('Connected');\n      } catch (error) {\n        console.error('Subscription error:', error);\n        onConnectionStatus('Error');\n      }\n    };\n\n    subscribe();\n\n    // 组件卸载时取消订阅\n    return () => {\n      if (connectionRef.current && subscriptionIdRef.current !== null) {\n        connectionRef.current.removeAccountChangeListener(subscriptionIdRef.current)\n          .then(() => {\n            console.log('Account change listener removed.');\n            onConnectionStatus('Disconnected');\n          })\n          .catch((error) => {\n            console.error('Error removing account change listener:', error);\n          });\n      }\n    };\n  }, [onConnectionStatus, account, onMessageReceived, onConnectionResult]);\n\n  return null;\n});\n\nexport default WebSocketComponent;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,UAAU,EAAEC,SAAS,QAAQ,iBAAiB;;AAEvD;AACA,eAAeC,wBAAwBA,CAACC,UAAU,EAAEC,aAAa,EAAE;EACjE,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMF,UAAU,CAACG,uBAAuB,CACvD,IAAIL,SAAS,CAACG,aAAa,CAAC;IAAE;IAC9B;MACEG,SAAS,EAAE,IAAIN,SAAS,CAAC,6CAA6C,CAAC,CAAE;IAC3E,CACF,CAAC;;IAED;IACA,MAAMO,aAAa,GAAGH,QAAQ,CAACI,KAAK,CAACC,GAAG,CAAEC,WAAW,IAAK;MACxD,MAAMC,WAAW,GAAGD,WAAW,CAACE,OAAO,CAACC,IAAI;MAC5C;MACA;MACA,MAAMC,UAAU,GAAGC,qBAAqB,CAACC,MAAM,CAACL,WAAW,CAAC;MAE5D,MAAMM,IAAI,GAAG,IAAIjB,SAAS,CAACc,UAAU,CAACG,IAAI,CAAC,CAACC,QAAQ,CAAC,CAAC;MACtD,MAAMC,MAAM,GAAGL,UAAU,CAACK,MAAM;MAEhC,OAAO;QACLF,IAAI;QACJG,OAAO,EAAED,MAAM,CAACE,QAAQ,CAAC;MAC3B,CAAC;IACH,CAAC,CAAC;IAEF,OAAOd,aAAa;EAEtB,CAAC,CAAC,OAAOe,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF;AAIA,MAAME,kBAAkB,gBAAAC,EAAA,cAAG7B,KAAK,CAAC8B,IAAI,CAAAC,EAAA,GAAAF,EAAA,CAAC,CAAC;EAAEG,kBAAkB;EAAEhB,OAAO;EAAEiB,iBAAiB;EAAEC,kBAAkB;EAACC;AAAa,CAAC,KAAK;EAAAN,EAAA;EAC7H,MAAMO,YAAY,GAAGlC,MAAM,CAAC,KAAK,CAAC;EAClC,MAAMmC,aAAa,GAAGnC,MAAM,CAAC,IAAI,CAAC;EAClC,MAAMoC,iBAAiB,GAAGpC,MAAM,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,IAAImC,YAAY,CAACG,OAAO,EAAE;IAC1BH,YAAY,CAACG,OAAO,GAAG,IAAI;IAE3B,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;IACvD,MAAMC,WAAW,GAAGH,OAAO,CAACC,GAAG,CAACG,qBAAqB;IAErD,IAAI,CAACL,YAAY,IAAI,CAACI,WAAW,EAAE;MACjCjB,OAAO,CAACD,KAAK,CAAC,0DAA0D,CAAC;MACzEM,kBAAkB,CAAC,OAAO,CAAC;MAC3B;IACF;;IAEA;IACA,MAAM1B,UAAU,GAAG,IAAIH,UAAU,CAACqC,YAAY,EAAE;MAC9CM,UAAU,EAAE,WAAW;MACvBC,UAAU,EAAEH;IACd,CAAC,CAAC;IACFP,aAAa,CAACE,OAAO,GAAGjC,UAAU;;IAElC;IACA,MAAM0C,SAAS,GAAG,IAAI5C,SAAS,CAACY,OAAO,CAAC;;IAExC;IACAgB,kBAAkB,CAAC,YAAY,CAAC;;IAEhC;IACA,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,cAAc,GAAG,MAAM5C,UAAU,CAAC6C,eAAe,CACrDH,SAAS,EACT,OAAOlC,WAAW,EAAEsC,OAAO,KAAK;UAC9B;UACA,MAAMC,QAAQ,GAAGvC,WAAW,CAACuC,QAAQ;UACrC1B,OAAO,CAAC2B,GAAG,CAAC,uBAAuB,EAAExC,WAAW,CAAC;UACjDa,OAAO,CAAC2B,GAAG,CAAC,OAAO,EAAEF,OAAO,CAACG,IAAI,CAAC;UAElC,IAAIF,QAAQ,KAAKG,SAAS,EAAE;YAC1B,MAAMhC,OAAO,GAAG6B,QAAQ,GAAC,UAAU;YACnCpB,iBAAiB,CAAC,OAAOT,OAAO,OAAO,CAAC;UAC1C;UAEAU,kBAAkB,CAAC,SAASkB,OAAO,CAACG,IAAI,EAAE,CAAC;;UAE3C;UACA;UACA,MAAME,gBAAgB,GAAG,MAAMpD,wBAAwB,CAACC,UAAU,EAAEU,OAAO,CAAC;UAC5EmB,YAAY,CAAC,GAAGuB,IAAI,CAACC,SAAS,CAACF,gBAAgB,CAAC,EAAE,CAAC;QAErD,CAAC,EACD,WACF,CAAC;QACDnB,iBAAiB,CAACC,OAAO,GAAGW,cAAc;;QAE1C;QACAlB,kBAAkB,CAAC,WAAW,CAAC;MACjC,CAAC,CAAC,OAAON,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3CM,kBAAkB,CAAC,OAAO,CAAC;MAC7B;IACF,CAAC;IAEDiB,SAAS,CAAC,CAAC;;IAEX;IACA,OAAO,MAAM;MACX,IAAIZ,aAAa,CAACE,OAAO,IAAID,iBAAiB,CAACC,OAAO,KAAK,IAAI,EAAE;QAC/DF,aAAa,CAACE,OAAO,CAACqB,2BAA2B,CAACtB,iBAAiB,CAACC,OAAO,CAAC,CACzEsB,IAAI,CAAC,MAAM;UACVlC,OAAO,CAAC2B,GAAG,CAAC,kCAAkC,CAAC;UAC/CtB,kBAAkB,CAAC,cAAc,CAAC;QACpC,CAAC,CAAC,CACD8B,KAAK,CAAEpC,KAAK,IAAK;UAChBC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;QACjE,CAAC,CAAC;MACN;IACF,CAAC;EACH,CAAC,EAAE,CAACM,kBAAkB,EAAEhB,OAAO,EAAEiB,iBAAiB,EAAEC,kBAAkB,CAAC,CAAC;EAExE,OAAO,IAAI;AACb,CAAC,kCAAC;AAAC6B,GAAA,GArFGnC,kBAAkB;AAuFxB,eAAeA,kBAAkB;AAAC,IAAAG,EAAA,EAAAgC,GAAA;AAAAC,YAAA,CAAAjC,EAAA;AAAAiC,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMultisigInstruction } from '../instructions/initializeMultisig.js';\nimport { getMinimumBalanceForRentExemptMultisig, MULTISIG_SIZE } from '../state/multisig.js';\n/**\r\n * Create and initialize a new multisig\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction and initialization fees\r\n * @param signers        Full set of signers\r\n * @param m              Number of required signatures\r\n * @param keypair        Optional keypair, defaulting to a new random one\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Address of the new multisig\r\n */\nexport async function createMultisig(connection, payer, signers, m, keypair = Keypair.generate(), confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const lamports = await getMinimumBalanceForRentExemptMultisig(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: MULTISIG_SIZE,\n    lamports,\n    programId\n  }), createInitializeMultisigInstruction(keypair.publicKey, signers, m, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"names":["Keypair","sendAndConfirmTransaction","SystemProgram","Transaction","TOKEN_PROGRAM_ID","createInitializeMultisigInstruction","getMinimumBalanceForRentExemptMultisig","MULTISIG_SIZE","createMultisig","connection","payer","signers","m","keypair","generate","confirmOptions","programId","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\actions\\createMultisig.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\r\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport { createInitializeMultisigInstruction } from '../instructions/initializeMultisig.js';\r\nimport { getMinimumBalanceForRentExemptMultisig, MULTISIG_SIZE } from '../state/multisig.js';\r\n\r\n/**\r\n * Create and initialize a new multisig\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction and initialization fees\r\n * @param signers        Full set of signers\r\n * @param m              Number of required signatures\r\n * @param keypair        Optional keypair, defaulting to a new random one\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Address of the new multisig\r\n */\r\nexport async function createMultisig(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    signers: PublicKey[],\r\n    m: number,\r\n    keypair = Keypair.generate(),\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): Promise<PublicKey> {\r\n    const lamports = await getMinimumBalanceForRentExemptMultisig(connection);\r\n\r\n    const transaction = new Transaction().add(\r\n        SystemProgram.createAccount({\r\n            fromPubkey: payer.publicKey,\r\n            newAccountPubkey: keypair.publicKey,\r\n            space: MULTISIG_SIZE,\r\n            lamports,\r\n            programId,\r\n        }),\r\n        createInitializeMultisigInstruction(keypair.publicKey, signers, m, programId),\r\n    );\r\n\r\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\r\n\r\n    return keypair.publicKey;\r\n}\r\n"],"mappings":"AACA,SAASA,OAAO,EAAEC,yBAAyB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AAChG,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,mCAAmC,QAAQ,uCAAuC;AAC3F,SAASC,sCAAsC,EAAEC,aAAa,QAAQ,sBAAsB;AAE5F;;;;;;;;;;;;;AAaA,OAAO,eAAeC,cAAcA,CAChCC,UAAsB,EACtBC,KAAa,EACbC,OAAoB,EACpBC,CAAS,EACTC,OAAO,GAAGb,OAAO,CAACc,QAAQ,EAAE,EAC5BC,cAA+B,EAC/BC,SAAS,GAAGZ,gBAAgB;EAE5B,MAAMa,QAAQ,GAAG,MAAMX,sCAAsC,CAACG,UAAU,CAAC;EAEzE,MAAMS,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CACrCjB,aAAa,CAACkB,aAAa,CAAC;IACxBC,UAAU,EAAEX,KAAK,CAACY,SAAS;IAC3BC,gBAAgB,EAAEV,OAAO,CAACS,SAAS;IACnCE,KAAK,EAAEjB,aAAa;IACpBU,QAAQ;IACRD;GACH,CAAC,EACFX,mCAAmC,CAACQ,OAAO,CAACS,SAAS,EAAEX,OAAO,EAAEC,CAAC,EAAEI,SAAS,CAAC,CAChF;EAED,MAAMf,yBAAyB,CAACQ,UAAU,EAAES,WAAW,EAAE,CAACR,KAAK,EAAEG,OAAO,CAAC,EAAEE,cAAc,CAAC;EAE1F,OAAOF,OAAO,CAACS,SAAS;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
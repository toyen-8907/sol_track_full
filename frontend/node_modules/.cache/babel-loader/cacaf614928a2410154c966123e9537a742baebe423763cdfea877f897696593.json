{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\nimport { COptionPublicKeyLayout } from '../serialization.js';\n/** TODO: docs */\nexport const initializeMintInstructionData = struct([u8('instruction'), u8('decimals'), publicKey('mintAuthority'), new COptionPublicKeyLayout('freezeAuthority')]);\n/**\r\n * Construct an InitializeMint instruction\r\n *\r\n * @param mint            Token mint account\r\n * @param decimals        Number of decimals in token account amounts\r\n * @param mintAuthority   Minting authority\r\n * @param freezeAuthority Optional authority that can freeze token accounts\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority, programId = TOKEN_PROGRAM_ID) {\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(initializeMintInstructionData.span);\n  initializeMintInstructionData.encode({\n    instruction: TokenInstruction.InitializeMint,\n    decimals,\n    mintAuthority,\n    freezeAuthority\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\r\n * Decode an InitializeMint instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\nexport function decodeInitializeMintInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMintInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      rent\n    },\n    data\n  } = decodeInitializeMintInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeMint) throw new TokenInvalidInstructionTypeError();\n  if (!mint || !rent) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data\n  };\n}\n/**\r\n * Decode an InitializeMint instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\nexport function decodeInitializeMintInstructionUnchecked({\n  programId,\n  keys: [mint, rent],\n  data\n}) {\n  const {\n    instruction,\n    decimals,\n    mintAuthority,\n    freezeAuthority\n  } = initializeMintInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data: {\n      instruction,\n      decimals,\n      mintAuthority,\n      freezeAuthority\n    }\n  };\n}","map":{"version":3,"names":["struct","u8","publicKey","SYSVAR_RENT_PUBKEY","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","COptionPublicKeyLayout","initializeMintInstructionData","createInitializeMintInstruction","mint","decimals","mintAuthority","freezeAuthority","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","InitializeMint","decodeInitializeMintInstruction","equals","length","rent","decodeInitializeMintInstructionUnchecked","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\initializeMint.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport { publicKey } from '@solana/buffer-layout-utils';\r\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\r\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport {\r\n    TokenInvalidInstructionDataError,\r\n    TokenInvalidInstructionKeysError,\r\n    TokenInvalidInstructionProgramError,\r\n    TokenInvalidInstructionTypeError,\r\n} from '../errors.js';\r\nimport { TokenInstruction } from './types.js';\r\nimport { COptionPublicKeyLayout } from '../serialization.js';\r\n\r\n/** TODO: docs */\r\nexport interface InitializeMintInstructionData {\r\n    instruction: TokenInstruction.InitializeMint;\r\n    decimals: number;\r\n    mintAuthority: PublicKey;\r\n    freezeAuthority: PublicKey | null;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const initializeMintInstructionData = struct<InitializeMintInstructionData>([\r\n    u8('instruction'),\r\n    u8('decimals'),\r\n    publicKey('mintAuthority'),\r\n    new COptionPublicKeyLayout('freezeAuthority'),\r\n]);\r\n\r\n/**\r\n * Construct an InitializeMint instruction\r\n *\r\n * @param mint            Token mint account\r\n * @param decimals        Number of decimals in token account amounts\r\n * @param mintAuthority   Minting authority\r\n * @param freezeAuthority Optional authority that can freeze token accounts\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createInitializeMintInstruction(\r\n    mint: PublicKey,\r\n    decimals: number,\r\n    mintAuthority: PublicKey,\r\n    freezeAuthority: PublicKey | null,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    const keys = [\r\n        { pubkey: mint, isSigner: false, isWritable: true },\r\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(initializeMintInstructionData.span);\r\n    initializeMintInstructionData.encode(\r\n        {\r\n            instruction: TokenInstruction.InitializeMint,\r\n            decimals,\r\n            mintAuthority,\r\n            freezeAuthority,\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\n/** A decoded, valid InitializeMint instruction */\r\nexport interface DecodedInitializeMintInstruction {\r\n    programId: PublicKey;\r\n    keys: {\r\n        mint: AccountMeta;\r\n        rent: AccountMeta;\r\n    };\r\n    data: {\r\n        instruction: TokenInstruction.InitializeMint;\r\n        decimals: number;\r\n        mintAuthority: PublicKey;\r\n        freezeAuthority: PublicKey | null;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode an InitializeMint instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\r\nexport function decodeInitializeMintInstruction(\r\n    instruction: TransactionInstruction,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): DecodedInitializeMintInstruction {\r\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\r\n    if (instruction.data.length !== initializeMintInstructionData.span) throw new TokenInvalidInstructionDataError();\r\n\r\n    const {\r\n        keys: { mint, rent },\r\n        data,\r\n    } = decodeInitializeMintInstructionUnchecked(instruction);\r\n    if (data.instruction !== TokenInstruction.InitializeMint) throw new TokenInvalidInstructionTypeError();\r\n    if (!mint || !rent) throw new TokenInvalidInstructionKeysError();\r\n\r\n    // TODO: key checks?\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            mint,\r\n            rent,\r\n        },\r\n        data,\r\n    };\r\n}\r\n\r\n/** A decoded, non-validated InitializeMint instruction */\r\nexport interface DecodedInitializeMintInstructionUnchecked {\r\n    programId: PublicKey;\r\n    keys: {\r\n        mint: AccountMeta | undefined;\r\n        rent: AccountMeta | undefined;\r\n    };\r\n    data: {\r\n        instruction: number;\r\n        decimals: number;\r\n        mintAuthority: PublicKey;\r\n        freezeAuthority: PublicKey | null;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode an InitializeMint instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\r\nexport function decodeInitializeMintInstructionUnchecked({\r\n    programId,\r\n    keys: [mint, rent],\r\n    data,\r\n}: TransactionInstruction): DecodedInitializeMintInstructionUnchecked {\r\n    const { instruction, decimals, mintAuthority, freezeAuthority } = initializeMintInstructionData.decode(data);\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            mint,\r\n            rent,\r\n        },\r\n        data: {\r\n            instruction,\r\n            decimals,\r\n            mintAuthority,\r\n            freezeAuthority,\r\n        },\r\n    };\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAClD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,SAASC,kBAAkB,EAAEC,sBAAsB,QAAQ,iBAAiB;AAC5E,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,gBAAgB,QAAQ,YAAY;AAC7C,SAASC,sBAAsB,QAAQ,qBAAqB;AAU5D;AACA,OAAO,MAAMC,6BAA6B,GAAGZ,MAAM,CAAgC,CAC/EC,EAAE,CAAC,aAAa,CAAC,EACjBA,EAAE,CAAC,UAAU,CAAC,EACdC,SAAS,CAAC,eAAe,CAAC,EAC1B,IAAIS,sBAAsB,CAAC,iBAAiB,CAAC,CAChD,CAAC;AAEF;;;;;;;;;;;AAWA,OAAM,SAAUE,+BAA+BA,CAC3CC,IAAe,EACfC,QAAgB,EAChBC,aAAwB,EACxBC,eAAiC,EACjCC,SAAS,GAAGb,gBAAgB;EAE5B,MAAMc,IAAI,GAAG,CACT;IAAEC,MAAM,EAAEN,IAAI;IAAEO,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACnD;IAAEF,MAAM,EAAEjB,kBAAkB;IAAEkB,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CACrE;EAED,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACb,6BAA6B,CAACc,IAAI,CAAC;EAC7Dd,6BAA6B,CAACe,MAAM,CAChC;IACIC,WAAW,EAAElB,gBAAgB,CAACmB,cAAc;IAC5Cd,QAAQ;IACRC,aAAa;IACbC;GACH,EACDM,IAAI,CACP;EAED,OAAO,IAAInB,sBAAsB,CAAC;IAAEe,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAiBA;;;;;;;;AAQA,OAAM,SAAUO,+BAA+BA,CAC3CF,WAAmC,EACnCV,SAAS,GAAGb,gBAAgB;EAE5B,IAAI,CAACuB,WAAW,CAACV,SAAS,CAACa,MAAM,CAACb,SAAS,CAAC,EAAE,MAAM,IAAIV,mCAAmC,EAAE;EAC7F,IAAIoB,WAAW,CAACL,IAAI,CAACS,MAAM,KAAKpB,6BAA6B,CAACc,IAAI,EAAE,MAAM,IAAIpB,gCAAgC,EAAE;EAEhH,MAAM;IACFa,IAAI,EAAE;MAAEL,IAAI;MAAEmB;IAAI,CAAE;IACpBV;EAAI,CACP,GAAGW,wCAAwC,CAACN,WAAW,CAAC;EACzD,IAAIL,IAAI,CAACK,WAAW,KAAKlB,gBAAgB,CAACmB,cAAc,EAAE,MAAM,IAAIpB,gCAAgC,EAAE;EACtG,IAAI,CAACK,IAAI,IAAI,CAACmB,IAAI,EAAE,MAAM,IAAI1B,gCAAgC,EAAE;EAEhE;EAEA,OAAO;IACHW,SAAS;IACTC,IAAI,EAAE;MACFL,IAAI;MACJmB;KACH;IACDV;GACH;AACL;AAiBA;;;;;;;AAOA,OAAM,SAAUW,wCAAwCA,CAAC;EACrDhB,SAAS;EACTC,IAAI,EAAE,CAACL,IAAI,EAAEmB,IAAI,CAAC;EAClBV;AAAI,CACiB;EACrB,MAAM;IAAEK,WAAW;IAAEb,QAAQ;IAAEC,aAAa;IAAEC;EAAe,CAAE,GAAGL,6BAA6B,CAACuB,MAAM,CAACZ,IAAI,CAAC;EAE5G,OAAO;IACHL,SAAS;IACTC,IAAI,EAAE;MACFL,IAAI;MACJmB;KACH;IACDV,IAAI,EAAE;MACFK,WAAW;MACXb,QAAQ;MACRC,aAAa;MACbC;;GAEP;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
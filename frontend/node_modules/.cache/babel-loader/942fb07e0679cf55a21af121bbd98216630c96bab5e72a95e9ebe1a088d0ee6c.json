{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID, programSupportsExtensions } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { addSigners } from '../../instructions/internal.js';\nexport var GroupMemberPointerInstruction;\n(function (GroupMemberPointerInstruction) {\n  GroupMemberPointerInstruction[GroupMemberPointerInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  GroupMemberPointerInstruction[GroupMemberPointerInstruction[\"Update\"] = 1] = \"Update\";\n})(GroupMemberPointerInstruction || (GroupMemberPointerInstruction = {}));\nexport const initializeGroupMemberPointerData = struct([\n// prettier-ignore\nu8('instruction'), u8('groupMemberPointerInstruction'), publicKey('authority'), publicKey('memberAddress')]);\n/**\r\n * Construct an Initialize GroupMemberPointer instruction\r\n *\r\n * @param mint            Token mint account\r\n * @param authority       Optional Authority that can set the member address\r\n * @param memberAddress   Optional Account address that holds the member\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createInitializeGroupMemberPointerInstruction(mint, authority, memberAddress, programId = TOKEN_2022_PROGRAM_ID) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(initializeGroupMemberPointerData.span);\n  initializeGroupMemberPointerData.encode({\n    instruction: TokenInstruction.GroupMemberPointerExtension,\n    groupMemberPointerInstruction: GroupMemberPointerInstruction.Initialize,\n    authority: authority ?? PublicKey.default,\n    memberAddress: memberAddress ?? PublicKey.default\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: data\n  });\n}\nexport const updateGroupMemberPointerData = struct([\n// prettier-ignore\nu8('instruction'), u8('groupMemberPointerInstruction'), publicKey('memberAddress')]);\nexport function createUpdateGroupMemberPointerInstruction(mint, authority, memberAddress, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(updateGroupMemberPointerData.span);\n  updateGroupMemberPointerData.encode({\n    instruction: TokenInstruction.GroupMemberPointerExtension,\n    groupMemberPointerInstruction: GroupMemberPointerInstruction.Update,\n    memberAddress: memberAddress ?? PublicKey.default\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: data\n  });\n}","map":{"version":3,"names":["struct","u8","publicKey","PublicKey","TransactionInstruction","TOKEN_2022_PROGRAM_ID","programSupportsExtensions","TokenUnsupportedInstructionError","TokenInstruction","addSigners","GroupMemberPointerInstruction","initializeGroupMemberPointerData","createInitializeGroupMemberPointerInstruction","mint","authority","memberAddress","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","GroupMemberPointerExtension","groupMemberPointerInstruction","Initialize","default","updateGroupMemberPointerData","createUpdateGroupMemberPointerInstruction","multiSigners","Update"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\extensions\\groupMemberPointer\\instructions.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport { publicKey } from '@solana/buffer-layout-utils';\r\nimport type { Signer } from '@solana/web3.js';\r\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\r\nimport { TOKEN_2022_PROGRAM_ID, programSupportsExtensions } from '../../constants.js';\r\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\r\nimport { TokenInstruction } from '../../instructions/types.js';\r\nimport { addSigners } from '../../instructions/internal.js';\r\n\r\nexport enum GroupMemberPointerInstruction {\r\n    Initialize = 0,\r\n    Update = 1,\r\n}\r\n\r\nexport const initializeGroupMemberPointerData = struct<{\r\n    instruction: TokenInstruction.GroupMemberPointerExtension;\r\n    groupMemberPointerInstruction: number;\r\n    authority: PublicKey;\r\n    memberAddress: PublicKey;\r\n}>([\r\n    // prettier-ignore\r\n    u8('instruction'),\r\n    u8('groupMemberPointerInstruction'),\r\n    publicKey('authority'),\r\n    publicKey('memberAddress'),\r\n]);\r\n\r\n/**\r\n * Construct an Initialize GroupMemberPointer instruction\r\n *\r\n * @param mint            Token mint account\r\n * @param authority       Optional Authority that can set the member address\r\n * @param memberAddress   Optional Account address that holds the member\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createInitializeGroupMemberPointerInstruction(\r\n    mint: PublicKey,\r\n    authority: PublicKey | null,\r\n    memberAddress: PublicKey | null,\r\n    programId: PublicKey = TOKEN_2022_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    if (!programSupportsExtensions(programId)) {\r\n        throw new TokenUnsupportedInstructionError();\r\n    }\r\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\r\n\r\n    const data = Buffer.alloc(initializeGroupMemberPointerData.span);\r\n    initializeGroupMemberPointerData.encode(\r\n        {\r\n            instruction: TokenInstruction.GroupMemberPointerExtension,\r\n            groupMemberPointerInstruction: GroupMemberPointerInstruction.Initialize,\r\n            authority: authority ?? PublicKey.default,\r\n            memberAddress: memberAddress ?? PublicKey.default,\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data: data });\r\n}\r\n\r\nexport const updateGroupMemberPointerData = struct<{\r\n    instruction: TokenInstruction.GroupMemberPointerExtension;\r\n    groupMemberPointerInstruction: number;\r\n    memberAddress: PublicKey;\r\n}>([\r\n    // prettier-ignore\r\n    u8('instruction'),\r\n    u8('groupMemberPointerInstruction'),\r\n    publicKey('memberAddress'),\r\n]);\r\n\r\nexport function createUpdateGroupMemberPointerInstruction(\r\n    mint: PublicKey,\r\n    authority: PublicKey,\r\n    memberAddress: PublicKey | null,\r\n    multiSigners: (Signer | PublicKey)[] = [],\r\n    programId: PublicKey = TOKEN_2022_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    if (!programSupportsExtensions(programId)) {\r\n        throw new TokenUnsupportedInstructionError();\r\n    }\r\n\r\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], authority, multiSigners);\r\n\r\n    const data = Buffer.alloc(updateGroupMemberPointerData.span);\r\n    updateGroupMemberPointerData.encode(\r\n        {\r\n            instruction: TokenInstruction.GroupMemberPointerExtension,\r\n            groupMemberPointerInstruction: GroupMemberPointerInstruction.Update,\r\n            memberAddress: memberAddress ?? PublicKey.default,\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data: data });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createHarvestWithheldTokensToMintInstruction, createSetTransferFeeInstruction, createTransferCheckedWithFeeInstruction, createWithdrawWithheldTokensFromAccountsInstruction, createWithdrawWithheldTokensFromMintInstruction } from './instructions.js';\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithFee(connection, payer, source, mint, destination, owner, amount, decimals, fee, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createTransferCheckedWithFeeInstruction(source, mint, destination, ownerPublicKey, amount, decimals, fee, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Withdraw withheld tokens from mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromMint(connection, payer, mint, destination, authority, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createWithdrawWithheldTokensFromMintInstruction(mint, destination, authorityPublicKey, signers, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Withdraw withheld tokens from accounts\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromAccounts(connection, payer, mint, destination, authority, multiSigners, sources, confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createWithdrawWithheldTokensFromAccountsInstruction(mint, destination, authorityPublicKey, signers, sources, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Harvest withheld tokens from accounts to the mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function harvestWithheldTokensToMint(connection, payer, mint, sources, confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const transaction = new Transaction().add(createHarvestWithheldTokensToMintInstruction(mint, sources, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n/**\n * Update transfer fee and maximum fee\n *\n * @param connection                Connection to use\n * @param payer                     Payer of the transaction fees\n * @param mint                      The token mint\n * @param authority                 The authority of the transfer fee\n * @param multiSigners              Signing accounts if `owner` is a multisig\n * @param transferFeeBasisPoints    Amount of transfer collected as fees, expressed as basis points of the transfer amount\n * @param maximumFee                Maximum fee assessed on transfers\n * @param confirmOptions            Options for confirming the transaction\n * @param programId                 SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function setTransferFee(connection, payer, mint, authority, multiSigners, transferFeeBasisPoints, maximumFee, confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createSetTransferFeeInstruction(mint, authorityPublicKey, signers, transferFeeBasisPoints, maximumFee, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","getSigners","TOKEN_2022_PROGRAM_ID","createHarvestWithheldTokensToMintInstruction","createSetTransferFeeInstruction","createTransferCheckedWithFeeInstruction","createWithdrawWithheldTokensFromAccountsInstruction","createWithdrawWithheldTokensFromMintInstruction","transferCheckedWithFee","connection","payer","source","mint","destination","owner","amount","decimals","fee","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add","withdrawWithheldTokensFromMint","authority","authorityPublicKey","withdrawWithheldTokensFromAccounts","sources","harvestWithheldTokensToMint","setTransferFee","transferFeeBasisPoints","maximumFee"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/extensions/transferFee/actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport {\n    createHarvestWithheldTokensToMintInstruction,\n    createSetTransferFeeInstruction,\n    createTransferCheckedWithFeeInstruction,\n    createWithdrawWithheldTokensFromAccountsInstruction,\n    createWithdrawWithheldTokensFromMintInstruction,\n} from './instructions.js';\n\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithFee(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: Signer | PublicKey,\n    amount: bigint,\n    decimals: number,\n    fee: bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID,\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createTransferCheckedWithFeeInstruction(\n            source,\n            mint,\n            destination,\n            ownerPublicKey,\n            amount,\n            decimals,\n            fee,\n            multiSigners,\n            programId,\n        ),\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Withdraw withheld tokens from mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID,\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createWithdrawWithheldTokensFromMintInstruction(mint, destination, authorityPublicKey, signers, programId),\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Withdraw withheld tokens from accounts\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromAccounts(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[],\n    sources: PublicKey[],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID,\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createWithdrawWithheldTokensFromAccountsInstruction(\n            mint,\n            destination,\n            authorityPublicKey,\n            signers,\n            sources,\n            programId,\n        ),\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Harvest withheld tokens from accounts to the mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function harvestWithheldTokensToMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    sources: PublicKey[],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID,\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(createHarvestWithheldTokensToMintInstruction(mint, sources, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n\n/**\n * Update transfer fee and maximum fee\n *\n * @param connection                Connection to use\n * @param payer                     Payer of the transaction fees\n * @param mint                      The token mint\n * @param authority                 The authority of the transfer fee\n * @param multiSigners              Signing accounts if `owner` is a multisig\n * @param transferFeeBasisPoints    Amount of transfer collected as fees, expressed as basis points of the transfer amount\n * @param maximumFee                Maximum fee assessed on transfers\n * @param confirmOptions            Options for confirming the transaction\n * @param programId                 SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function setTransferFee(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[],\n    transferFeeBasisPoints: number,\n    maximumFee: bigint,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID,\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createSetTransferFeeInstruction(\n            mint,\n            authorityPublicKey,\n            signers,\n            transferFeeBasisPoints,\n            maximumFee,\n            programId,\n        ),\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
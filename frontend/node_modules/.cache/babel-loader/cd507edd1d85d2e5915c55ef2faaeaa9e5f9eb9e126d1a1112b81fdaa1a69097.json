{"ast":null,"code":"import { PublicKey } from '@solana/web3.js';\nimport { fixCodecSize, getBytesCodec, getStructCodec, getU64Codec } from '@solana/codecs';\nconst tokenGroupMemberCodec = getStructCodec([['mint', fixCodecSize(getBytesCodec(), 32)], ['group', fixCodecSize(getBytesCodec(), 32)], ['memberNumber', getU64Codec()]]);\nexport const TOKEN_GROUP_MEMBER_SIZE = tokenGroupMemberCodec.fixedSize;\n// Pack TokenGroupMember into byte slab\nexport function packTokenGroupMember(member) {\n  return tokenGroupMemberCodec.encode({\n    mint: member.mint.toBuffer(),\n    group: member.group.toBuffer(),\n    memberNumber: member.memberNumber\n  });\n}\n// unpack byte slab into TokenGroupMember\nexport function unpackTokenGroupMember(buffer) {\n  const data = tokenGroupMemberCodec.decode(buffer);\n  return {\n    mint: new PublicKey(data.mint),\n    group: new PublicKey(data.group),\n    memberNumber: data.memberNumber\n  };\n}","map":{"version":3,"names":["PublicKey","fixCodecSize","getBytesCodec","getStructCodec","getU64Codec","tokenGroupMemberCodec","TOKEN_GROUP_MEMBER_SIZE","fixedSize","packTokenGroupMember","member","encode","mint","toBuffer","group","memberNumber","unpackTokenGroupMember","buffer","data","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token-group\\src\\state\\tokenGroupMember.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\r\nimport type { ReadonlyUint8Array } from '@solana/codecs';\r\nimport { fixCodecSize, getBytesCodec, getStructCodec, getU64Codec } from '@solana/codecs';\r\n\r\nconst tokenGroupMemberCodec = getStructCodec([\r\n    ['mint', fixCodecSize(getBytesCodec(), 32)],\r\n    ['group', fixCodecSize(getBytesCodec(), 32)],\r\n    ['memberNumber', getU64Codec()],\r\n]);\r\n\r\nexport const TOKEN_GROUP_MEMBER_SIZE = tokenGroupMemberCodec.fixedSize;\r\n\r\nexport interface TokenGroupMember {\r\n    /** The associated mint, used to counter spoofing to be sure that member belongs to a particular mint */\r\n    mint: PublicKey;\r\n    /** The pubkey of the `TokenGroup` */\r\n    group: PublicKey;\r\n    /** The member number */\r\n    memberNumber: bigint;\r\n}\r\n\r\n// Pack TokenGroupMember into byte slab\r\nexport function packTokenGroupMember(member: TokenGroupMember): ReadonlyUint8Array {\r\n    return tokenGroupMemberCodec.encode({\r\n        mint: member.mint.toBuffer(),\r\n        group: member.group.toBuffer(),\r\n        memberNumber: member.memberNumber,\r\n    });\r\n}\r\n\r\n// unpack byte slab into TokenGroupMember\r\nexport function unpackTokenGroupMember(buffer: Buffer | Uint8Array | ReadonlyUint8Array): TokenGroupMember {\r\n    const data = tokenGroupMemberCodec.decode(buffer);\r\n    return {\r\n        mint: new PublicKey(data.mint),\r\n        group: new PublicKey(data.group),\r\n        memberNumber: data.memberNumber,\r\n    };\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAE3C,SAASC,YAAY,EAAEC,aAAa,EAAEC,cAAc,EAAEC,WAAW,QAAQ,gBAAgB;AAEzF,MAAMC,qBAAqB,GAAGF,cAAc,CAAC,CACzC,CAAC,MAAM,EAAEF,YAAY,CAACC,aAAa,EAAE,EAAE,EAAE,CAAC,CAAC,EAC3C,CAAC,OAAO,EAAED,YAAY,CAACC,aAAa,EAAE,EAAE,EAAE,CAAC,CAAC,EAC5C,CAAC,cAAc,EAAEE,WAAW,EAAE,CAAC,CAClC,CAAC;AAEF,OAAO,MAAME,uBAAuB,GAAGD,qBAAqB,CAACE,SAAS;AAWtE;AACA,OAAM,SAAUC,oBAAoBA,CAACC,MAAwB;EACzD,OAAOJ,qBAAqB,CAACK,MAAM,CAAC;IAChCC,IAAI,EAAEF,MAAM,CAACE,IAAI,CAACC,QAAQ,EAAE;IAC5BC,KAAK,EAAEJ,MAAM,CAACI,KAAK,CAACD,QAAQ,EAAE;IAC9BE,YAAY,EAAEL,MAAM,CAACK;GACxB,CAAC;AACN;AAEA;AACA,OAAM,SAAUC,sBAAsBA,CAACC,MAAgD;EACnF,MAAMC,IAAI,GAAGZ,qBAAqB,CAACa,MAAM,CAACF,MAAM,CAAC;EACjD,OAAO;IACHL,IAAI,EAAE,IAAIX,SAAS,CAACiB,IAAI,CAACN,IAAI,CAAC;IAC9BE,KAAK,EAAE,IAAIb,SAAS,CAACiB,IAAI,CAACJ,KAAK,CAAC;IAChCC,YAAY,EAAEG,IAAI,CAACH;GACtB;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
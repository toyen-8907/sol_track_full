{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const mintToCheckedInstructionData = struct([u8('instruction'), u64('amount'), u8('decimals')]);\n/**\r\n * Construct a MintToChecked instruction\r\n *\r\n * @param mint         Public key of the mint\r\n * @param destination  Address of the token account to mint to\r\n * @param authority    The mint authority\r\n * @param amount       Amount to mint\r\n * @param decimals     Number of decimals in amount to mint\r\n * @param multiSigners Signing accounts if `authority` is a multisig\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createMintToCheckedInstruction(mint, destination, authority, amount, decimals, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(mintToCheckedInstructionData.span);\n  mintToCheckedInstructionData.encode({\n    instruction: TokenInstruction.MintToChecked,\n    amount: BigInt(amount),\n    decimals\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\r\n * Decode a MintToChecked instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\nexport function decodeMintToCheckedInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== mintToCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  } = decodeMintToCheckedInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.MintToChecked) throw new TokenInvalidInstructionTypeError();\n  if (!mint || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      mint,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  };\n}\n/**\r\n * Decode a MintToChecked instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\nexport function decodeMintToCheckedInstructionUnchecked({\n  programId,\n  keys: [mint, destination, authority, ...multiSigners],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      mint,\n      destination,\n      authority,\n      multiSigners\n    },\n    data: mintToCheckedInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","mintToCheckedInstructionData","createMintToCheckedInstruction","mint","destination","authority","amount","decimals","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","MintToChecked","BigInt","decodeMintToCheckedInstruction","equals","length","decodeMintToCheckedInstructionUnchecked","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\mintToChecked.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport { u64 } from '@solana/buffer-layout-utils';\r\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\r\nimport { TransactionInstruction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport {\r\n    TokenInvalidInstructionDataError,\r\n    TokenInvalidInstructionKeysError,\r\n    TokenInvalidInstructionProgramError,\r\n    TokenInvalidInstructionTypeError,\r\n} from '../errors.js';\r\nimport { addSigners } from './internal.js';\r\nimport { TokenInstruction } from './types.js';\r\n\r\n/** TODO: docs */\r\nexport interface MintToCheckedInstructionData {\r\n    instruction: TokenInstruction.MintToChecked;\r\n    amount: bigint;\r\n    decimals: number;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const mintToCheckedInstructionData = struct<MintToCheckedInstructionData>([\r\n    u8('instruction'),\r\n    u64('amount'),\r\n    u8('decimals'),\r\n]);\r\n\r\n/**\r\n * Construct a MintToChecked instruction\r\n *\r\n * @param mint         Public key of the mint\r\n * @param destination  Address of the token account to mint to\r\n * @param authority    The mint authority\r\n * @param amount       Amount to mint\r\n * @param decimals     Number of decimals in amount to mint\r\n * @param multiSigners Signing accounts if `authority` is a multisig\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createMintToCheckedInstruction(\r\n    mint: PublicKey,\r\n    destination: PublicKey,\r\n    authority: PublicKey,\r\n    amount: number | bigint,\r\n    decimals: number,\r\n    multiSigners: (Signer | PublicKey)[] = [],\r\n    programId = TOKEN_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    const keys = addSigners(\r\n        [\r\n            { pubkey: mint, isSigner: false, isWritable: true },\r\n            { pubkey: destination, isSigner: false, isWritable: true },\r\n        ],\r\n        authority,\r\n        multiSigners,\r\n    );\r\n\r\n    const data = Buffer.alloc(mintToCheckedInstructionData.span);\r\n    mintToCheckedInstructionData.encode(\r\n        {\r\n            instruction: TokenInstruction.MintToChecked,\r\n            amount: BigInt(amount),\r\n            decimals,\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\n/** A decoded, valid MintToChecked instruction */\r\nexport interface DecodedMintToCheckedInstruction {\r\n    programId: PublicKey;\r\n    keys: {\r\n        mint: AccountMeta;\r\n        destination: AccountMeta;\r\n        authority: AccountMeta;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: TokenInstruction.MintToChecked;\r\n        amount: bigint;\r\n        decimals: number;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a MintToChecked instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\r\nexport function decodeMintToCheckedInstruction(\r\n    instruction: TransactionInstruction,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): DecodedMintToCheckedInstruction {\r\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\r\n    if (instruction.data.length !== mintToCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\r\n\r\n    const {\r\n        keys: { mint, destination, authority, multiSigners },\r\n        data,\r\n    } = decodeMintToCheckedInstructionUnchecked(instruction);\r\n    if (data.instruction !== TokenInstruction.MintToChecked) throw new TokenInvalidInstructionTypeError();\r\n    if (!mint || !destination || !authority) throw new TokenInvalidInstructionKeysError();\r\n\r\n    // TODO: key checks?\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            mint,\r\n            destination,\r\n            authority,\r\n            multiSigners,\r\n        },\r\n        data,\r\n    };\r\n}\r\n\r\n/** A decoded, non-validated MintToChecked instruction */\r\nexport interface DecodedMintToCheckedInstructionUnchecked {\r\n    programId: PublicKey;\r\n    keys: {\r\n        mint: AccountMeta | undefined;\r\n        destination: AccountMeta | undefined;\r\n        authority: AccountMeta | undefined;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: number;\r\n        amount: bigint;\r\n        decimals: number;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a MintToChecked instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\r\nexport function decodeMintToCheckedInstructionUnchecked({\r\n    programId,\r\n    keys: [mint, destination, authority, ...multiSigners],\r\n    data,\r\n}: TransactionInstruction): DecodedMintToCheckedInstructionUnchecked {\r\n    return {\r\n        programId,\r\n        keys: {\r\n            mint,\r\n            destination,\r\n            authority,\r\n            multiSigners,\r\n        },\r\n        data: mintToCheckedInstructionData.decode(data),\r\n    };\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAClD,SAASC,GAAG,QAAQ,6BAA6B;AAEjD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,gBAAgB,QAAQ,YAAY;AAS7C;AACA,OAAO,MAAMC,4BAA4B,GAAGX,MAAM,CAA+B,CAC7EC,EAAE,CAAC,aAAa,CAAC,EACjBC,GAAG,CAAC,QAAQ,CAAC,EACbD,EAAE,CAAC,UAAU,CAAC,CACjB,CAAC;AAEF;;;;;;;;;;;;;AAaA,OAAM,SAAUW,8BAA8BA,CAC1CC,IAAe,EACfC,WAAsB,EACtBC,SAAoB,EACpBC,MAAuB,EACvBC,QAAgB,EAChBC,YAAA,GAAuC,EAAE,EACzCC,SAAS,GAAGf,gBAAgB;EAE5B,MAAMgB,IAAI,GAAGX,UAAU,CACnB,CACI;IAAEY,MAAM,EAAER,IAAI;IAAES,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACnD;IAAEF,MAAM,EAAEP,WAAW;IAAEQ,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAC7D,EACDR,SAAS,EACTG,YAAY,CACf;EAED,MAAMM,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACf,4BAA4B,CAACgB,IAAI,CAAC;EAC5DhB,4BAA4B,CAACiB,MAAM,CAC/B;IACIC,WAAW,EAAEnB,gBAAgB,CAACoB,aAAa;IAC3Cd,MAAM,EAAEe,MAAM,CAACf,MAAM,CAAC;IACtBC;GACH,EACDO,IAAI,CACP;EAED,OAAO,IAAIrB,sBAAsB,CAAC;IAAEiB,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAkBA;;;;;;;;AAQA,OAAM,SAAUQ,8BAA8BA,CAC1CH,WAAmC,EACnCV,SAAS,GAAGf,gBAAgB;EAE5B,IAAI,CAACyB,WAAW,CAACV,SAAS,CAACc,MAAM,CAACd,SAAS,CAAC,EAAE,MAAM,IAAIZ,mCAAmC,EAAE;EAC7F,IAAIsB,WAAW,CAACL,IAAI,CAACU,MAAM,KAAKvB,4BAA4B,CAACgB,IAAI,EAAE,MAAM,IAAItB,gCAAgC,EAAE;EAE/G,MAAM;IACFe,IAAI,EAAE;MAAEP,IAAI;MAAEC,WAAW;MAAEC,SAAS;MAAEG;IAAY,CAAE;IACpDM;EAAI,CACP,GAAGW,uCAAuC,CAACN,WAAW,CAAC;EACxD,IAAIL,IAAI,CAACK,WAAW,KAAKnB,gBAAgB,CAACoB,aAAa,EAAE,MAAM,IAAItB,gCAAgC,EAAE;EACrG,IAAI,CAACK,IAAI,IAAI,CAACC,WAAW,IAAI,CAACC,SAAS,EAAE,MAAM,IAAIT,gCAAgC,EAAE;EAErF;EAEA,OAAO;IACHa,SAAS;IACTC,IAAI,EAAE;MACFP,IAAI;MACJC,WAAW;MACXC,SAAS;MACTG;KACH;IACDM;GACH;AACL;AAkBA;;;;;;;AAOA,OAAM,SAAUW,uCAAuCA,CAAC;EACpDhB,SAAS;EACTC,IAAI,EAAE,CAACP,IAAI,EAAEC,WAAW,EAAEC,SAAS,EAAE,GAAGG,YAAY,CAAC;EACrDM;AAAI,CACiB;EACrB,OAAO;IACHL,SAAS;IACTC,IAAI,EAAE;MACFP,IAAI;MACJC,WAAW;MACXC,SAAS;MACTG;KACH;IACDM,IAAI,EAAEb,4BAA4B,CAACyB,MAAM,CAACZ,IAAI;GACjD;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
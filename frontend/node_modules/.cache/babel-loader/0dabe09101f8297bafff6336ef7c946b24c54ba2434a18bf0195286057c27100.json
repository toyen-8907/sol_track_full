{"ast":null,"code":"import { s16, struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var InterestBearingMintInstruction;\n(function (InterestBearingMintInstruction) {\n  InterestBearingMintInstruction[InterestBearingMintInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  InterestBearingMintInstruction[InterestBearingMintInstruction[\"UpdateRate\"] = 1] = \"UpdateRate\";\n})(InterestBearingMintInstruction || (InterestBearingMintInstruction = {}));\nexport const interestBearingMintInitializeInstructionData = struct([u8('instruction'), u8('interestBearingMintInstruction'),\n// TODO: Make this an optional public key\npublicKey('rateAuthority'), s16('rate')]);\nexport const interestBearingMintUpdateRateInstructionData = struct([u8('instruction'), u8('interestBearingMintInstruction'), s16('rate')]);\n/**\n * Construct an InitializeInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The initial interest rate\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeInterestBearingMintInstruction(mint, rateAuthority, rate, programId = TOKEN_2022_PROGRAM_ID) {\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(interestBearingMintInitializeInstructionData.span);\n  interestBearingMintInitializeInstructionData.encode({\n    instruction: TokenInstruction.InterestBearingMintExtension,\n    interestBearingMintInstruction: InterestBearingMintInstruction.Initialize,\n    rateAuthority,\n    rate\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Construct an UpdateRateInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The updated interest rate\n * @param multiSigners   Signing accounts if `rateAuthority` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateRateInterestBearingMintInstruction(mint, rateAuthority, rate, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: rateAuthority,\n    isSigner: !multiSigners.length,\n    isWritable: false\n  }], rateAuthority, multiSigners);\n  const data = Buffer.alloc(interestBearingMintUpdateRateInstructionData.span);\n  interestBearingMintUpdateRateInstructionData.encode({\n    instruction: TokenInstruction.InterestBearingMintExtension,\n    interestBearingMintInstruction: InterestBearingMintInstruction.UpdateRate,\n    rate\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":{"version":3,"names":["s16","struct","u8","publicKey","TransactionInstruction","TOKEN_2022_PROGRAM_ID","addSigners","TokenInstruction","InterestBearingMintInstruction","interestBearingMintInitializeInstructionData","interestBearingMintUpdateRateInstructionData","createInitializeInterestBearingMintInstruction","mint","rateAuthority","rate","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","InterestBearingMintExtension","interestBearingMintInstruction","Initialize","createUpdateRateInterestBearingMintInstruction","multiSigners","length","UpdateRate"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/extensions/interestBearingMint/instructions.ts"],"sourcesContent":["import { s16, struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\n\nexport enum InterestBearingMintInstruction {\n    Initialize = 0,\n    UpdateRate = 1,\n}\n\nexport interface InterestBearingMintInitializeInstructionData {\n    instruction: TokenInstruction.InterestBearingMintExtension;\n    interestBearingMintInstruction: InterestBearingMintInstruction.Initialize;\n    rateAuthority: PublicKey;\n    rate: number;\n}\n\nexport interface InterestBearingMintUpdateRateInstructionData {\n    instruction: TokenInstruction.InterestBearingMintExtension;\n    interestBearingMintInstruction: InterestBearingMintInstruction.UpdateRate;\n    rate: number;\n}\n\nexport const interestBearingMintInitializeInstructionData = struct<InterestBearingMintInitializeInstructionData>([\n    u8('instruction'),\n    u8('interestBearingMintInstruction'),\n    // TODO: Make this an optional public key\n    publicKey('rateAuthority'),\n    s16('rate'),\n]);\n\nexport const interestBearingMintUpdateRateInstructionData = struct<InterestBearingMintUpdateRateInstructionData>([\n    u8('instruction'),\n    u8('interestBearingMintInstruction'),\n    s16('rate'),\n]);\n\n/**\n * Construct an InitializeInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The initial interest rate\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeInterestBearingMintInstruction(\n    mint: PublicKey,\n    rateAuthority: PublicKey,\n    rate: number,\n    programId = TOKEN_2022_PROGRAM_ID,\n) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(interestBearingMintInitializeInstructionData.span);\n    interestBearingMintInitializeInstructionData.encode(\n        {\n            instruction: TokenInstruction.InterestBearingMintExtension,\n            interestBearingMintInstruction: InterestBearingMintInstruction.Initialize,\n            rateAuthority,\n            rate,\n        },\n        data,\n    );\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/**\n * Construct an UpdateRateInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The updated interest rate\n * @param multiSigners   Signing accounts if `rateAuthority` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateRateInterestBearingMintInstruction(\n    mint: PublicKey,\n    rateAuthority: PublicKey,\n    rate: number,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID,\n) {\n    const keys = addSigners(\n        [\n            { pubkey: mint, isSigner: false, isWritable: true },\n            { pubkey: rateAuthority, isSigner: !multiSigners.length, isWritable: false },\n        ],\n        rateAuthority,\n        multiSigners,\n    );\n    const data = Buffer.alloc(interestBearingMintUpdateRateInstructionData.span);\n    interestBearingMintUpdateRateInstructionData.encode(\n        {\n            instruction: TokenInstruction.InterestBearingMintExtension,\n            interestBearingMintInstruction: InterestBearingMintInstruction.UpdateRate,\n            rate,\n        },\n        data,\n    );\n    return new TransactionInstruction({ keys, programId, data });\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AACvD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,qBAAqB,QAAQ,oBAAoB;AAC1D,SAASC,UAAU,QAAQ,gCAAgC;AAC3D,SAASC,gBAAgB,QAAQ,6BAA6B;AAE9D,WAAYC,8BAGX;AAHD,WAAYA,8BAA8B;EACtCA,8BAAA,CAAAA,8BAAA,kCAAc;EACdA,8BAAA,CAAAA,8BAAA,kCAAc;AAClB,CAAC,EAHWA,8BAA8B,KAA9BA,8BAA8B;AAkB1C,OAAO,MAAMC,4CAA4C,GAAGR,MAAM,CAA+C,CAC7GC,EAAE,CAAC,aAAa,CAAC,EACjBA,EAAE,CAAC,gCAAgC,CAAC;AACpC;AACAC,SAAS,CAAC,eAAe,CAAC,EAC1BH,GAAG,CAAC,MAAM,CAAC,CACd,CAAC;AAEF,OAAO,MAAMU,4CAA4C,GAAGT,MAAM,CAA+C,CAC7GC,EAAE,CAAC,aAAa,CAAC,EACjBA,EAAE,CAAC,gCAAgC,CAAC,EACpCF,GAAG,CAAC,MAAM,CAAC,CACd,CAAC;AAEF;;;;;;;;;;AAUA,OAAM,SAAUW,8CAA8CA,CAC1DC,IAAe,EACfC,aAAwB,EACxBC,IAAY,EACZC,SAAS,GAAGV,qBAAqB;EAEjC,MAAMW,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEL,IAAI;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAClE,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACb,4CAA4C,CAACc,IAAI,CAAC;EAC5Ed,4CAA4C,CAACe,MAAM,CAC/C;IACIC,WAAW,EAAElB,gBAAgB,CAACmB,4BAA4B;IAC1DC,8BAA8B,EAAEnB,8BAA8B,CAACoB,UAAU;IACzEf,aAAa;IACbC;GACH,EACDM,IAAI,CACP;EACD,OAAO,IAAIhB,sBAAsB,CAAC;IAAEY,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUS,8CAA8CA,CAC1DjB,IAAe,EACfC,aAAwB,EACxBC,IAAY,EACZgB,YAAA,GAAuC,EAAE,EACzCf,SAAS,GAAGV,qBAAqB;EAEjC,MAAMW,IAAI,GAAGV,UAAU,CACnB,CACI;IAAEW,MAAM,EAAEL,IAAI;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACnD;IAAEF,MAAM,EAAEJ,aAAa;IAAEK,QAAQ,EAAE,CAACY,YAAY,CAACC,MAAM;IAAEZ,UAAU,EAAE;EAAK,CAAE,CAC/E,EACDN,aAAa,EACbiB,YAAY,CACf;EACD,MAAMV,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACZ,4CAA4C,CAACa,IAAI,CAAC;EAC5Eb,4CAA4C,CAACc,MAAM,CAC/C;IACIC,WAAW,EAAElB,gBAAgB,CAACmB,4BAA4B;IAC1DC,8BAA8B,EAAEnB,8BAA8B,CAACwB,UAAU;IACzElB;GACH,EACDM,IAAI,CACP;EACD,OAAO,IAAIhB,sBAAsB,CAAC;IAAEY,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
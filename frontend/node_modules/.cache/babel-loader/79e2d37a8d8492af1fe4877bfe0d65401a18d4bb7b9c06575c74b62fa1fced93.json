{"ast":null,"code":"import { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { getAccountLenForMint } from '../extensions/extensionType.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { getMint } from '../state/mint.js';\nimport { createAssociatedTokenAccount } from './createAssociatedTokenAccount.js';\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\nexport async function createAccount(connection, payer, mint, owner, keypair, confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  // If a keypair isn't provided, create the associated token account and return its address\n  if (!keypair) return await createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId);\n  // Otherwise, create the account with the provided keypair and return its public key\n  const mintState = await getMint(connection, mint, confirmOptions?.commitment, programId);\n  const space = getAccountLenForMint(mintState);\n  const lamports = await connection.getMinimumBalanceForRentExemption(space);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space,\n    lamports,\n    programId\n  }), createInitializeAccountInstruction(keypair.publicKey, mint, owner, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"names":["sendAndConfirmTransaction","SystemProgram","Transaction","TOKEN_PROGRAM_ID","getAccountLenForMint","createInitializeAccountInstruction","getMint","createAssociatedTokenAccount","createAccount","connection","payer","mint","owner","keypair","confirmOptions","programId","mintState","commitment","space","lamports","getMinimumBalanceForRentExemption","transaction","add","fromPubkey","publicKey","newAccountPubkey"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/actions/createAccount.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, Keypair, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { getAccountLenForMint } from '../extensions/extensionType.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { getMint } from '../state/mint.js';\nimport { createAssociatedTokenAccount } from './createAssociatedTokenAccount.js';\n\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\nexport async function createAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n): Promise<PublicKey> {\n    // If a keypair isn't provided, create the associated token account and return its address\n    if (!keypair) return await createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId);\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const mintState = await getMint(connection, mint, confirmOptions?.commitment, programId);\n    const space = getAccountLenForMint(mintState);\n    const lamports = await connection.getMinimumBalanceForRentExemption(space);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space,\n            lamports,\n            programId,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, mint, owner, programId),\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AACvF,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,oBAAoB,QAAQ,gCAAgC;AACrE,SAASC,kCAAkC,QAAQ,sCAAsC;AACzF,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,4BAA4B,QAAQ,mCAAmC;AAEhF;;;;;;;;;;;;;AAaA,OAAO,eAAeC,aAAaA,CAC/BC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAgB,EAChBC,OAAiB,EACjBC,cAA+B,EAC/BC,SAAS,GAAGZ,gBAAgB;EAE5B;EACA,IAAI,CAACU,OAAO,EAAE,OAAO,MAAMN,4BAA4B,CAACE,UAAU,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAEE,cAAc,EAAEC,SAAS,CAAC;EAElH;EACA,MAAMC,SAAS,GAAG,MAAMV,OAAO,CAACG,UAAU,EAAEE,IAAI,EAAEG,cAAc,EAAEG,UAAU,EAAEF,SAAS,CAAC;EACxF,MAAMG,KAAK,GAAGd,oBAAoB,CAACY,SAAS,CAAC;EAC7C,MAAMG,QAAQ,GAAG,MAAMV,UAAU,CAACW,iCAAiC,CAACF,KAAK,CAAC;EAE1E,MAAMG,WAAW,GAAG,IAAInB,WAAW,EAAE,CAACoB,GAAG,CACrCrB,aAAa,CAACO,aAAa,CAAC;IACxBe,UAAU,EAAEb,KAAK,CAACc,SAAS;IAC3BC,gBAAgB,EAAEZ,OAAO,CAACW,SAAS;IACnCN,KAAK;IACLC,QAAQ;IACRJ;GACH,CAAC,EACFV,kCAAkC,CAACQ,OAAO,CAACW,SAAS,EAAEb,IAAI,EAAEC,KAAK,EAAEG,SAAS,CAAC,CAChF;EAED,MAAMf,yBAAyB,CAACS,UAAU,EAAEY,WAAW,EAAE,CAACX,KAAK,EAAEG,OAAO,CAAC,EAAEC,cAAc,CAAC;EAE1F,OAAOD,OAAO,CAACW,SAAS;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { addEncoderSizePrefix, fixEncoderSize, getBooleanEncoder, getBytesEncoder, getDataEnumCodec, getOptionEncoder, getUtf8Encoder, getStructEncoder, getTupleEncoder, getU32Encoder, getU64Encoder, transformEncoder } from '@solana/codecs';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { getFieldCodec, getFieldConfig } from './field.js';\nfunction getInstructionEncoder(discriminator, dataEncoder) {\n  return transformEncoder(getTupleEncoder([getBytesEncoder(), dataEncoder]), data => [discriminator, data]);\n}\nfunction getPublicKeyEncoder() {\n  return transformEncoder(fixEncoderSize(getBytesEncoder(), 32), publicKey => publicKey.toBytes());\n}\nfunction getStringEncoder() {\n  return addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder());\n}\nexport function createInitializeInstruction(args) {\n  const {\n    programId,\n    metadata,\n    updateAuthority,\n    mint,\n    mintAuthority,\n    name,\n    symbol,\n    uri\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: false,\n      isWritable: false,\n      pubkey: updateAuthority\n    }, {\n      isSigner: false,\n      isWritable: false,\n      pubkey: mint\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: mintAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:initialize_account') */\n    210, 225, 30, 162, 88, 184, 77, 141]), getStructEncoder([['name', getStringEncoder()], ['symbol', getStringEncoder()], ['uri', getStringEncoder()]])).encode({\n      name,\n      symbol,\n      uri\n    }))\n  });\n}\nexport function createUpdateFieldInstruction(args) {\n  const {\n    programId,\n    metadata,\n    updateAuthority,\n    field,\n    value\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: updateAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:updating_field') */\n    221, 233, 49, 45, 181, 202, 220, 200]), getStructEncoder([['field', getDataEnumCodec(getFieldCodec())], ['value', getStringEncoder()]])).encode({\n      field: getFieldConfig(field),\n      value\n    }))\n  });\n}\nexport function createRemoveKeyInstruction(args) {\n  const {\n    programId,\n    metadata,\n    updateAuthority,\n    key,\n    idempotent\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: updateAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:remove_key_ix') */\n    234, 18, 32, 56, 89, 141, 37, 181]), getStructEncoder([['idempotent', getBooleanEncoder()], ['key', getStringEncoder()]])).encode({\n      idempotent,\n      key\n    }))\n  });\n}\nexport function createUpdateAuthorityInstruction(args) {\n  const {\n    programId,\n    metadata,\n    oldAuthority,\n    newAuthority\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: oldAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:update_the_authority') */\n    215, 228, 166, 228, 84, 100, 86, 123]), getStructEncoder([['newAuthority', getPublicKeyEncoder()]])).encode({\n      newAuthority: newAuthority ?? SystemProgram.programId\n    }))\n  });\n}\nexport function createEmitInstruction(args) {\n  const {\n    programId,\n    metadata,\n    start,\n    end\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: false,\n      pubkey: metadata\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:emitter') */\n    250, 166, 180, 250, 13, 12, 184, 70]), getStructEncoder([['start', getOptionEncoder(getU64Encoder())], ['end', getOptionEncoder(getU64Encoder())]])).encode({\n      start: start ?? null,\n      end: end ?? null\n    }))\n  });\n}","map":{"version":3,"names":["addEncoderSizePrefix","fixEncoderSize","getBooleanEncoder","getBytesEncoder","getDataEnumCodec","getOptionEncoder","getUtf8Encoder","getStructEncoder","getTupleEncoder","getU32Encoder","getU64Encoder","transformEncoder","SystemProgram","TransactionInstruction","getFieldCodec","getFieldConfig","getInstructionEncoder","discriminator","dataEncoder","data","getPublicKeyEncoder","publicKey","toBytes","getStringEncoder","createInitializeInstruction","args","programId","metadata","updateAuthority","mint","mintAuthority","name","symbol","uri","keys","isSigner","isWritable","pubkey","Buffer","from","Uint8Array","encode","createUpdateFieldInstruction","field","value","createRemoveKeyInstruction","key","idempotent","createUpdateAuthorityInstruction","oldAuthority","newAuthority","createEmitInstruction","start","end"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token-metadata\\src\\instruction.ts"],"sourcesContent":["import type { Encoder } from '@solana/codecs';\r\nimport {\r\n    addEncoderSizePrefix,\r\n    fixEncoderSize,\r\n    getBooleanEncoder,\r\n    getBytesEncoder,\r\n    getDataEnumCodec,\r\n    getOptionEncoder,\r\n    getUtf8Encoder,\r\n    getStructEncoder,\r\n    getTupleEncoder,\r\n    getU32Encoder,\r\n    getU64Encoder,\r\n    transformEncoder,\r\n} from '@solana/codecs';\r\nimport type { VariableSizeEncoder } from '@solana/codecs';\r\nimport type { PublicKey } from '@solana/web3.js';\r\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\r\n\r\nimport type { Field } from './field.js';\r\nimport { getFieldCodec, getFieldConfig } from './field.js';\r\n\r\nfunction getInstructionEncoder<T extends object>(discriminator: Uint8Array, dataEncoder: Encoder<T>): Encoder<T> {\r\n    return transformEncoder(getTupleEncoder([getBytesEncoder(), dataEncoder]), (data: T): [Uint8Array, T] => [\r\n        discriminator,\r\n        data,\r\n    ]);\r\n}\r\n\r\nfunction getPublicKeyEncoder(): Encoder<PublicKey> {\r\n    return transformEncoder(fixEncoderSize(getBytesEncoder(), 32), (publicKey: PublicKey) => publicKey.toBytes());\r\n}\r\n\r\nfunction getStringEncoder(): VariableSizeEncoder<string> {\r\n    return addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder());\r\n}\r\n\r\n/**\r\n * Initializes a TLV entry with the basic token-metadata fields.\r\n *\r\n * Assumes that the provided mint is an SPL token mint, that the metadata\r\n * account is allocated and assigned to the program, and that the metadata\r\n * account has enough lamports to cover the rent-exempt reserve.\r\n */\r\nexport interface InitializeInstructionArgs {\r\n    programId: PublicKey;\r\n    metadata: PublicKey;\r\n    updateAuthority: PublicKey;\r\n    mint: PublicKey;\r\n    mintAuthority: PublicKey;\r\n    name: string;\r\n    symbol: string;\r\n    uri: string;\r\n}\r\n\r\nexport function createInitializeInstruction(args: InitializeInstructionArgs): TransactionInstruction {\r\n    const { programId, metadata, updateAuthority, mint, mintAuthority, name, symbol, uri } = args;\r\n    return new TransactionInstruction({\r\n        programId,\r\n        keys: [\r\n            { isSigner: false, isWritable: true, pubkey: metadata },\r\n            { isSigner: false, isWritable: false, pubkey: updateAuthority },\r\n            { isSigner: false, isWritable: false, pubkey: mint },\r\n            { isSigner: true, isWritable: false, pubkey: mintAuthority },\r\n        ],\r\n        data: Buffer.from(\r\n            getInstructionEncoder(\r\n                new Uint8Array([\r\n                    /* await splDiscriminate('spl_token_metadata_interface:initialize_account') */\r\n                    210, 225, 30, 162, 88, 184, 77, 141,\r\n                ]),\r\n                getStructEncoder([\r\n                    ['name', getStringEncoder()],\r\n                    ['symbol', getStringEncoder()],\r\n                    ['uri', getStringEncoder()],\r\n                ]),\r\n            ).encode({ name, symbol, uri }),\r\n        ),\r\n    });\r\n}\r\n\r\n/**\r\n * If the field does not exist on the account, it will be created.\r\n * If the field does exist, it will be overwritten.\r\n */\r\nexport interface UpdateFieldInstruction {\r\n    programId: PublicKey;\r\n    metadata: PublicKey;\r\n    updateAuthority: PublicKey;\r\n    field: Field | string;\r\n    value: string;\r\n}\r\n\r\nexport function createUpdateFieldInstruction(args: UpdateFieldInstruction): TransactionInstruction {\r\n    const { programId, metadata, updateAuthority, field, value } = args;\r\n    return new TransactionInstruction({\r\n        programId,\r\n        keys: [\r\n            { isSigner: false, isWritable: true, pubkey: metadata },\r\n            { isSigner: true, isWritable: false, pubkey: updateAuthority },\r\n        ],\r\n        data: Buffer.from(\r\n            getInstructionEncoder(\r\n                new Uint8Array([\r\n                    /* await splDiscriminate('spl_token_metadata_interface:updating_field') */\r\n                    221, 233, 49, 45, 181, 202, 220, 200,\r\n                ]),\r\n                getStructEncoder([\r\n                    ['field', getDataEnumCodec(getFieldCodec())],\r\n                    ['value', getStringEncoder()],\r\n                ]),\r\n            ).encode({ field: getFieldConfig(field), value }),\r\n        ),\r\n    });\r\n}\r\n\r\nexport interface RemoveKeyInstructionArgs {\r\n    programId: PublicKey;\r\n    metadata: PublicKey;\r\n    updateAuthority: PublicKey;\r\n    key: string;\r\n    idempotent: boolean;\r\n}\r\n\r\nexport function createRemoveKeyInstruction(args: RemoveKeyInstructionArgs) {\r\n    const { programId, metadata, updateAuthority, key, idempotent } = args;\r\n    return new TransactionInstruction({\r\n        programId,\r\n        keys: [\r\n            { isSigner: false, isWritable: true, pubkey: metadata },\r\n            { isSigner: true, isWritable: false, pubkey: updateAuthority },\r\n        ],\r\n        data: Buffer.from(\r\n            getInstructionEncoder(\r\n                new Uint8Array([\r\n                    /* await splDiscriminate('spl_token_metadata_interface:remove_key_ix') */\r\n                    234, 18, 32, 56, 89, 141, 37, 181,\r\n                ]),\r\n                getStructEncoder([\r\n                    ['idempotent', getBooleanEncoder()],\r\n                    ['key', getStringEncoder()],\r\n                ]),\r\n            ).encode({ idempotent, key }),\r\n        ),\r\n    });\r\n}\r\n\r\nexport interface UpdateAuthorityInstructionArgs {\r\n    programId: PublicKey;\r\n    metadata: PublicKey;\r\n    oldAuthority: PublicKey;\r\n    newAuthority: PublicKey | null;\r\n}\r\n\r\nexport function createUpdateAuthorityInstruction(args: UpdateAuthorityInstructionArgs): TransactionInstruction {\r\n    const { programId, metadata, oldAuthority, newAuthority } = args;\r\n\r\n    return new TransactionInstruction({\r\n        programId,\r\n        keys: [\r\n            { isSigner: false, isWritable: true, pubkey: metadata },\r\n            { isSigner: true, isWritable: false, pubkey: oldAuthority },\r\n        ],\r\n        data: Buffer.from(\r\n            getInstructionEncoder(\r\n                new Uint8Array([\r\n                    /* await splDiscriminate('spl_token_metadata_interface:update_the_authority') */\r\n                    215, 228, 166, 228, 84, 100, 86, 123,\r\n                ]),\r\n                getStructEncoder([['newAuthority', getPublicKeyEncoder()]]),\r\n            ).encode({ newAuthority: newAuthority ?? SystemProgram.programId }),\r\n        ),\r\n    });\r\n}\r\n\r\nexport interface EmitInstructionArgs {\r\n    programId: PublicKey;\r\n    metadata: PublicKey;\r\n    start?: bigint;\r\n    end?: bigint;\r\n}\r\n\r\nexport function createEmitInstruction(args: EmitInstructionArgs): TransactionInstruction {\r\n    const { programId, metadata, start, end } = args;\r\n    return new TransactionInstruction({\r\n        programId,\r\n        keys: [{ isSigner: false, isWritable: false, pubkey: metadata }],\r\n        data: Buffer.from(\r\n            getInstructionEncoder(\r\n                new Uint8Array([\r\n                    /* await splDiscriminate('spl_token_metadata_interface:emitter') */\r\n                    250, 166, 180, 250, 13, 12, 184, 70,\r\n                ]),\r\n                getStructEncoder([\r\n                    ['start', getOptionEncoder(getU64Encoder())],\r\n                    ['end', getOptionEncoder(getU64Encoder())],\r\n                ]),\r\n            ).encode({ start: start ?? null, end: end ?? null }),\r\n        ),\r\n    });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
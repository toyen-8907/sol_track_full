{"ast":null,"code":"import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMint2Instruction } from '../instructions/initializeMint2.js';\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from '../state/mint.js';\n/**\r\n * Create and initialize a new mint\r\n *\r\n * @param connection      Connection to use\r\n * @param payer           Payer of the transaction and initialization fees\r\n * @param mintAuthority   Account or multisig that will control minting\r\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\r\n * @param decimals        Location of the decimal place\r\n * @param keypair         Optional keypair, defaulting to a new random one\r\n * @param confirmOptions  Options for confirming the transaction\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Address of the new mint\r\n */\nexport async function createMint(connection, payer, mintAuthority, freezeAuthority, decimals, keypair = Keypair.generate(), confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const lamports = await getMinimumBalanceForRentExemptMint(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: MINT_SIZE,\n    lamports,\n    programId\n  }), createInitializeMint2Instruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"names":["Keypair","sendAndConfirmTransaction","SystemProgram","Transaction","TOKEN_PROGRAM_ID","createInitializeMint2Instruction","getMinimumBalanceForRentExemptMint","MINT_SIZE","createMint","connection","payer","mintAuthority","freezeAuthority","decimals","keypair","generate","confirmOptions","programId","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\actions\\createMint.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\r\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport { createInitializeMint2Instruction } from '../instructions/initializeMint2.js';\r\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from '../state/mint.js';\r\n\r\n/**\r\n * Create and initialize a new mint\r\n *\r\n * @param connection      Connection to use\r\n * @param payer           Payer of the transaction and initialization fees\r\n * @param mintAuthority   Account or multisig that will control minting\r\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\r\n * @param decimals        Location of the decimal place\r\n * @param keypair         Optional keypair, defaulting to a new random one\r\n * @param confirmOptions  Options for confirming the transaction\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Address of the new mint\r\n */\r\nexport async function createMint(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    mintAuthority: PublicKey,\r\n    freezeAuthority: PublicKey | null,\r\n    decimals: number,\r\n    keypair = Keypair.generate(),\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): Promise<PublicKey> {\r\n    const lamports = await getMinimumBalanceForRentExemptMint(connection);\r\n\r\n    const transaction = new Transaction().add(\r\n        SystemProgram.createAccount({\r\n            fromPubkey: payer.publicKey,\r\n            newAccountPubkey: keypair.publicKey,\r\n            space: MINT_SIZE,\r\n            lamports,\r\n            programId,\r\n        }),\r\n        createInitializeMint2Instruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId),\r\n    );\r\n\r\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\r\n\r\n    return keypair.publicKey;\r\n}\r\n"],"mappings":"AACA,SAASA,OAAO,EAAEC,yBAAyB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AAChG,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,gCAAgC,QAAQ,oCAAoC;AACrF,SAASC,kCAAkC,EAAEC,SAAS,QAAQ,kBAAkB;AAEhF;;;;;;;;;;;;;;AAcA,OAAO,eAAeC,UAAUA,CAC5BC,UAAsB,EACtBC,KAAa,EACbC,aAAwB,EACxBC,eAAiC,EACjCC,QAAgB,EAChBC,OAAO,GAAGd,OAAO,CAACe,QAAQ,EAAE,EAC5BC,cAA+B,EAC/BC,SAAS,GAAGb,gBAAgB;EAE5B,MAAMc,QAAQ,GAAG,MAAMZ,kCAAkC,CAACG,UAAU,CAAC;EAErE,MAAMU,WAAW,GAAG,IAAIhB,WAAW,EAAE,CAACiB,GAAG,CACrClB,aAAa,CAACmB,aAAa,CAAC;IACxBC,UAAU,EAAEZ,KAAK,CAACa,SAAS;IAC3BC,gBAAgB,EAAEV,OAAO,CAACS,SAAS;IACnCE,KAAK,EAAElB,SAAS;IAChBW,QAAQ;IACRD;GACH,CAAC,EACFZ,gCAAgC,CAACS,OAAO,CAACS,SAAS,EAAEV,QAAQ,EAAEF,aAAa,EAAEC,eAAe,EAAEK,SAAS,CAAC,CAC3G;EAED,MAAMhB,yBAAyB,CAACQ,UAAU,EAAEU,WAAW,EAAE,CAACT,KAAK,EAAEI,OAAO,CAAC,EAAEE,cAAc,CAAC;EAE1F,OAAOF,OAAO,CAACS,SAAS;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
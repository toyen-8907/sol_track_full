{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createRecoverNestedInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n/**\r\n * Recover funds funds in an associated token account which is owned by an associated token account\r\n *\r\n * @param connection               Connection to use\r\n * @param payer                    Payer of the transaction and initialization fees\r\n * @param owner                    Owner of original ATA\r\n * @param mint                     Mint for the original ATA\r\n * @param nestedMint               Mint for the nested ATA\r\n * @param confirmOptions           Options for confirming the transaction\r\n * @param programId                SPL Token program account\r\n * @param associatedTokenProgramId SPL Associated Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\nexport async function recoverNested(connection, payer, owner, mint, nestedMint, confirmOptions, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n  const ownerAssociatedToken = getAssociatedTokenAddressSync(mint, owner.publicKey, false, programId, associatedTokenProgramId);\n  const destinationAssociatedToken = getAssociatedTokenAddressSync(nestedMint, owner.publicKey, false, programId, associatedTokenProgramId);\n  const nestedAssociatedToken = getAssociatedTokenAddressSync(nestedMint, ownerAssociatedToken, true, programId, associatedTokenProgramId);\n  const transaction = new Transaction().add(createRecoverNestedInstruction(nestedAssociatedToken, nestedMint, destinationAssociatedToken, ownerAssociatedToken, mint, owner.publicKey, programId, associatedTokenProgramId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, owner], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","createRecoverNestedInstruction","getAssociatedTokenAddressSync","recoverNested","connection","payer","owner","mint","nestedMint","confirmOptions","programId","associatedTokenProgramId","ownerAssociatedToken","publicKey","destinationAssociatedToken","nestedAssociatedToken","transaction","add"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\actions\\recoverNested.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\r\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport { createRecoverNestedInstruction } from '../instructions/associatedTokenAccount.js';\r\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\r\n\r\n/**\r\n * Recover funds funds in an associated token account which is owned by an associated token account\r\n *\r\n * @param connection               Connection to use\r\n * @param payer                    Payer of the transaction and initialization fees\r\n * @param owner                    Owner of original ATA\r\n * @param mint                     Mint for the original ATA\r\n * @param nestedMint               Mint for the nested ATA\r\n * @param confirmOptions           Options for confirming the transaction\r\n * @param programId                SPL Token program account\r\n * @param associatedTokenProgramId SPL Associated Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\r\nexport async function recoverNested(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    owner: Signer,\r\n    mint: PublicKey,\r\n    nestedMint: PublicKey,\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_PROGRAM_ID,\r\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\r\n): Promise<TransactionSignature> {\r\n    const ownerAssociatedToken = getAssociatedTokenAddressSync(\r\n        mint,\r\n        owner.publicKey,\r\n        false,\r\n        programId,\r\n        associatedTokenProgramId,\r\n    );\r\n\r\n    const destinationAssociatedToken = getAssociatedTokenAddressSync(\r\n        nestedMint,\r\n        owner.publicKey,\r\n        false,\r\n        programId,\r\n        associatedTokenProgramId,\r\n    );\r\n\r\n    const nestedAssociatedToken = getAssociatedTokenAddressSync(\r\n        nestedMint,\r\n        ownerAssociatedToken,\r\n        true,\r\n        programId,\r\n        associatedTokenProgramId,\r\n    );\r\n\r\n    const transaction = new Transaction().add(\r\n        createRecoverNestedInstruction(\r\n            nestedAssociatedToken,\r\n            nestedMint,\r\n            destinationAssociatedToken,\r\n            ownerAssociatedToken,\r\n            mint,\r\n            owner.publicKey,\r\n            programId,\r\n            associatedTokenProgramId,\r\n        ),\r\n    );\r\n\r\n    return await sendAndConfirmTransaction(connection, transaction, [payer, owner], confirmOptions);\r\n}\r\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,2BAA2B,EAAEC,gBAAgB,QAAQ,iBAAiB;AAC/E,SAASC,8BAA8B,QAAQ,2CAA2C;AAC1F,SAASC,6BAA6B,QAAQ,kBAAkB;AAEhE;;;;;;;;;;;;;;AAcA,OAAO,eAAeC,aAAaA,CAC/BC,UAAsB,EACtBC,KAAa,EACbC,KAAa,EACbC,IAAe,EACfC,UAAqB,EACrBC,cAA+B,EAC/BC,SAAS,GAAGV,gBAAgB,EAC5BW,wBAAwB,GAAGZ,2BAA2B;EAEtD,MAAMa,oBAAoB,GAAGV,6BAA6B,CACtDK,IAAI,EACJD,KAAK,CAACO,SAAS,EACf,KAAK,EACLH,SAAS,EACTC,wBAAwB,CAC3B;EAED,MAAMG,0BAA0B,GAAGZ,6BAA6B,CAC5DM,UAAU,EACVF,KAAK,CAACO,SAAS,EACf,KAAK,EACLH,SAAS,EACTC,wBAAwB,CAC3B;EAED,MAAMI,qBAAqB,GAAGb,6BAA6B,CACvDM,UAAU,EACVI,oBAAoB,EACpB,IAAI,EACJF,SAAS,EACTC,wBAAwB,CAC3B;EAED,MAAMK,WAAW,GAAG,IAAIlB,WAAW,EAAE,CAACmB,GAAG,CACrChB,8BAA8B,CAC1Bc,qBAAqB,EACrBP,UAAU,EACVM,0BAA0B,EAC1BF,oBAAoB,EACpBL,IAAI,EACJD,KAAK,CAACO,SAAS,EACfH,SAAS,EACTC,wBAAwB,CAC3B,CACJ;EAED,OAAO,MAAMd,yBAAyB,CAACO,UAAU,EAAEY,WAAW,EAAE,CAACX,KAAK,EAAEC,KAAK,CAAC,EAAEG,cAAc,CAAC;AACnG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const transferInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\r\n * Construct a Transfer instruction\r\n *\r\n * @param source       Source account\r\n * @param destination  Destination account\r\n * @param owner        Owner of the source account\r\n * @param amount       Number of tokens to transfer\r\n * @param multiSigners Signing accounts if `owner` is a multisig\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createTransferInstruction(source, destination, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n  const keys = addSigners([{\n    pubkey: source,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(transferInstructionData.span);\n  transferInstructionData.encode({\n    instruction: TokenInstruction.Transfer,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\r\n * Decode a Transfer instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\nexport function decodeTransferInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== transferInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      source,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeTransferInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.Transfer) throw new TokenInvalidInstructionTypeError();\n  if (!source || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      source,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\r\n * Decode a Transfer instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\nexport function decodeTransferInstructionUnchecked({\n  programId,\n  keys: [source, destination, owner, ...multiSigners],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      source,\n      destination,\n      owner,\n      multiSigners\n    },\n    data: transferInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","transferInstructionData","createTransferInstruction","source","destination","owner","amount","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","Transfer","BigInt","decodeTransferInstruction","equals","length","decodeTransferInstructionUnchecked","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\transfer.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport { u64 } from '@solana/buffer-layout-utils';\r\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\r\nimport { TransactionInstruction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport {\r\n    TokenInvalidInstructionDataError,\r\n    TokenInvalidInstructionKeysError,\r\n    TokenInvalidInstructionProgramError,\r\n    TokenInvalidInstructionTypeError,\r\n} from '../errors.js';\r\nimport { addSigners } from './internal.js';\r\nimport { TokenInstruction } from './types.js';\r\n\r\n/** TODO: docs */\r\nexport interface TransferInstructionData {\r\n    instruction: TokenInstruction.Transfer;\r\n    amount: bigint;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const transferInstructionData = struct<TransferInstructionData>([u8('instruction'), u64('amount')]);\r\n\r\n/**\r\n * Construct a Transfer instruction\r\n *\r\n * @param source       Source account\r\n * @param destination  Destination account\r\n * @param owner        Owner of the source account\r\n * @param amount       Number of tokens to transfer\r\n * @param multiSigners Signing accounts if `owner` is a multisig\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createTransferInstruction(\r\n    source: PublicKey,\r\n    destination: PublicKey,\r\n    owner: PublicKey,\r\n    amount: number | bigint,\r\n    multiSigners: (Signer | PublicKey)[] = [],\r\n    programId = TOKEN_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    const keys = addSigners(\r\n        [\r\n            { pubkey: source, isSigner: false, isWritable: true },\r\n            { pubkey: destination, isSigner: false, isWritable: true },\r\n        ],\r\n        owner,\r\n        multiSigners,\r\n    );\r\n\r\n    const data = Buffer.alloc(transferInstructionData.span);\r\n    transferInstructionData.encode(\r\n        {\r\n            instruction: TokenInstruction.Transfer,\r\n            amount: BigInt(amount),\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\n/** A decoded, valid Transfer instruction */\r\nexport interface DecodedTransferInstruction {\r\n    programId: PublicKey;\r\n    keys: {\r\n        source: AccountMeta;\r\n        destination: AccountMeta;\r\n        owner: AccountMeta;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: TokenInstruction.Transfer;\r\n        amount: bigint;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a Transfer instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\r\nexport function decodeTransferInstruction(\r\n    instruction: TransactionInstruction,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): DecodedTransferInstruction {\r\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\r\n    if (instruction.data.length !== transferInstructionData.span) throw new TokenInvalidInstructionDataError();\r\n\r\n    const {\r\n        keys: { source, destination, owner, multiSigners },\r\n        data,\r\n    } = decodeTransferInstructionUnchecked(instruction);\r\n    if (data.instruction !== TokenInstruction.Transfer) throw new TokenInvalidInstructionTypeError();\r\n    if (!source || !destination || !owner) throw new TokenInvalidInstructionKeysError();\r\n\r\n    // TODO: key checks?\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            source,\r\n            destination,\r\n            owner,\r\n            multiSigners,\r\n        },\r\n        data,\r\n    };\r\n}\r\n\r\n/** A decoded, non-validated Transfer instruction */\r\nexport interface DecodedTransferInstructionUnchecked {\r\n    programId: PublicKey;\r\n    keys: {\r\n        source: AccountMeta | undefined;\r\n        destination: AccountMeta | undefined;\r\n        owner: AccountMeta | undefined;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: number;\r\n        amount: bigint;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a Transfer instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\r\nexport function decodeTransferInstructionUnchecked({\r\n    programId,\r\n    keys: [source, destination, owner, ...multiSigners],\r\n    data,\r\n}: TransactionInstruction): DecodedTransferInstructionUnchecked {\r\n    return {\r\n        programId,\r\n        keys: {\r\n            source,\r\n            destination,\r\n            owner,\r\n            multiSigners,\r\n        },\r\n        data: transferInstructionData.decode(data),\r\n    };\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAClD,SAASC,GAAG,QAAQ,6BAA6B;AAEjD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,gBAAgB,QAAQ,YAAY;AAQ7C;AACA,OAAO,MAAMC,uBAAuB,GAAGX,MAAM,CAA0B,CAACC,EAAE,CAAC,aAAa,CAAC,EAAEC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;AAE1G;;;;;;;;;;;;AAYA,OAAM,SAAUU,yBAAyBA,CACrCC,MAAiB,EACjBC,WAAsB,EACtBC,KAAgB,EAChBC,MAAuB,EACvBC,YAAA,GAAuC,EAAE,EACzCC,SAAS,GAAGd,gBAAgB;EAE5B,MAAMe,IAAI,GAAGV,UAAU,CACnB,CACI;IAAEW,MAAM,EAAEP,MAAM;IAAEQ,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACrD;IAAEF,MAAM,EAAEN,WAAW;IAAEO,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAC7D,EACDP,KAAK,EACLE,YAAY,CACf;EAED,MAAMM,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACd,uBAAuB,CAACe,IAAI,CAAC;EACvDf,uBAAuB,CAACgB,MAAM,CAC1B;IACIC,WAAW,EAAElB,gBAAgB,CAACmB,QAAQ;IACtCb,MAAM,EAAEc,MAAM,CAACd,MAAM;GACxB,EACDO,IAAI,CACP;EAED,OAAO,IAAIpB,sBAAsB,CAAC;IAAEgB,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAiBA;;;;;;;;AAQA,OAAM,SAAUQ,yBAAyBA,CACrCH,WAAmC,EACnCV,SAAS,GAAGd,gBAAgB;EAE5B,IAAI,CAACwB,WAAW,CAACV,SAAS,CAACc,MAAM,CAACd,SAAS,CAAC,EAAE,MAAM,IAAIX,mCAAmC,EAAE;EAC7F,IAAIqB,WAAW,CAACL,IAAI,CAACU,MAAM,KAAKtB,uBAAuB,CAACe,IAAI,EAAE,MAAM,IAAIrB,gCAAgC,EAAE;EAE1G,MAAM;IACFc,IAAI,EAAE;MAAEN,MAAM;MAAEC,WAAW;MAAEC,KAAK;MAAEE;IAAY,CAAE;IAClDM;EAAI,CACP,GAAGW,kCAAkC,CAACN,WAAW,CAAC;EACnD,IAAIL,IAAI,CAACK,WAAW,KAAKlB,gBAAgB,CAACmB,QAAQ,EAAE,MAAM,IAAIrB,gCAAgC,EAAE;EAChG,IAAI,CAACK,MAAM,IAAI,CAACC,WAAW,IAAI,CAACC,KAAK,EAAE,MAAM,IAAIT,gCAAgC,EAAE;EAEnF;EAEA,OAAO;IACHY,SAAS;IACTC,IAAI,EAAE;MACFN,MAAM;MACNC,WAAW;MACXC,KAAK;MACLE;KACH;IACDM;GACH;AACL;AAiBA;;;;;;;AAOA,OAAM,SAAUW,kCAAkCA,CAAC;EAC/ChB,SAAS;EACTC,IAAI,EAAE,CAACN,MAAM,EAAEC,WAAW,EAAEC,KAAK,EAAE,GAAGE,YAAY,CAAC;EACnDM;AAAI,CACiB;EACrB,OAAO;IACHL,SAAS;IACTC,IAAI,EAAE;MACFN,MAAM;MACNC,WAAW;MACXC,KAAK;MACLE;KACH;IACDM,IAAI,EAAEZ,uBAAuB,CAACwB,MAAM,CAACZ,IAAI;GAC5C;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\nimport { COptionPublicKeyLayout } from '../serialization.js';\n/** Authority types defined by the program */\nexport var AuthorityType;\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"MintTokens\"] = 0] = \"MintTokens\";\n  AuthorityType[AuthorityType[\"FreezeAccount\"] = 1] = \"FreezeAccount\";\n  AuthorityType[AuthorityType[\"AccountOwner\"] = 2] = \"AccountOwner\";\n  AuthorityType[AuthorityType[\"CloseAccount\"] = 3] = \"CloseAccount\";\n  AuthorityType[AuthorityType[\"TransferFeeConfig\"] = 4] = \"TransferFeeConfig\";\n  AuthorityType[AuthorityType[\"WithheldWithdraw\"] = 5] = \"WithheldWithdraw\";\n  AuthorityType[AuthorityType[\"CloseMint\"] = 6] = \"CloseMint\";\n  AuthorityType[AuthorityType[\"InterestRate\"] = 7] = \"InterestRate\";\n  AuthorityType[AuthorityType[\"PermanentDelegate\"] = 8] = \"PermanentDelegate\";\n  AuthorityType[AuthorityType[\"ConfidentialTransferMint\"] = 9] = \"ConfidentialTransferMint\";\n  AuthorityType[AuthorityType[\"TransferHookProgramId\"] = 10] = \"TransferHookProgramId\";\n  AuthorityType[AuthorityType[\"ConfidentialTransferFeeConfig\"] = 11] = \"ConfidentialTransferFeeConfig\";\n  AuthorityType[AuthorityType[\"MetadataPointer\"] = 12] = \"MetadataPointer\";\n  AuthorityType[AuthorityType[\"GroupPointer\"] = 13] = \"GroupPointer\";\n  AuthorityType[AuthorityType[\"GroupMemberPointer\"] = 14] = \"GroupMemberPointer\";\n})(AuthorityType || (AuthorityType = {}));\n/** TODO: docs */\nexport const setAuthorityInstructionData = struct([u8('instruction'), u8('authorityType'), new COptionPublicKeyLayout('newAuthority')]);\n/**\r\n * Construct a SetAuthority instruction\r\n *\r\n * @param account          Address of the token account\r\n * @param currentAuthority Current authority of the specified type\r\n * @param authorityType    Type of authority to set\r\n * @param newAuthority     New authority of the account\r\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\r\n * @param programId        SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createSetAuthorityInstruction(account, currentAuthority, authorityType, newAuthority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], currentAuthority, multiSigners);\n  const data = Buffer.alloc(setAuthorityInstructionData.span);\n  setAuthorityInstructionData.encode({\n    instruction: TokenInstruction.SetAuthority,\n    authorityType,\n    newAuthority\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\r\n * Decode a SetAuthority instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\nexport function decodeSetAuthorityInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== setAuthorityInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data\n  } = decodeSetAuthorityInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.SetAuthority) throw new TokenInvalidInstructionTypeError();\n  if (!account || !currentAuthority) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data\n  };\n}\n/**\r\n * Decode a SetAuthority instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\nexport function decodeSetAuthorityInstructionUnchecked({\n  programId,\n  keys: [account, currentAuthority, ...multiSigners],\n  data\n}) {\n  const {\n    instruction,\n    authorityType,\n    newAuthority\n  } = setAuthorityInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data: {\n      instruction,\n      authorityType,\n      newAuthority\n    }\n  };\n}","map":{"version":3,"names":["struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","COptionPublicKeyLayout","AuthorityType","setAuthorityInstructionData","createSetAuthorityInstruction","account","currentAuthority","authorityType","newAuthority","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","SetAuthority","decodeSetAuthorityInstruction","equals","length","decodeSetAuthorityInstructionUnchecked","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\setAuthority.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport { publicKey } from '@solana/buffer-layout-utils';\r\nimport type { AccountMeta, Signer, PublicKey } from '@solana/web3.js';\r\nimport { TransactionInstruction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport {\r\n    TokenInvalidInstructionDataError,\r\n    TokenInvalidInstructionKeysError,\r\n    TokenInvalidInstructionProgramError,\r\n    TokenInvalidInstructionTypeError,\r\n} from '../errors.js';\r\nimport { addSigners } from './internal.js';\r\nimport { TokenInstruction } from './types.js';\r\nimport { COptionPublicKeyLayout } from '../serialization.js';\r\n\r\n/** Authority types defined by the program */\r\nexport enum AuthorityType {\r\n    MintTokens = 0,\r\n    FreezeAccount = 1,\r\n    AccountOwner = 2,\r\n    CloseAccount = 3,\r\n    TransferFeeConfig = 4,\r\n    WithheldWithdraw = 5,\r\n    CloseMint = 6,\r\n    InterestRate = 7,\r\n    PermanentDelegate = 8,\r\n    ConfidentialTransferMint = 9,\r\n    TransferHookProgramId = 10,\r\n    ConfidentialTransferFeeConfig = 11,\r\n    MetadataPointer = 12,\r\n    GroupPointer = 13,\r\n    GroupMemberPointer = 14,\r\n}\r\n\r\n/** TODO: docs */\r\nexport interface SetAuthorityInstructionData {\r\n    instruction: TokenInstruction.SetAuthority;\r\n    authorityType: AuthorityType;\r\n    newAuthority: PublicKey | null;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const setAuthorityInstructionData = struct<SetAuthorityInstructionData>([\r\n    u8('instruction'),\r\n    u8('authorityType'),\r\n    new COptionPublicKeyLayout('newAuthority'),\r\n]);\r\n\r\n/**\r\n * Construct a SetAuthority instruction\r\n *\r\n * @param account          Address of the token account\r\n * @param currentAuthority Current authority of the specified type\r\n * @param authorityType    Type of authority to set\r\n * @param newAuthority     New authority of the account\r\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\r\n * @param programId        SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createSetAuthorityInstruction(\r\n    account: PublicKey,\r\n    currentAuthority: PublicKey,\r\n    authorityType: AuthorityType,\r\n    newAuthority: PublicKey | null,\r\n    multiSigners: (Signer | PublicKey)[] = [],\r\n    programId = TOKEN_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], currentAuthority, multiSigners);\r\n\r\n    const data = Buffer.alloc(setAuthorityInstructionData.span);\r\n    setAuthorityInstructionData.encode(\r\n        {\r\n            instruction: TokenInstruction.SetAuthority,\r\n            authorityType,\r\n            newAuthority,\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\n/** A decoded, valid SetAuthority instruction */\r\nexport interface DecodedSetAuthorityInstruction {\r\n    programId: PublicKey;\r\n    keys: {\r\n        account: AccountMeta;\r\n        currentAuthority: AccountMeta;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: TokenInstruction.SetAuthority;\r\n        authorityType: AuthorityType;\r\n        newAuthority: PublicKey | null;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a SetAuthority instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\r\nexport function decodeSetAuthorityInstruction(\r\n    instruction: TransactionInstruction,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): DecodedSetAuthorityInstruction {\r\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\r\n    if (instruction.data.length !== setAuthorityInstructionData.span) throw new TokenInvalidInstructionDataError();\r\n\r\n    const {\r\n        keys: { account, currentAuthority, multiSigners },\r\n        data,\r\n    } = decodeSetAuthorityInstructionUnchecked(instruction);\r\n    if (data.instruction !== TokenInstruction.SetAuthority) throw new TokenInvalidInstructionTypeError();\r\n    if (!account || !currentAuthority) throw new TokenInvalidInstructionKeysError();\r\n\r\n    // TODO: key checks?\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            account,\r\n            currentAuthority,\r\n            multiSigners,\r\n        },\r\n        data,\r\n    };\r\n}\r\n\r\n/** A decoded, non-validated SetAuthority instruction */\r\nexport interface DecodedSetAuthorityInstructionUnchecked {\r\n    programId: PublicKey;\r\n    keys: {\r\n        account: AccountMeta | undefined;\r\n        currentAuthority: AccountMeta | undefined;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: number;\r\n        authorityType: AuthorityType;\r\n        newAuthority: PublicKey | null;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a SetAuthority instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\r\nexport function decodeSetAuthorityInstructionUnchecked({\r\n    programId,\r\n    keys: [account, currentAuthority, ...multiSigners],\r\n    data,\r\n}: TransactionInstruction): DecodedSetAuthorityInstructionUnchecked {\r\n    const { instruction, authorityType, newAuthority } = setAuthorityInstructionData.decode(data);\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            account,\r\n            currentAuthority,\r\n            multiSigners,\r\n        },\r\n        data: {\r\n            instruction,\r\n            authorityType,\r\n            newAuthority,\r\n        },\r\n    };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { seq, struct, u16, u8 } from '@solana/buffer-layout';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/**\r\n * Construct a Reallocate instruction\r\n *\r\n * @param account        Address of the token account\r\n * @param payer          Address paying for the reallocation\r\n * @param extensionTypes Extensions to reallocate for\r\n * @param owner          Owner of the account\r\n * @param multiSigners   Signing accounts if `owner` is a multisig\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createReallocateInstruction(account, payer, extensionTypes, owner, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const baseKeys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  const keys = addSigners(baseKeys, owner, multiSigners);\n  const reallocateInstructionData = struct([u8('instruction'), seq(u16(), extensionTypes.length, 'extensionTypes')]);\n  const data = Buffer.alloc(reallocateInstructionData.span);\n  reallocateInstructionData.encode({\n    instruction: TokenInstruction.Reallocate,\n    extensionTypes\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":{"version":3,"names":["seq","struct","u16","u8","SystemProgram","TransactionInstruction","programSupportsExtensions","TOKEN_2022_PROGRAM_ID","TokenUnsupportedInstructionError","addSigners","TokenInstruction","createReallocateInstruction","account","payer","extensionTypes","owner","multiSigners","programId","baseKeys","pubkey","isSigner","isWritable","keys","reallocateInstructionData","length","data","Buffer","alloc","span","encode","instruction","Reallocate"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\reallocate.ts"],"sourcesContent":["import { seq, struct, u16, u8 } from '@solana/buffer-layout';\r\nimport type { PublicKey, Signer } from '@solana/web3.js';\r\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\r\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../constants.js';\r\nimport { TokenUnsupportedInstructionError } from '../errors.js';\r\nimport type { ExtensionType } from '../extensions/extensionType.js';\r\nimport { addSigners } from './internal.js';\r\nimport { TokenInstruction } from './types.js';\r\n\r\n/** TODO: docs */\r\nexport interface ReallocateInstructionData {\r\n    instruction: TokenInstruction.Reallocate;\r\n    extensionTypes: ExtensionType[];\r\n}\r\n\r\n/**\r\n * Construct a Reallocate instruction\r\n *\r\n * @param account        Address of the token account\r\n * @param payer          Address paying for the reallocation\r\n * @param extensionTypes Extensions to reallocate for\r\n * @param owner          Owner of the account\r\n * @param multiSigners   Signing accounts if `owner` is a multisig\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createReallocateInstruction(\r\n    account: PublicKey,\r\n    payer: PublicKey,\r\n    extensionTypes: ExtensionType[],\r\n    owner: PublicKey,\r\n    multiSigners: (Signer | PublicKey)[] = [],\r\n    programId = TOKEN_2022_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    if (!programSupportsExtensions(programId)) {\r\n        throw new TokenUnsupportedInstructionError();\r\n    }\r\n    const baseKeys = [\r\n        { pubkey: account, isSigner: false, isWritable: true },\r\n        { pubkey: payer, isSigner: true, isWritable: true },\r\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    ];\r\n    const keys = addSigners(baseKeys, owner, multiSigners);\r\n\r\n    const reallocateInstructionData = struct<ReallocateInstructionData>([\r\n        u8('instruction'),\r\n        seq(u16(), extensionTypes.length, 'extensionTypes'),\r\n    ]);\r\n    const data = Buffer.alloc(reallocateInstructionData.span);\r\n    reallocateInstructionData.encode({ instruction: TokenInstruction.Reallocate, extensionTypes }, data);\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,MAAM,EAAEC,GAAG,EAAEC,EAAE,QAAQ,uBAAuB;AAE5D,SAASC,aAAa,EAAEC,sBAAsB,QAAQ,iBAAiB;AACvE,SAASC,yBAAyB,EAAEC,qBAAqB,QAAQ,iBAAiB;AAClF,SAASC,gCAAgC,QAAQ,cAAc;AAE/D,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,gBAAgB,QAAQ,YAAY;AAQ7C;;;;;;;;;;;;AAYA,OAAM,SAAUC,2BAA2BA,CACvCC,OAAkB,EAClBC,KAAgB,EAChBC,cAA+B,EAC/BC,KAAgB,EAChBC,YAAA,GAAuC,EAAE,EACzCC,SAAS,GAAGV,qBAAqB;EAEjC,IAAI,CAACD,yBAAyB,CAACW,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIT,gCAAgC,EAAE;EAChD;EACA,MAAMU,QAAQ,GAAG,CACb;IAAEC,MAAM,EAAEP,OAAO;IAAEQ,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACtD;IAAEF,MAAM,EAAEN,KAAK;IAAEO,QAAQ,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAI,CAAE,EACnD;IAAEF,MAAM,EAAEf,aAAa,CAACa,SAAS;IAAEG,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CAC1E;EACD,MAAMC,IAAI,GAAGb,UAAU,CAACS,QAAQ,EAAEH,KAAK,EAAEC,YAAY,CAAC;EAEtD,MAAMO,yBAAyB,GAAGtB,MAAM,CAA4B,CAChEE,EAAE,CAAC,aAAa,CAAC,EACjBH,GAAG,CAACE,GAAG,EAAE,EAAEY,cAAc,CAACU,MAAM,EAAE,gBAAgB,CAAC,CACtD,CAAC;EACF,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACJ,yBAAyB,CAACK,IAAI,CAAC;EACzDL,yBAAyB,CAACM,MAAM,CAAC;IAAEC,WAAW,EAAEpB,gBAAgB,CAACqB,UAAU;IAAEjB;EAAc,CAAE,EAAEW,IAAI,CAAC;EAEpG,OAAO,IAAIpB,sBAAsB,CAAC;IAAEiB,IAAI;IAAEL,SAAS;IAAEQ;EAAI,CAAE,CAAC;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
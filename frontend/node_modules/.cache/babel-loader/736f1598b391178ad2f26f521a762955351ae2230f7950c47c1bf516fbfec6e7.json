{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createRevokeInstruction } from '../instructions/revoke.js';\nimport { getSigners } from './internal.js';\n/**\r\n * Revoke approval for the transfer of tokens from an account\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param account        Address of the token account\r\n * @param owner          Owner of the account\r\n * @param multiSigners   Signing accounts if `owner` is a multisig\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\nexport async function revoke(connection, payer, account, owner, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createRevokeInstruction(account, ownerPublicKey, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createRevokeInstruction","getSigners","revoke","connection","payer","account","owner","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\actions\\revoke.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\r\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport { createRevokeInstruction } from '../instructions/revoke.js';\r\nimport { getSigners } from './internal.js';\r\n\r\n/**\r\n * Revoke approval for the transfer of tokens from an account\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param account        Address of the token account\r\n * @param owner          Owner of the account\r\n * @param multiSigners   Signing accounts if `owner` is a multisig\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\r\nexport async function revoke(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    account: PublicKey,\r\n    owner: Signer | PublicKey,\r\n    multiSigners: Signer[] = [],\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): Promise<TransactionSignature> {\r\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\r\n\r\n    const transaction = new Transaction().add(\r\n        createRevokeInstruction(account, ownerPublicKey, multiSigners, programId),\r\n    );\r\n\r\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\r\n}\r\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;;;;;;;;;;AAaA,OAAO,eAAeC,MAAMA,CACxBC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,KAAyB,EACzBC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGV,gBAAgB;EAE5B,MAAM,CAACW,cAAc,EAAEC,OAAO,CAAC,GAAGV,UAAU,CAACK,KAAK,EAAEC,YAAY,CAAC;EAEjE,MAAMK,WAAW,GAAG,IAAId,WAAW,EAAE,CAACe,GAAG,CACrCb,uBAAuB,CAACK,OAAO,EAAEK,cAAc,EAAEH,YAAY,EAAEE,SAAS,CAAC,CAC5E;EAED,OAAO,MAAMZ,yBAAyB,CAACM,UAAU,EAAES,WAAW,EAAE,CAACR,KAAK,EAAE,GAAGO,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
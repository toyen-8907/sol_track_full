{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var CpiGuardInstruction;\n(function (CpiGuardInstruction) {\n  CpiGuardInstruction[CpiGuardInstruction[\"Enable\"] = 0] = \"Enable\";\n  CpiGuardInstruction[CpiGuardInstruction[\"Disable\"] = 1] = \"Disable\";\n})(CpiGuardInstruction || (CpiGuardInstruction = {}));\n/** TODO: docs */\nexport const cpiGuardInstructionData = struct([u8('instruction'), u8('cpiGuardInstruction')]);\n/**\n * Construct an EnableCpiGuard instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createEnableCpiGuardInstruction(account, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  return createCpiGuardInstruction(CpiGuardInstruction.Enable, account, authority, multiSigners, programId);\n}\n/**\n * Construct a DisableCpiGuard instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createDisableCpiGuardInstruction(account, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  return createCpiGuardInstruction(CpiGuardInstruction.Disable, account, authority, multiSigners, programId);\n}\nfunction createCpiGuardInstruction(cpiGuardInstruction, account, authority, multiSigners, programId) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(cpiGuardInstructionData.span);\n  cpiGuardInstructionData.encode({\n    instruction: TokenInstruction.CpiGuardExtension,\n    cpiGuardInstruction\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":{"version":3,"names":["struct","u8","TransactionInstruction","programSupportsExtensions","TOKEN_2022_PROGRAM_ID","TokenUnsupportedInstructionError","addSigners","TokenInstruction","CpiGuardInstruction","cpiGuardInstructionData","createEnableCpiGuardInstruction","account","authority","multiSigners","programId","createCpiGuardInstruction","Enable","createDisableCpiGuardInstruction","Disable","cpiGuardInstruction","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","CpiGuardExtension"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/extensions/cpiGuard/instructions.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\n\nexport enum CpiGuardInstruction {\n    Enable = 0,\n    Disable = 1,\n}\n\n/** TODO: docs */\nexport interface CpiGuardInstructionData {\n    instruction: TokenInstruction.CpiGuardExtension;\n    cpiGuardInstruction: CpiGuardInstruction;\n}\n\n/** TODO: docs */\nexport const cpiGuardInstructionData = struct<CpiGuardInstructionData>([u8('instruction'), u8('cpiGuardInstruction')]);\n\n/**\n * Construct an EnableCpiGuard instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createEnableCpiGuardInstruction(\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID,\n): TransactionInstruction {\n    return createCpiGuardInstruction(CpiGuardInstruction.Enable, account, authority, multiSigners, programId);\n}\n\n/**\n * Construct a DisableCpiGuard instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createDisableCpiGuardInstruction(\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID,\n): TransactionInstruction {\n    return createCpiGuardInstruction(CpiGuardInstruction.Disable, account, authority, multiSigners, programId);\n}\n\nfunction createCpiGuardInstruction(\n    cpiGuardInstruction: CpiGuardInstruction,\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[],\n    programId: PublicKey,\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], authority, multiSigners);\n\n    const data = Buffer.alloc(cpiGuardInstructionData.span);\n    cpiGuardInstructionData.encode(\n        {\n            instruction: TokenInstruction.CpiGuardExtension,\n            cpiGuardInstruction,\n        },\n        data,\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,yBAAyB,EAAEC,qBAAqB,QAAQ,oBAAoB;AACrF,SAASC,gCAAgC,QAAQ,iBAAiB;AAClE,SAASC,UAAU,QAAQ,gCAAgC;AAC3D,SAASC,gBAAgB,QAAQ,6BAA6B;AAE9D,WAAYC,mBAGX;AAHD,WAAYA,mBAAmB;EAC3BA,mBAAA,CAAAA,mBAAA,0BAAU;EACVA,mBAAA,CAAAA,mBAAA,4BAAW;AACf,CAAC,EAHWA,mBAAmB,KAAnBA,mBAAmB;AAW/B;AACA,OAAO,MAAMC,uBAAuB,GAAGT,MAAM,CAA0B,CAACC,EAAE,CAAC,aAAa,CAAC,EAAEA,EAAE,CAAC,qBAAqB,CAAC,CAAC,CAAC;AAEtH;;;;;;;;;;AAUA,OAAM,SAAUS,+BAA+BA,CAC3CC,OAAkB,EAClBC,SAAoB,EACpBC,YAAA,GAAuC,EAAE,EACzCC,SAAS,GAAGV,qBAAqB;EAEjC,OAAOW,yBAAyB,CAACP,mBAAmB,CAACQ,MAAM,EAAEL,OAAO,EAAEC,SAAS,EAAEC,YAAY,EAAEC,SAAS,CAAC;AAC7G;AAEA;;;;;;;;;;AAUA,OAAM,SAAUG,gCAAgCA,CAC5CN,OAAkB,EAClBC,SAAoB,EACpBC,YAAA,GAAuC,EAAE,EACzCC,SAAS,GAAGV,qBAAqB;EAEjC,OAAOW,yBAAyB,CAACP,mBAAmB,CAACU,OAAO,EAAEP,OAAO,EAAEC,SAAS,EAAEC,YAAY,EAAEC,SAAS,CAAC;AAC9G;AAEA,SAASC,yBAAyBA,CAC9BI,mBAAwC,EACxCR,OAAkB,EAClBC,SAAoB,EACpBC,YAAoC,EACpCC,SAAoB;EAEpB,IAAI,CAACX,yBAAyB,CAACW,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIT,gCAAgC,EAAE;EAChD;EACA,MAAMe,IAAI,GAAGd,UAAU,CAAC,CAAC;IAAEe,MAAM,EAAEV,OAAO;IAAEW,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC,EAAEX,SAAS,EAAEC,YAAY,CAAC;EAE1G,MAAMW,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACjB,uBAAuB,CAACkB,IAAI,CAAC;EACvDlB,uBAAuB,CAACmB,MAAM,CAC1B;IACIC,WAAW,EAAEtB,gBAAgB,CAACuB,iBAAiB;IAC/CX;GACH,EACDK,IAAI,CACP;EAED,OAAO,IAAItB,sBAAsB,CAAC;IAAEkB,IAAI;IAAEN,SAAS;IAAEU;EAAI,CAAE,CAAC;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
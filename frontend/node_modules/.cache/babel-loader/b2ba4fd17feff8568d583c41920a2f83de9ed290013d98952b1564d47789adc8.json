{"ast":null,"code":"import { fixEncoderSize, getBytesEncoder, getStructEncoder, getTupleEncoder, getU64Encoder, transformEncoder } from '@solana/codecs';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nfunction getInstructionEncoder(discriminator, dataEncoder) {\n  return transformEncoder(getTupleEncoder([getBytesEncoder(), dataEncoder]), data => [discriminator, data]);\n}\nfunction getPublicKeyEncoder() {\n  return transformEncoder(fixEncoderSize(getBytesEncoder(), 32), publicKey => publicKey.toBytes());\n}\nexport function createInitializeGroupInstruction(args) {\n  const {\n    programId,\n    group,\n    mint,\n    mintAuthority,\n    updateAuthority,\n    maxSize\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: group\n    }, {\n      isSigner: false,\n      isWritable: false,\n      pubkey: mint\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: mintAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_group_interface:initialize_token_group') */\n    121, 113, 108, 39, 54, 51, 0, 4]), getStructEncoder([['updateAuthority', getPublicKeyEncoder()], ['maxSize', getU64Encoder()]])).encode({\n      updateAuthority: updateAuthority ?? SystemProgram.programId,\n      maxSize\n    }))\n  });\n}\nexport function createUpdateGroupMaxSizeInstruction(args) {\n  const {\n    programId,\n    group,\n    updateAuthority,\n    maxSize\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: group\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: updateAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_group_interface:update_group_max_size') */\n    108, 37, 171, 143, 248, 30, 18, 110]), getStructEncoder([['maxSize', getU64Encoder()]])).encode({\n      maxSize\n    }))\n  });\n}\nexport function createUpdateGroupAuthorityInstruction(args) {\n  const {\n    programId,\n    group,\n    currentAuthority,\n    newAuthority\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: group\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: currentAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_group_interface:update_authority') */\n    161, 105, 88, 1, 237, 221, 216, 203]), getStructEncoder([['newAuthority', getPublicKeyEncoder()]])).encode({\n      newAuthority: newAuthority ?? SystemProgram.programId\n    }))\n  });\n}\nexport function createInitializeMemberInstruction(args) {\n  const {\n    programId,\n    member,\n    memberMint,\n    memberMintAuthority,\n    group,\n    groupUpdateAuthority\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: member\n    }, {\n      isSigner: false,\n      isWritable: false,\n      pubkey: memberMint\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: memberMintAuthority\n    }, {\n      isSigner: false,\n      isWritable: true,\n      pubkey: group\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: groupUpdateAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_group_interface:initialize_member') */\n    152, 32, 222, 176, 223, 237, 116, 134]), getStructEncoder([])).encode({}))\n  });\n}","map":{"version":3,"names":["fixEncoderSize","getBytesEncoder","getStructEncoder","getTupleEncoder","getU64Encoder","transformEncoder","SystemProgram","TransactionInstruction","getInstructionEncoder","discriminator","dataEncoder","data","getPublicKeyEncoder","publicKey","toBytes","createInitializeGroupInstruction","args","programId","group","mint","mintAuthority","updateAuthority","maxSize","keys","isSigner","isWritable","pubkey","Buffer","from","Uint8Array","encode","createUpdateGroupMaxSizeInstruction","createUpdateGroupAuthorityInstruction","currentAuthority","newAuthority","createInitializeMemberInstruction","member","memberMint","memberMintAuthority","groupUpdateAuthority"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token-group/src/instruction.ts"],"sourcesContent":["import type { Encoder } from '@solana/codecs';\nimport type { PublicKey } from '@solana/web3.js';\nimport {\n    fixEncoderSize,\n    getBytesEncoder,\n    getStructEncoder,\n    getTupleEncoder,\n    getU64Encoder,\n    transformEncoder,\n} from '@solana/codecs';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\n\nfunction getInstructionEncoder<T extends object>(discriminator: Uint8Array, dataEncoder: Encoder<T>): Encoder<T> {\n    return transformEncoder(getTupleEncoder([getBytesEncoder(), dataEncoder]), (data: T): [Uint8Array, T] => [\n        discriminator,\n        data,\n    ]);\n}\n\nfunction getPublicKeyEncoder(): Encoder<PublicKey> {\n    return transformEncoder(fixEncoderSize(getBytesEncoder(), 32), (publicKey: PublicKey) => publicKey.toBytes());\n}\n\nexport interface InitializeGroupInstruction {\n    programId: PublicKey;\n    group: PublicKey;\n    mint: PublicKey;\n    mintAuthority: PublicKey;\n    updateAuthority: PublicKey | null;\n    maxSize: bigint;\n}\n\nexport function createInitializeGroupInstruction(args: InitializeGroupInstruction): TransactionInstruction {\n    const { programId, group, mint, mintAuthority, updateAuthority, maxSize } = args;\n\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: group },\n            { isSigner: false, isWritable: false, pubkey: mint },\n            { isSigner: true, isWritable: false, pubkey: mintAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                new Uint8Array([\n                    /* await splDiscriminate('spl_token_group_interface:initialize_token_group') */\n                    121, 113, 108, 39, 54, 51, 0, 4,\n                ]),\n                getStructEncoder([\n                    ['updateAuthority', getPublicKeyEncoder()],\n                    ['maxSize', getU64Encoder()],\n                ]),\n            ).encode({ updateAuthority: updateAuthority ?? SystemProgram.programId, maxSize }),\n        ),\n    });\n}\n\nexport interface UpdateGroupMaxSize {\n    programId: PublicKey;\n    group: PublicKey;\n    updateAuthority: PublicKey;\n    maxSize: bigint;\n}\n\nexport function createUpdateGroupMaxSizeInstruction(args: UpdateGroupMaxSize): TransactionInstruction {\n    const { programId, group, updateAuthority, maxSize } = args;\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: group },\n            { isSigner: true, isWritable: false, pubkey: updateAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                new Uint8Array([\n                    /* await splDiscriminate('spl_token_group_interface:update_group_max_size') */\n                    108, 37, 171, 143, 248, 30, 18, 110,\n                ]),\n                getStructEncoder([['maxSize', getU64Encoder()]]),\n            ).encode({ maxSize }),\n        ),\n    });\n}\n\nexport interface UpdateGroupAuthority {\n    programId: PublicKey;\n    group: PublicKey;\n    currentAuthority: PublicKey;\n    newAuthority: PublicKey | null;\n}\n\nexport function createUpdateGroupAuthorityInstruction(args: UpdateGroupAuthority): TransactionInstruction {\n    const { programId, group, currentAuthority, newAuthority } = args;\n\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: group },\n            { isSigner: true, isWritable: false, pubkey: currentAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                new Uint8Array([\n                    /* await splDiscriminate('spl_token_group_interface:update_authority') */\n                    161, 105, 88, 1, 237, 221, 216, 203,\n                ]),\n                getStructEncoder([['newAuthority', getPublicKeyEncoder()]]),\n            ).encode({ newAuthority: newAuthority ?? SystemProgram.programId }),\n        ),\n    });\n}\n\nexport interface InitializeMember {\n    programId: PublicKey;\n    member: PublicKey;\n    memberMint: PublicKey;\n    memberMintAuthority: PublicKey;\n    group: PublicKey;\n    groupUpdateAuthority: PublicKey;\n}\n\nexport function createInitializeMemberInstruction(args: InitializeMember): TransactionInstruction {\n    const { programId, member, memberMint, memberMintAuthority, group, groupUpdateAuthority } = args;\n\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: member },\n            { isSigner: false, isWritable: false, pubkey: memberMint },\n            { isSigner: true, isWritable: false, pubkey: memberMintAuthority },\n            { isSigner: false, isWritable: true, pubkey: group },\n            { isSigner: true, isWritable: false, pubkey: groupUpdateAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                new Uint8Array([\n                    /* await splDiscriminate('spl_token_group_interface:initialize_member') */\n                    152, 32, 222, 176, 223, 237, 116, 134,\n                ]),\n                getStructEncoder([]),\n            ).encode({}),\n        ),\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
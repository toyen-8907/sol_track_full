{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const burnInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\r\n * Construct a Burn instruction\r\n *\r\n * @param account      Account to burn tokens from\r\n * @param mint         Mint for the account\r\n * @param owner        Owner of the account\r\n * @param amount       Number of tokens to burn\r\n * @param multiSigners Signing accounts if `owner` is a multisig\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createBurnInstruction(account, mint, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(burnInstructionData.span);\n  burnInstructionData.encode({\n    instruction: TokenInstruction.Burn,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\r\n * Decode a Burn instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\nexport function decodeBurnInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== burnInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeBurnInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.Burn) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint || !owner) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\r\n * Decode a Burn instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\nexport function decodeBurnInstructionUnchecked({\n  programId,\n  keys: [account, mint, owner, ...multiSigners],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data: burnInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","burnInstructionData","createBurnInstruction","account","mint","owner","amount","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","Burn","BigInt","decodeBurnInstruction","equals","length","decodeBurnInstructionUnchecked","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\burn.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport { u64 } from '@solana/buffer-layout-utils';\r\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\r\nimport { TransactionInstruction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport {\r\n    TokenInvalidInstructionDataError,\r\n    TokenInvalidInstructionKeysError,\r\n    TokenInvalidInstructionProgramError,\r\n    TokenInvalidInstructionTypeError,\r\n} from '../errors.js';\r\nimport { addSigners } from './internal.js';\r\nimport { TokenInstruction } from './types.js';\r\n\r\n/** TODO: docs */\r\nexport interface BurnInstructionData {\r\n    instruction: TokenInstruction.Burn;\r\n    amount: bigint;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const burnInstructionData = struct<BurnInstructionData>([u8('instruction'), u64('amount')]);\r\n\r\n/**\r\n * Construct a Burn instruction\r\n *\r\n * @param account      Account to burn tokens from\r\n * @param mint         Mint for the account\r\n * @param owner        Owner of the account\r\n * @param amount       Number of tokens to burn\r\n * @param multiSigners Signing accounts if `owner` is a multisig\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createBurnInstruction(\r\n    account: PublicKey,\r\n    mint: PublicKey,\r\n    owner: PublicKey,\r\n    amount: number | bigint,\r\n    multiSigners: (Signer | PublicKey)[] = [],\r\n    programId = TOKEN_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    const keys = addSigners(\r\n        [\r\n            { pubkey: account, isSigner: false, isWritable: true },\r\n            { pubkey: mint, isSigner: false, isWritable: true },\r\n        ],\r\n        owner,\r\n        multiSigners,\r\n    );\r\n\r\n    const data = Buffer.alloc(burnInstructionData.span);\r\n    burnInstructionData.encode(\r\n        {\r\n            instruction: TokenInstruction.Burn,\r\n            amount: BigInt(amount),\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\n/** A decoded, valid Burn instruction */\r\nexport interface DecodedBurnInstruction {\r\n    programId: PublicKey;\r\n    keys: {\r\n        account: AccountMeta;\r\n        mint: AccountMeta;\r\n        owner: AccountMeta;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: TokenInstruction.Burn;\r\n        amount: bigint;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a Burn instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\r\nexport function decodeBurnInstruction(\r\n    instruction: TransactionInstruction,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): DecodedBurnInstruction {\r\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\r\n    if (instruction.data.length !== burnInstructionData.span) throw new TokenInvalidInstructionDataError();\r\n\r\n    const {\r\n        keys: { account, mint, owner, multiSigners },\r\n        data,\r\n    } = decodeBurnInstructionUnchecked(instruction);\r\n    if (data.instruction !== TokenInstruction.Burn) throw new TokenInvalidInstructionTypeError();\r\n    if (!account || !mint || !owner) throw new TokenInvalidInstructionKeysError();\r\n\r\n    // TODO: key checks?\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            account,\r\n            mint,\r\n            owner,\r\n            multiSigners,\r\n        },\r\n        data,\r\n    };\r\n}\r\n\r\n/** A decoded, non-validated Burn instruction */\r\nexport interface DecodedBurnInstructionUnchecked {\r\n    programId: PublicKey;\r\n    keys: {\r\n        account: AccountMeta | undefined;\r\n        mint: AccountMeta | undefined;\r\n        owner: AccountMeta | undefined;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: number;\r\n        amount: bigint;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a Burn instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\r\nexport function decodeBurnInstructionUnchecked({\r\n    programId,\r\n    keys: [account, mint, owner, ...multiSigners],\r\n    data,\r\n}: TransactionInstruction): DecodedBurnInstructionUnchecked {\r\n    return {\r\n        programId,\r\n        keys: {\r\n            account,\r\n            mint,\r\n            owner,\r\n            multiSigners,\r\n        },\r\n        data: burnInstructionData.decode(data),\r\n    };\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAClD,SAASC,GAAG,QAAQ,6BAA6B;AAEjD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,gBAAgB,QAAQ,YAAY;AAQ7C;AACA,OAAO,MAAMC,mBAAmB,GAAGX,MAAM,CAAsB,CAACC,EAAE,CAAC,aAAa,CAAC,EAAEC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;AAElG;;;;;;;;;;;;AAYA,OAAM,SAAUU,qBAAqBA,CACjCC,OAAkB,EAClBC,IAAe,EACfC,KAAgB,EAChBC,MAAuB,EACvBC,YAAA,GAAuC,EAAE,EACzCC,SAAS,GAAGd,gBAAgB;EAE5B,MAAMe,IAAI,GAAGV,UAAU,CACnB,CACI;IAAEW,MAAM,EAAEP,OAAO;IAAEQ,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACtD;IAAEF,MAAM,EAAEN,IAAI;IAAEO,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CACtD,EACDP,KAAK,EACLE,YAAY,CACf;EAED,MAAMM,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACd,mBAAmB,CAACe,IAAI,CAAC;EACnDf,mBAAmB,CAACgB,MAAM,CACtB;IACIC,WAAW,EAAElB,gBAAgB,CAACmB,IAAI;IAClCb,MAAM,EAAEc,MAAM,CAACd,MAAM;GACxB,EACDO,IAAI,CACP;EAED,OAAO,IAAIpB,sBAAsB,CAAC;IAAEgB,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAiBA;;;;;;;;AAQA,OAAM,SAAUQ,qBAAqBA,CACjCH,WAAmC,EACnCV,SAAS,GAAGd,gBAAgB;EAE5B,IAAI,CAACwB,WAAW,CAACV,SAAS,CAACc,MAAM,CAACd,SAAS,CAAC,EAAE,MAAM,IAAIX,mCAAmC,EAAE;EAC7F,IAAIqB,WAAW,CAACL,IAAI,CAACU,MAAM,KAAKtB,mBAAmB,CAACe,IAAI,EAAE,MAAM,IAAIrB,gCAAgC,EAAE;EAEtG,MAAM;IACFc,IAAI,EAAE;MAAEN,OAAO;MAAEC,IAAI;MAAEC,KAAK;MAAEE;IAAY,CAAE;IAC5CM;EAAI,CACP,GAAGW,8BAA8B,CAACN,WAAW,CAAC;EAC/C,IAAIL,IAAI,CAACK,WAAW,KAAKlB,gBAAgB,CAACmB,IAAI,EAAE,MAAM,IAAIrB,gCAAgC,EAAE;EAC5F,IAAI,CAACK,OAAO,IAAI,CAACC,IAAI,IAAI,CAACC,KAAK,EAAE,MAAM,IAAIT,gCAAgC,EAAE;EAE7E;EAEA,OAAO;IACHY,SAAS;IACTC,IAAI,EAAE;MACFN,OAAO;MACPC,IAAI;MACJC,KAAK;MACLE;KACH;IACDM;GACH;AACL;AAiBA;;;;;;;AAOA,OAAM,SAAUW,8BAA8BA,CAAC;EAC3ChB,SAAS;EACTC,IAAI,EAAE,CAACN,OAAO,EAAEC,IAAI,EAAEC,KAAK,EAAE,GAAGE,YAAY,CAAC;EAC7CM;AAAI,CACiB;EACrB,OAAO;IACHL,SAAS;IACTC,IAAI,EAAE;MACFN,OAAO;MACPC,IAAI;MACJC,KAAK;MACLE;KACH;IACDM,IAAI,EAAEZ,mBAAmB,CAACwB,MAAM,CAACZ,IAAI;GACxC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
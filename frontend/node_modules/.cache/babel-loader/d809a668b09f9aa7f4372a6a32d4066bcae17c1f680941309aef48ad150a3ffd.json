{"ast":null,"code":"import { struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n/** Buffer layout for de/serializing a GroupPointer extension */\nexport const GroupPointerLayout = struct([publicKey('authority'), publicKey('groupAddress')]);\nexport const GROUP_POINTER_SIZE = GroupPointerLayout.span;\nexport function getGroupPointerState(mint) {\n  const extensionData = getExtensionData(ExtensionType.GroupPointer, mint.tlvData);\n  if (extensionData !== null) {\n    const {\n      authority,\n      groupAddress\n    } = GroupPointerLayout.decode(extensionData);\n    // Explicitly set None/Zero keys to null\n    return {\n      authority: authority.equals(PublicKey.default) ? null : authority,\n      groupAddress: groupAddress.equals(PublicKey.default) ? null : groupAddress\n    };\n  } else {\n    return null;\n  }\n}","map":{"version":3,"names":["struct","publicKey","PublicKey","ExtensionType","getExtensionData","GroupPointerLayout","GROUP_POINTER_SIZE","span","getGroupPointerState","mint","extensionData","GroupPointer","tlvData","authority","groupAddress","decode","equals","default"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\extensions\\groupPointer\\state.ts"],"sourcesContent":["import { struct } from '@solana/buffer-layout';\r\nimport { publicKey } from '@solana/buffer-layout-utils';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport type { Mint } from '../../state/mint.js';\r\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\r\n\r\n/** GroupPointer as stored by the program */\r\nexport interface GroupPointer {\r\n    /** Optional authority that can set the group address */\r\n    authority: PublicKey | null;\r\n    /** Optional account address that holds the group */\r\n    groupAddress: PublicKey | null;\r\n}\r\n\r\n/** Buffer layout for de/serializing a GroupPointer extension */\r\nexport const GroupPointerLayout = struct<{ authority: PublicKey; groupAddress: PublicKey }>([\r\n    publicKey('authority'),\r\n    publicKey('groupAddress'),\r\n]);\r\n\r\nexport const GROUP_POINTER_SIZE = GroupPointerLayout.span;\r\n\r\nexport function getGroupPointerState(mint: Mint): Partial<GroupPointer> | null {\r\n    const extensionData = getExtensionData(ExtensionType.GroupPointer, mint.tlvData);\r\n    if (extensionData !== null) {\r\n        const { authority, groupAddress } = GroupPointerLayout.decode(extensionData);\r\n\r\n        // Explicitly set None/Zero keys to null\r\n        return {\r\n            authority: authority.equals(PublicKey.default) ? null : authority,\r\n            groupAddress: groupAddress.equals(PublicKey.default) ? null : groupAddress,\r\n        };\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,SAAS,QAAQ,iBAAiB;AAE3C,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,qBAAqB;AAUrE;AACA,OAAO,MAAMC,kBAAkB,GAAGL,MAAM,CAAoD,CACxFC,SAAS,CAAC,WAAW,CAAC,EACtBA,SAAS,CAAC,cAAc,CAAC,CAC5B,CAAC;AAEF,OAAO,MAAMK,kBAAkB,GAAGD,kBAAkB,CAACE,IAAI;AAEzD,OAAM,SAAUC,oBAAoBA,CAACC,IAAU;EAC3C,MAAMC,aAAa,GAAGN,gBAAgB,CAACD,aAAa,CAACQ,YAAY,EAAEF,IAAI,CAACG,OAAO,CAAC;EAChF,IAAIF,aAAa,KAAK,IAAI,EAAE;IACxB,MAAM;MAAEG,SAAS;MAAEC;IAAY,CAAE,GAAGT,kBAAkB,CAACU,MAAM,CAACL,aAAa,CAAC;IAE5E;IACA,OAAO;MACHG,SAAS,EAAEA,SAAS,CAACG,MAAM,CAACd,SAAS,CAACe,OAAO,CAAC,GAAG,IAAI,GAAGJ,SAAS;MACjEC,YAAY,EAAEA,YAAY,CAACE,MAAM,CAACd,SAAS,CAACe,OAAO,CAAC,GAAG,IAAI,GAAGH;KACjE;EACL,CAAC,MAAM;IACH,OAAO,IAAI;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
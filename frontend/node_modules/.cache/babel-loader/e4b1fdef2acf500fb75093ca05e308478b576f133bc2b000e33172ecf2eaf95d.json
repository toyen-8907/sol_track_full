{"ast":null,"code":"import { ACCOUNT_SIZE } from '../state/account.js';\nimport { MINT_SIZE, unpackMint } from '../state/mint.js';\nimport { MULTISIG_SIZE } from '../state/multisig.js';\nimport { ACCOUNT_TYPE_SIZE } from './accountType.js';\nimport { CPI_GUARD_SIZE } from './cpiGuard/index.js';\nimport { DEFAULT_ACCOUNT_STATE_SIZE } from './defaultAccountState/index.js';\nimport { TOKEN_GROUP_SIZE, TOKEN_GROUP_MEMBER_SIZE } from './tokenGroup/index.js';\nimport { GROUP_MEMBER_POINTER_SIZE } from './groupMemberPointer/state.js';\nimport { GROUP_POINTER_SIZE } from './groupPointer/state.js';\nimport { IMMUTABLE_OWNER_SIZE } from './immutableOwner.js';\nimport { INTEREST_BEARING_MINT_CONFIG_STATE_SIZE } from './interestBearingMint/state.js';\nimport { MEMO_TRANSFER_SIZE } from './memoTransfer/index.js';\nimport { METADATA_POINTER_SIZE } from './metadataPointer/state.js';\nimport { MINT_CLOSE_AUTHORITY_SIZE } from './mintCloseAuthority.js';\nimport { NON_TRANSFERABLE_SIZE, NON_TRANSFERABLE_ACCOUNT_SIZE } from './nonTransferable.js';\nimport { PERMANENT_DELEGATE_SIZE } from './permanentDelegate.js';\nimport { TRANSFER_FEE_AMOUNT_SIZE, TRANSFER_FEE_CONFIG_SIZE } from './transferFee/index.js';\nimport { TRANSFER_HOOK_ACCOUNT_SIZE, TRANSFER_HOOK_SIZE } from './transferHook/index.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../constants.js';\n// Sequence from https://github.com/solana-labs/solana-program-library/blob/master/token/program-2022/src/extension/mod.rs#L903\nexport var ExtensionType;\n(function (ExtensionType) {\n  ExtensionType[ExtensionType[\"Uninitialized\"] = 0] = \"Uninitialized\";\n  ExtensionType[ExtensionType[\"TransferFeeConfig\"] = 1] = \"TransferFeeConfig\";\n  ExtensionType[ExtensionType[\"TransferFeeAmount\"] = 2] = \"TransferFeeAmount\";\n  ExtensionType[ExtensionType[\"MintCloseAuthority\"] = 3] = \"MintCloseAuthority\";\n  ExtensionType[ExtensionType[\"ConfidentialTransferMint\"] = 4] = \"ConfidentialTransferMint\";\n  ExtensionType[ExtensionType[\"ConfidentialTransferAccount\"] = 5] = \"ConfidentialTransferAccount\";\n  ExtensionType[ExtensionType[\"DefaultAccountState\"] = 6] = \"DefaultAccountState\";\n  ExtensionType[ExtensionType[\"ImmutableOwner\"] = 7] = \"ImmutableOwner\";\n  ExtensionType[ExtensionType[\"MemoTransfer\"] = 8] = \"MemoTransfer\";\n  ExtensionType[ExtensionType[\"NonTransferable\"] = 9] = \"NonTransferable\";\n  ExtensionType[ExtensionType[\"InterestBearingConfig\"] = 10] = \"InterestBearingConfig\";\n  ExtensionType[ExtensionType[\"CpiGuard\"] = 11] = \"CpiGuard\";\n  ExtensionType[ExtensionType[\"PermanentDelegate\"] = 12] = \"PermanentDelegate\";\n  ExtensionType[ExtensionType[\"NonTransferableAccount\"] = 13] = \"NonTransferableAccount\";\n  ExtensionType[ExtensionType[\"TransferHook\"] = 14] = \"TransferHook\";\n  ExtensionType[ExtensionType[\"TransferHookAccount\"] = 15] = \"TransferHookAccount\";\n  // ConfidentialTransferFee, // Not implemented yet\n  // ConfidentialTransferFeeAmount, // Not implemented yet\n  ExtensionType[ExtensionType[\"MetadataPointer\"] = 18] = \"MetadataPointer\";\n  ExtensionType[ExtensionType[\"TokenMetadata\"] = 19] = \"TokenMetadata\";\n  ExtensionType[ExtensionType[\"GroupPointer\"] = 20] = \"GroupPointer\";\n  ExtensionType[ExtensionType[\"TokenGroup\"] = 21] = \"TokenGroup\";\n  ExtensionType[ExtensionType[\"GroupMemberPointer\"] = 22] = \"GroupMemberPointer\";\n  ExtensionType[ExtensionType[\"TokenGroupMember\"] = 23] = \"TokenGroupMember\";\n})(ExtensionType || (ExtensionType = {}));\nexport const TYPE_SIZE = 2;\nexport const LENGTH_SIZE = 2;\nfunction addTypeAndLengthToLen(len) {\n  return len + TYPE_SIZE + LENGTH_SIZE;\n}\nfunction isVariableLengthExtension(e) {\n  switch (e) {\n    case ExtensionType.TokenMetadata:\n      return true;\n    default:\n      return false;\n  }\n}\n// NOTE: All of these should eventually use their type's Span instead of these\n// constants.  This is provided for at least creation to work.\nexport function getTypeLen(e) {\n  switch (e) {\n    case ExtensionType.Uninitialized:\n      return 0;\n    case ExtensionType.TransferFeeConfig:\n      return TRANSFER_FEE_CONFIG_SIZE;\n    case ExtensionType.TransferFeeAmount:\n      return TRANSFER_FEE_AMOUNT_SIZE;\n    case ExtensionType.MintCloseAuthority:\n      return MINT_CLOSE_AUTHORITY_SIZE;\n    case ExtensionType.ConfidentialTransferMint:\n      return 65;\n    case ExtensionType.ConfidentialTransferAccount:\n      return 295;\n    case ExtensionType.CpiGuard:\n      return CPI_GUARD_SIZE;\n    case ExtensionType.DefaultAccountState:\n      return DEFAULT_ACCOUNT_STATE_SIZE;\n    case ExtensionType.ImmutableOwner:\n      return IMMUTABLE_OWNER_SIZE;\n    case ExtensionType.MemoTransfer:\n      return MEMO_TRANSFER_SIZE;\n    case ExtensionType.MetadataPointer:\n      return METADATA_POINTER_SIZE;\n    case ExtensionType.NonTransferable:\n      return NON_TRANSFERABLE_SIZE;\n    case ExtensionType.InterestBearingConfig:\n      return INTEREST_BEARING_MINT_CONFIG_STATE_SIZE;\n    case ExtensionType.PermanentDelegate:\n      return PERMANENT_DELEGATE_SIZE;\n    case ExtensionType.NonTransferableAccount:\n      return NON_TRANSFERABLE_ACCOUNT_SIZE;\n    case ExtensionType.TransferHook:\n      return TRANSFER_HOOK_SIZE;\n    case ExtensionType.TransferHookAccount:\n      return TRANSFER_HOOK_ACCOUNT_SIZE;\n    case ExtensionType.GroupPointer:\n      return GROUP_POINTER_SIZE;\n    case ExtensionType.GroupMemberPointer:\n      return GROUP_MEMBER_POINTER_SIZE;\n    case ExtensionType.TokenGroup:\n      return TOKEN_GROUP_SIZE;\n    case ExtensionType.TokenGroupMember:\n      return TOKEN_GROUP_MEMBER_SIZE;\n    case ExtensionType.TokenMetadata:\n      throw Error(`Cannot get type length for variable extension type: ${e}`);\n    default:\n      throw Error(`Unknown extension type: ${e}`);\n  }\n}\nexport function isMintExtension(e) {\n  switch (e) {\n    case ExtensionType.TransferFeeConfig:\n    case ExtensionType.MintCloseAuthority:\n    case ExtensionType.ConfidentialTransferMint:\n    case ExtensionType.DefaultAccountState:\n    case ExtensionType.NonTransferable:\n    case ExtensionType.InterestBearingConfig:\n    case ExtensionType.PermanentDelegate:\n    case ExtensionType.TransferHook:\n    case ExtensionType.MetadataPointer:\n    case ExtensionType.TokenMetadata:\n    case ExtensionType.GroupPointer:\n    case ExtensionType.GroupMemberPointer:\n    case ExtensionType.TokenGroup:\n    case ExtensionType.TokenGroupMember:\n      return true;\n    case ExtensionType.Uninitialized:\n    case ExtensionType.TransferFeeAmount:\n    case ExtensionType.ConfidentialTransferAccount:\n    case ExtensionType.ImmutableOwner:\n    case ExtensionType.MemoTransfer:\n    case ExtensionType.CpiGuard:\n    case ExtensionType.NonTransferableAccount:\n    case ExtensionType.TransferHookAccount:\n      return false;\n    default:\n      throw Error(`Unknown extension type: ${e}`);\n  }\n}\nexport function isAccountExtension(e) {\n  switch (e) {\n    case ExtensionType.TransferFeeAmount:\n    case ExtensionType.ConfidentialTransferAccount:\n    case ExtensionType.ImmutableOwner:\n    case ExtensionType.MemoTransfer:\n    case ExtensionType.CpiGuard:\n    case ExtensionType.NonTransferableAccount:\n    case ExtensionType.TransferHookAccount:\n      return true;\n    case ExtensionType.Uninitialized:\n    case ExtensionType.TransferFeeConfig:\n    case ExtensionType.MintCloseAuthority:\n    case ExtensionType.ConfidentialTransferMint:\n    case ExtensionType.DefaultAccountState:\n    case ExtensionType.NonTransferable:\n    case ExtensionType.InterestBearingConfig:\n    case ExtensionType.PermanentDelegate:\n    case ExtensionType.TransferHook:\n    case ExtensionType.MetadataPointer:\n    case ExtensionType.TokenMetadata:\n    case ExtensionType.GroupPointer:\n    case ExtensionType.GroupMemberPointer:\n    case ExtensionType.TokenGroup:\n    case ExtensionType.TokenGroupMember:\n      return false;\n    default:\n      throw Error(`Unknown extension type: ${e}`);\n  }\n}\nexport function getAccountTypeOfMintType(e) {\n  switch (e) {\n    case ExtensionType.TransferFeeConfig:\n      return ExtensionType.TransferFeeAmount;\n    case ExtensionType.ConfidentialTransferMint:\n      return ExtensionType.ConfidentialTransferAccount;\n    case ExtensionType.NonTransferable:\n      return ExtensionType.NonTransferableAccount;\n    case ExtensionType.TransferHook:\n      return ExtensionType.TransferHookAccount;\n    case ExtensionType.TransferFeeAmount:\n    case ExtensionType.ConfidentialTransferAccount:\n    case ExtensionType.CpiGuard:\n    case ExtensionType.DefaultAccountState:\n    case ExtensionType.ImmutableOwner:\n    case ExtensionType.MemoTransfer:\n    case ExtensionType.MintCloseAuthority:\n    case ExtensionType.MetadataPointer:\n    case ExtensionType.TokenMetadata:\n    case ExtensionType.Uninitialized:\n    case ExtensionType.InterestBearingConfig:\n    case ExtensionType.PermanentDelegate:\n    case ExtensionType.NonTransferableAccount:\n    case ExtensionType.TransferHookAccount:\n    case ExtensionType.GroupPointer:\n    case ExtensionType.GroupMemberPointer:\n    case ExtensionType.TokenGroup:\n    case ExtensionType.TokenGroupMember:\n      return ExtensionType.Uninitialized;\n  }\n}\nfunction getLen(extensionTypes, baseSize, variableLengthExtensions = {}) {\n  if (extensionTypes.length === 0 && Object.keys(variableLengthExtensions).length === 0) {\n    return baseSize;\n  } else {\n    const accountLength = ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE + extensionTypes.filter((element, i) => i === extensionTypes.indexOf(element)).map(element => addTypeAndLengthToLen(getTypeLen(element))).reduce((a, b) => a + b, 0) + Object.entries(variableLengthExtensions).map(([extension, len]) => {\n      if (!isVariableLengthExtension(Number(extension))) {\n        throw Error(`Extension ${extension} is not variable length`);\n      }\n      return addTypeAndLengthToLen(len);\n    }).reduce((a, b) => a + b, 0);\n    if (accountLength === MULTISIG_SIZE) {\n      return accountLength + TYPE_SIZE;\n    } else {\n      return accountLength;\n    }\n  }\n}\nexport function getMintLen(extensionTypes, variableLengthExtensions = {}) {\n  return getLen(extensionTypes, MINT_SIZE, variableLengthExtensions);\n}\nexport function getAccountLen(extensionTypes) {\n  // There are currently no variable length extensions for accounts\n  return getLen(extensionTypes, ACCOUNT_SIZE);\n}\nexport function getExtensionData(extension, tlvData) {\n  let extensionTypeIndex = 0;\n  while (addTypeAndLengthToLen(extensionTypeIndex) <= tlvData.length) {\n    const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n    const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n    const typeIndex = addTypeAndLengthToLen(extensionTypeIndex);\n    if (entryType == extension) {\n      return tlvData.slice(typeIndex, typeIndex + entryLength);\n    }\n    extensionTypeIndex = typeIndex + entryLength;\n  }\n  return null;\n}\nexport function getExtensionTypes(tlvData) {\n  const extensionTypes = [];\n  let extensionTypeIndex = 0;\n  while (extensionTypeIndex < tlvData.length) {\n    const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n    extensionTypes.push(entryType);\n    const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n    extensionTypeIndex += addTypeAndLengthToLen(entryLength);\n  }\n  return extensionTypes;\n}\nexport function getAccountLenForMint(mint) {\n  const extensionTypes = getExtensionTypes(mint.tlvData);\n  const accountExtensions = extensionTypes.map(getAccountTypeOfMintType);\n  return getAccountLen(accountExtensions);\n}\nexport function getNewAccountLenForExtensionLen(info, address, extensionType, extensionLen, programId = TOKEN_2022_PROGRAM_ID) {\n  const mint = unpackMint(address, info, programId);\n  const extensionData = getExtensionData(extensionType, mint.tlvData);\n  const currentExtensionLen = extensionData ? addTypeAndLengthToLen(extensionData.length) : 0;\n  const newExtensionLen = addTypeAndLengthToLen(extensionLen);\n  return info.data.length + newExtensionLen - currentExtensionLen;\n}","map":{"version":3,"names":["ACCOUNT_SIZE","MINT_SIZE","unpackMint","MULTISIG_SIZE","ACCOUNT_TYPE_SIZE","CPI_GUARD_SIZE","DEFAULT_ACCOUNT_STATE_SIZE","TOKEN_GROUP_SIZE","TOKEN_GROUP_MEMBER_SIZE","GROUP_MEMBER_POINTER_SIZE","GROUP_POINTER_SIZE","IMMUTABLE_OWNER_SIZE","INTEREST_BEARING_MINT_CONFIG_STATE_SIZE","MEMO_TRANSFER_SIZE","METADATA_POINTER_SIZE","MINT_CLOSE_AUTHORITY_SIZE","NON_TRANSFERABLE_SIZE","NON_TRANSFERABLE_ACCOUNT_SIZE","PERMANENT_DELEGATE_SIZE","TRANSFER_FEE_AMOUNT_SIZE","TRANSFER_FEE_CONFIG_SIZE","TRANSFER_HOOK_ACCOUNT_SIZE","TRANSFER_HOOK_SIZE","TOKEN_2022_PROGRAM_ID","ExtensionType","TYPE_SIZE","LENGTH_SIZE","addTypeAndLengthToLen","len","isVariableLengthExtension","e","TokenMetadata","getTypeLen","Uninitialized","TransferFeeConfig","TransferFeeAmount","MintCloseAuthority","ConfidentialTransferMint","ConfidentialTransferAccount","CpiGuard","DefaultAccountState","ImmutableOwner","MemoTransfer","MetadataPointer","NonTransferable","InterestBearingConfig","PermanentDelegate","NonTransferableAccount","TransferHook","TransferHookAccount","GroupPointer","GroupMemberPointer","TokenGroup","TokenGroupMember","Error","isMintExtension","isAccountExtension","getAccountTypeOfMintType","getLen","extensionTypes","baseSize","variableLengthExtensions","length","Object","keys","accountLength","filter","element","i","indexOf","map","reduce","a","b","entries","extension","Number","getMintLen","getAccountLen","getExtensionData","tlvData","extensionTypeIndex","entryType","readUInt16LE","entryLength","typeIndex","slice","getExtensionTypes","push","getAccountLenForMint","mint","accountExtensions","getNewAccountLenForExtensionLen","info","address","extensionType","extensionLen","programId","extensionData","currentExtensionLen","newExtensionLen","data"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/extensions/extensionType.ts"],"sourcesContent":["import type { AccountInfo, PublicKey } from '@solana/web3.js';\n\nimport { ACCOUNT_SIZE } from '../state/account.js';\nimport type { Mint } from '../state/mint.js';\nimport { MINT_SIZE, unpackMint } from '../state/mint.js';\nimport { MULTISIG_SIZE } from '../state/multisig.js';\nimport { ACCOUNT_TYPE_SIZE } from './accountType.js';\nimport { CPI_GUARD_SIZE } from './cpiGuard/index.js';\nimport { DEFAULT_ACCOUNT_STATE_SIZE } from './defaultAccountState/index.js';\nimport { TOKEN_GROUP_SIZE, TOKEN_GROUP_MEMBER_SIZE } from './tokenGroup/index.js';\nimport { GROUP_MEMBER_POINTER_SIZE } from './groupMemberPointer/state.js';\nimport { GROUP_POINTER_SIZE } from './groupPointer/state.js';\nimport { IMMUTABLE_OWNER_SIZE } from './immutableOwner.js';\nimport { INTEREST_BEARING_MINT_CONFIG_STATE_SIZE } from './interestBearingMint/state.js';\nimport { MEMO_TRANSFER_SIZE } from './memoTransfer/index.js';\nimport { METADATA_POINTER_SIZE } from './metadataPointer/state.js';\nimport { MINT_CLOSE_AUTHORITY_SIZE } from './mintCloseAuthority.js';\nimport { NON_TRANSFERABLE_SIZE, NON_TRANSFERABLE_ACCOUNT_SIZE } from './nonTransferable.js';\nimport { PERMANENT_DELEGATE_SIZE } from './permanentDelegate.js';\nimport { TRANSFER_FEE_AMOUNT_SIZE, TRANSFER_FEE_CONFIG_SIZE } from './transferFee/index.js';\nimport { TRANSFER_HOOK_ACCOUNT_SIZE, TRANSFER_HOOK_SIZE } from './transferHook/index.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../constants.js';\n\n// Sequence from https://github.com/solana-labs/solana-program-library/blob/master/token/program-2022/src/extension/mod.rs#L903\nexport enum ExtensionType {\n    Uninitialized,\n    TransferFeeConfig,\n    TransferFeeAmount,\n    MintCloseAuthority,\n    ConfidentialTransferMint,\n    ConfidentialTransferAccount,\n    DefaultAccountState,\n    ImmutableOwner,\n    MemoTransfer,\n    NonTransferable,\n    InterestBearingConfig,\n    CpiGuard,\n    PermanentDelegate,\n    NonTransferableAccount,\n    TransferHook,\n    TransferHookAccount,\n    // ConfidentialTransferFee, // Not implemented yet\n    // ConfidentialTransferFeeAmount, // Not implemented yet\n    MetadataPointer = 18, // Remove number once above extensions implemented\n    TokenMetadata = 19, // Remove number once above extensions implemented\n    GroupPointer = 20,\n    TokenGroup = 21,\n    GroupMemberPointer = 22,\n    TokenGroupMember = 23,\n}\n\nexport const TYPE_SIZE = 2;\nexport const LENGTH_SIZE = 2;\n\nfunction addTypeAndLengthToLen(len: number): number {\n    return len + TYPE_SIZE + LENGTH_SIZE;\n}\n\nfunction isVariableLengthExtension(e: ExtensionType): boolean {\n    switch (e) {\n        case ExtensionType.TokenMetadata:\n            return true;\n        default:\n            return false;\n    }\n}\n\n// NOTE: All of these should eventually use their type's Span instead of these\n// constants.  This is provided for at least creation to work.\nexport function getTypeLen(e: ExtensionType): number {\n    switch (e) {\n        case ExtensionType.Uninitialized:\n            return 0;\n        case ExtensionType.TransferFeeConfig:\n            return TRANSFER_FEE_CONFIG_SIZE;\n        case ExtensionType.TransferFeeAmount:\n            return TRANSFER_FEE_AMOUNT_SIZE;\n        case ExtensionType.MintCloseAuthority:\n            return MINT_CLOSE_AUTHORITY_SIZE;\n        case ExtensionType.ConfidentialTransferMint:\n            return 65;\n        case ExtensionType.ConfidentialTransferAccount:\n            return 295;\n        case ExtensionType.CpiGuard:\n            return CPI_GUARD_SIZE;\n        case ExtensionType.DefaultAccountState:\n            return DEFAULT_ACCOUNT_STATE_SIZE;\n        case ExtensionType.ImmutableOwner:\n            return IMMUTABLE_OWNER_SIZE;\n        case ExtensionType.MemoTransfer:\n            return MEMO_TRANSFER_SIZE;\n        case ExtensionType.MetadataPointer:\n            return METADATA_POINTER_SIZE;\n        case ExtensionType.NonTransferable:\n            return NON_TRANSFERABLE_SIZE;\n        case ExtensionType.InterestBearingConfig:\n            return INTEREST_BEARING_MINT_CONFIG_STATE_SIZE;\n        case ExtensionType.PermanentDelegate:\n            return PERMANENT_DELEGATE_SIZE;\n        case ExtensionType.NonTransferableAccount:\n            return NON_TRANSFERABLE_ACCOUNT_SIZE;\n        case ExtensionType.TransferHook:\n            return TRANSFER_HOOK_SIZE;\n        case ExtensionType.TransferHookAccount:\n            return TRANSFER_HOOK_ACCOUNT_SIZE;\n        case ExtensionType.GroupPointer:\n            return GROUP_POINTER_SIZE;\n        case ExtensionType.GroupMemberPointer:\n            return GROUP_MEMBER_POINTER_SIZE;\n        case ExtensionType.TokenGroup:\n            return TOKEN_GROUP_SIZE;\n        case ExtensionType.TokenGroupMember:\n            return TOKEN_GROUP_MEMBER_SIZE;\n        case ExtensionType.TokenMetadata:\n            throw Error(`Cannot get type length for variable extension type: ${e}`);\n        default:\n            throw Error(`Unknown extension type: ${e}`);\n    }\n}\n\nexport function isMintExtension(e: ExtensionType): boolean {\n    switch (e) {\n        case ExtensionType.TransferFeeConfig:\n        case ExtensionType.MintCloseAuthority:\n        case ExtensionType.ConfidentialTransferMint:\n        case ExtensionType.DefaultAccountState:\n        case ExtensionType.NonTransferable:\n        case ExtensionType.InterestBearingConfig:\n        case ExtensionType.PermanentDelegate:\n        case ExtensionType.TransferHook:\n        case ExtensionType.MetadataPointer:\n        case ExtensionType.TokenMetadata:\n        case ExtensionType.GroupPointer:\n        case ExtensionType.GroupMemberPointer:\n        case ExtensionType.TokenGroup:\n        case ExtensionType.TokenGroupMember:\n            return true;\n        case ExtensionType.Uninitialized:\n        case ExtensionType.TransferFeeAmount:\n        case ExtensionType.ConfidentialTransferAccount:\n        case ExtensionType.ImmutableOwner:\n        case ExtensionType.MemoTransfer:\n        case ExtensionType.CpiGuard:\n        case ExtensionType.NonTransferableAccount:\n        case ExtensionType.TransferHookAccount:\n            return false;\n        default:\n            throw Error(`Unknown extension type: ${e}`);\n    }\n}\n\nexport function isAccountExtension(e: ExtensionType): boolean {\n    switch (e) {\n        case ExtensionType.TransferFeeAmount:\n        case ExtensionType.ConfidentialTransferAccount:\n        case ExtensionType.ImmutableOwner:\n        case ExtensionType.MemoTransfer:\n        case ExtensionType.CpiGuard:\n        case ExtensionType.NonTransferableAccount:\n        case ExtensionType.TransferHookAccount:\n            return true;\n        case ExtensionType.Uninitialized:\n        case ExtensionType.TransferFeeConfig:\n        case ExtensionType.MintCloseAuthority:\n        case ExtensionType.ConfidentialTransferMint:\n        case ExtensionType.DefaultAccountState:\n        case ExtensionType.NonTransferable:\n        case ExtensionType.InterestBearingConfig:\n        case ExtensionType.PermanentDelegate:\n        case ExtensionType.TransferHook:\n        case ExtensionType.MetadataPointer:\n        case ExtensionType.TokenMetadata:\n        case ExtensionType.GroupPointer:\n        case ExtensionType.GroupMemberPointer:\n        case ExtensionType.TokenGroup:\n        case ExtensionType.TokenGroupMember:\n            return false;\n        default:\n            throw Error(`Unknown extension type: ${e}`);\n    }\n}\n\nexport function getAccountTypeOfMintType(e: ExtensionType): ExtensionType {\n    switch (e) {\n        case ExtensionType.TransferFeeConfig:\n            return ExtensionType.TransferFeeAmount;\n        case ExtensionType.ConfidentialTransferMint:\n            return ExtensionType.ConfidentialTransferAccount;\n        case ExtensionType.NonTransferable:\n            return ExtensionType.NonTransferableAccount;\n        case ExtensionType.TransferHook:\n            return ExtensionType.TransferHookAccount;\n        case ExtensionType.TransferFeeAmount:\n        case ExtensionType.ConfidentialTransferAccount:\n        case ExtensionType.CpiGuard:\n        case ExtensionType.DefaultAccountState:\n        case ExtensionType.ImmutableOwner:\n        case ExtensionType.MemoTransfer:\n        case ExtensionType.MintCloseAuthority:\n        case ExtensionType.MetadataPointer:\n        case ExtensionType.TokenMetadata:\n        case ExtensionType.Uninitialized:\n        case ExtensionType.InterestBearingConfig:\n        case ExtensionType.PermanentDelegate:\n        case ExtensionType.NonTransferableAccount:\n        case ExtensionType.TransferHookAccount:\n        case ExtensionType.GroupPointer:\n        case ExtensionType.GroupMemberPointer:\n        case ExtensionType.TokenGroup:\n        case ExtensionType.TokenGroupMember:\n            return ExtensionType.Uninitialized;\n    }\n}\n\nfunction getLen(\n    extensionTypes: ExtensionType[],\n    baseSize: number,\n    variableLengthExtensions: { [E in ExtensionType]?: number } = {},\n): number {\n    if (extensionTypes.length === 0 && Object.keys(variableLengthExtensions).length === 0) {\n        return baseSize;\n    } else {\n        const accountLength =\n            ACCOUNT_SIZE +\n            ACCOUNT_TYPE_SIZE +\n            extensionTypes\n                .filter((element, i) => i === extensionTypes.indexOf(element))\n                .map(element => addTypeAndLengthToLen(getTypeLen(element)))\n                .reduce((a, b) => a + b, 0) +\n            Object.entries(variableLengthExtensions)\n                .map(([extension, len]) => {\n                    if (!isVariableLengthExtension(Number(extension))) {\n                        throw Error(`Extension ${extension} is not variable length`);\n                    }\n                    return addTypeAndLengthToLen(len);\n                })\n                .reduce((a, b) => a + b, 0);\n        if (accountLength === MULTISIG_SIZE) {\n            return accountLength + TYPE_SIZE;\n        } else {\n            return accountLength;\n        }\n    }\n}\n\nexport function getMintLen(\n    extensionTypes: ExtensionType[],\n    variableLengthExtensions: { [E in ExtensionType]?: number } = {},\n): number {\n    return getLen(extensionTypes, MINT_SIZE, variableLengthExtensions);\n}\n\nexport function getAccountLen(extensionTypes: ExtensionType[]): number {\n    // There are currently no variable length extensions for accounts\n    return getLen(extensionTypes, ACCOUNT_SIZE);\n}\n\nexport function getExtensionData(extension: ExtensionType, tlvData: Buffer): Buffer | null {\n    let extensionTypeIndex = 0;\n    while (addTypeAndLengthToLen(extensionTypeIndex) <= tlvData.length) {\n        const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n        const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n        const typeIndex = addTypeAndLengthToLen(extensionTypeIndex);\n        if (entryType == extension) {\n            return tlvData.slice(typeIndex, typeIndex + entryLength);\n        }\n        extensionTypeIndex = typeIndex + entryLength;\n    }\n    return null;\n}\n\nexport function getExtensionTypes(tlvData: Buffer): ExtensionType[] {\n    const extensionTypes = [];\n    let extensionTypeIndex = 0;\n    while (extensionTypeIndex < tlvData.length) {\n        const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n        extensionTypes.push(entryType);\n        const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n        extensionTypeIndex += addTypeAndLengthToLen(entryLength);\n    }\n    return extensionTypes;\n}\n\nexport function getAccountLenForMint(mint: Mint): number {\n    const extensionTypes = getExtensionTypes(mint.tlvData);\n    const accountExtensions = extensionTypes.map(getAccountTypeOfMintType);\n    return getAccountLen(accountExtensions);\n}\n\nexport function getNewAccountLenForExtensionLen(\n    info: AccountInfo<Buffer>,\n    address: PublicKey,\n    extensionType: ExtensionType,\n    extensionLen: number,\n    programId = TOKEN_2022_PROGRAM_ID,\n): number {\n    const mint = unpackMint(address, info, programId);\n    const extensionData = getExtensionData(extensionType, mint.tlvData);\n\n    const currentExtensionLen = extensionData ? addTypeAndLengthToLen(extensionData.length) : 0;\n    const newExtensionLen = addTypeAndLengthToLen(extensionLen);\n\n    return info.data.length + newExtensionLen - currentExtensionLen;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
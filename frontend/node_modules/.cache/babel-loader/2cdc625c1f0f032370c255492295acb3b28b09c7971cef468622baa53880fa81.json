{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const revokeInstructionData = struct([u8('instruction')]);\n/**\r\n * Construct a Revoke instruction\r\n *\r\n * @param account      Address of the token account\r\n * @param owner        Owner of the account\r\n * @param multiSigners Signing accounts if `owner` is a multisig\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createRevokeInstruction(account, owner, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(revokeInstructionData.span);\n  revokeInstructionData.encode({\n    instruction: TokenInstruction.Revoke\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\r\n * Decode a Revoke instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\nexport function decodeRevokeInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== revokeInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeRevokeInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.Revoke) throw new TokenInvalidInstructionTypeError();\n  if (!account || !owner) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\r\n * Decode a Revoke instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\nexport function decodeRevokeInstructionUnchecked({\n  programId,\n  keys: [account, owner, ...multiSigners],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      account,\n      owner,\n      multiSigners\n    },\n    data: revokeInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","revokeInstructionData","createRevokeInstruction","account","owner","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","Revoke","decodeRevokeInstruction","equals","length","decodeRevokeInstructionUnchecked","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\instructions\\revoke.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\r\nimport { TransactionInstruction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport {\r\n    TokenInvalidInstructionDataError,\r\n    TokenInvalidInstructionKeysError,\r\n    TokenInvalidInstructionProgramError,\r\n    TokenInvalidInstructionTypeError,\r\n} from '../errors.js';\r\nimport { addSigners } from './internal.js';\r\nimport { TokenInstruction } from './types.js';\r\n\r\n/** TODO: docs */\r\nexport interface RevokeInstructionData {\r\n    instruction: TokenInstruction.Revoke;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const revokeInstructionData = struct<RevokeInstructionData>([u8('instruction')]);\r\n\r\n/**\r\n * Construct a Revoke instruction\r\n *\r\n * @param account      Address of the token account\r\n * @param owner        Owner of the account\r\n * @param multiSigners Signing accounts if `owner` is a multisig\r\n * @param programId    SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createRevokeInstruction(\r\n    account: PublicKey,\r\n    owner: PublicKey,\r\n    multiSigners: (Signer | PublicKey)[] = [],\r\n    programId = TOKEN_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], owner, multiSigners);\r\n\r\n    const data = Buffer.alloc(revokeInstructionData.span);\r\n    revokeInstructionData.encode({ instruction: TokenInstruction.Revoke }, data);\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\n/** A decoded, valid Revoke instruction */\r\nexport interface DecodedRevokeInstruction {\r\n    programId: PublicKey;\r\n    keys: {\r\n        account: AccountMeta;\r\n        owner: AccountMeta;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: TokenInstruction.Revoke;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a Revoke instruction and validate it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n * @param programId   SPL Token program account\r\n *\r\n * @return Decoded, valid instruction\r\n */\r\nexport function decodeRevokeInstruction(\r\n    instruction: TransactionInstruction,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): DecodedRevokeInstruction {\r\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\r\n    if (instruction.data.length !== revokeInstructionData.span) throw new TokenInvalidInstructionDataError();\r\n\r\n    const {\r\n        keys: { account, owner, multiSigners },\r\n        data,\r\n    } = decodeRevokeInstructionUnchecked(instruction);\r\n    if (data.instruction !== TokenInstruction.Revoke) throw new TokenInvalidInstructionTypeError();\r\n    if (!account || !owner) throw new TokenInvalidInstructionKeysError();\r\n\r\n    // TODO: key checks?\r\n\r\n    return {\r\n        programId,\r\n        keys: {\r\n            account,\r\n            owner,\r\n            multiSigners,\r\n        },\r\n        data,\r\n    };\r\n}\r\n\r\n/** A decoded, non-validated Revoke instruction */\r\nexport interface DecodedRevokeInstructionUnchecked {\r\n    programId: PublicKey;\r\n    keys: {\r\n        account: AccountMeta | undefined;\r\n        owner: AccountMeta | undefined;\r\n        multiSigners: AccountMeta[];\r\n    };\r\n    data: {\r\n        instruction: number;\r\n    };\r\n}\r\n\r\n/**\r\n * Decode a Revoke instruction without validating it\r\n *\r\n * @param instruction Transaction instruction to decode\r\n *\r\n * @return Decoded, non-validated instruction\r\n */\r\nexport function decodeRevokeInstructionUnchecked({\r\n    programId,\r\n    keys: [account, owner, ...multiSigners],\r\n    data,\r\n}: TransactionInstruction): DecodedRevokeInstructionUnchecked {\r\n    return {\r\n        programId,\r\n        keys: {\r\n            account,\r\n            owner,\r\n            multiSigners,\r\n        },\r\n        data: revokeInstructionData.decode(data),\r\n    };\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,gBAAgB,QAAQ,YAAY;AAO7C;AACA,OAAO,MAAMC,qBAAqB,GAAGV,MAAM,CAAwB,CAACC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;AAEvF;;;;;;;;;;AAUA,OAAM,SAAUU,uBAAuBA,CACnCC,OAAkB,EAClBC,KAAgB,EAChBC,YAAA,GAAuC,EAAE,EACzCC,SAAS,GAAGZ,gBAAgB;EAE5B,MAAMa,IAAI,GAAGR,UAAU,CAAC,CAAC;IAAES,MAAM,EAAEL,OAAO;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC,EAAEN,KAAK,EAAEC,YAAY,CAAC;EAEtG,MAAMM,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACZ,qBAAqB,CAACa,IAAI,CAAC;EACrDb,qBAAqB,CAACc,MAAM,CAAC;IAAEC,WAAW,EAAEhB,gBAAgB,CAACiB;EAAM,CAAE,EAAEN,IAAI,CAAC;EAE5E,OAAO,IAAIlB,sBAAsB,CAAC;IAAEc,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAeA;;;;;;;;AAQA,OAAM,SAAUO,uBAAuBA,CACnCF,WAAmC,EACnCV,SAAS,GAAGZ,gBAAgB;EAE5B,IAAI,CAACsB,WAAW,CAACV,SAAS,CAACa,MAAM,CAACb,SAAS,CAAC,EAAE,MAAM,IAAIT,mCAAmC,EAAE;EAC7F,IAAImB,WAAW,CAACL,IAAI,CAACS,MAAM,KAAKnB,qBAAqB,CAACa,IAAI,EAAE,MAAM,IAAInB,gCAAgC,EAAE;EAExG,MAAM;IACFY,IAAI,EAAE;MAAEJ,OAAO;MAAEC,KAAK;MAAEC;IAAY,CAAE;IACtCM;EAAI,CACP,GAAGU,gCAAgC,CAACL,WAAW,CAAC;EACjD,IAAIL,IAAI,CAACK,WAAW,KAAKhB,gBAAgB,CAACiB,MAAM,EAAE,MAAM,IAAInB,gCAAgC,EAAE;EAC9F,IAAI,CAACK,OAAO,IAAI,CAACC,KAAK,EAAE,MAAM,IAAIR,gCAAgC,EAAE;EAEpE;EAEA,OAAO;IACHU,SAAS;IACTC,IAAI,EAAE;MACFJ,OAAO;MACPC,KAAK;MACLC;KACH;IACDM;GACH;AACL;AAeA;;;;;;;AAOA,OAAM,SAAUU,gCAAgCA,CAAC;EAC7Cf,SAAS;EACTC,IAAI,EAAE,CAACJ,OAAO,EAAEC,KAAK,EAAE,GAAGC,YAAY,CAAC;EACvCM;AAAI,CACiB;EACrB,OAAO;IACHL,SAAS;IACTC,IAAI,EAAE;MACFJ,OAAO;MACPC,KAAK;MACLC;KACH;IACDM,IAAI,EAAEV,qBAAqB,CAACqB,MAAM,CAACX,IAAI;GAC1C;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createApproveCheckedInstruction } from '../instructions/approveChecked.js';\nimport { getSigners } from './internal.js';\n/**\r\n * Approve a delegate to transfer up to a maximum number of tokens from an account, asserting the token mint and\r\n * decimals\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param mint           Address of the mint\r\n * @param account        Address of the account\r\n * @param delegate       Account authorized to perform a transfer tokens from the source account\r\n * @param owner          Owner of the source account\r\n * @param amount         Maximum number of tokens the delegate may transfer\r\n * @param decimals       Number of decimals in approve amount\r\n * @param multiSigners   Signing accounts if `owner` is a multisig\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\nexport async function approveChecked(connection, payer, mint, account, delegate, owner, amount, decimals, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createApproveCheckedInstruction(account, mint, delegate, ownerPublicKey, amount, decimals, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createApproveCheckedInstruction","getSigners","approveChecked","connection","payer","mint","account","delegate","owner","amount","decimals","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\actions\\approveChecked.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\r\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport { createApproveCheckedInstruction } from '../instructions/approveChecked.js';\r\nimport { getSigners } from './internal.js';\r\n\r\n/**\r\n * Approve a delegate to transfer up to a maximum number of tokens from an account, asserting the token mint and\r\n * decimals\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param mint           Address of the mint\r\n * @param account        Address of the account\r\n * @param delegate       Account authorized to perform a transfer tokens from the source account\r\n * @param owner          Owner of the source account\r\n * @param amount         Maximum number of tokens the delegate may transfer\r\n * @param decimals       Number of decimals in approve amount\r\n * @param multiSigners   Signing accounts if `owner` is a multisig\r\n * @param confirmOptions Options for confirming the transaction\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\r\nexport async function approveChecked(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    mint: PublicKey,\r\n    account: PublicKey,\r\n    delegate: PublicKey,\r\n    owner: Signer | PublicKey,\r\n    amount: number | bigint,\r\n    decimals: number,\r\n    multiSigners: Signer[] = [],\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): Promise<TransactionSignature> {\r\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\r\n\r\n    const transaction = new Transaction().add(\r\n        createApproveCheckedInstruction(\r\n            account,\r\n            mint,\r\n            delegate,\r\n            ownerPublicKey,\r\n            amount,\r\n            decimals,\r\n            multiSigners,\r\n            programId,\r\n        ),\r\n    );\r\n\r\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\r\n}\r\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,+BAA+B,QAAQ,mCAAmC;AACnF,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;;;;;;;;;;;;;;;AAkBA,OAAO,eAAeC,cAAcA,CAChCC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,OAAkB,EAClBC,QAAmB,EACnBC,KAAyB,EACzBC,MAAuB,EACvBC,QAAgB,EAChBC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGd,gBAAgB;EAE5B,MAAM,CAACe,cAAc,EAAEC,OAAO,CAAC,GAAGd,UAAU,CAACO,KAAK,EAAEG,YAAY,CAAC;EAEjE,MAAMK,WAAW,GAAG,IAAIlB,WAAW,EAAE,CAACmB,GAAG,CACrCjB,+BAA+B,CAC3BM,OAAO,EACPD,IAAI,EACJE,QAAQ,EACRO,cAAc,EACdL,MAAM,EACNC,QAAQ,EACRC,YAAY,EACZE,SAAS,CACZ,CACJ;EAED,OAAO,MAAMhB,yBAAyB,CAACM,UAAU,EAAEa,WAAW,EAAE,CAACZ,KAAK,EAAE,GAAGW,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
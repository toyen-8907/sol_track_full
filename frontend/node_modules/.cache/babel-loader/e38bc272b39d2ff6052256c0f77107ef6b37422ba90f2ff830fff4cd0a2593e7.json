{"ast":null,"code":"import { u64 } from '@solana/buffer-layout-utils';\nimport { Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createUiAmountToAmountInstruction } from '../instructions/uiAmountToAmount.js';\n/**\r\n * Amount as a string using mint-prescribed decimals\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param mint           Mint for the account\r\n * @param amount         Ui Amount of tokens to be converted to Amount\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Ui Amount generated\r\n */\nexport async function uiAmountToAmount(connection, payer, mint, amount, programId = TOKEN_PROGRAM_ID) {\n  const transaction = new Transaction().add(createUiAmountToAmountInstruction(mint, amount, programId));\n  const {\n    returnData,\n    err\n  } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n  if (returnData) {\n    const data = Buffer.from(returnData.data[0], returnData.data[1]);\n    return u64().decode(data);\n  }\n  return err;\n}","map":{"version":3,"names":["u64","Transaction","TOKEN_PROGRAM_ID","createUiAmountToAmountInstruction","uiAmountToAmount","connection","payer","mint","amount","programId","transaction","add","returnData","err","simulateTransaction","value","data","Buffer","from","decode"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\actions\\uiAmountToAmount.ts"],"sourcesContent":["import { u64 } from '@solana/buffer-layout-utils';\r\nimport type { Connection, PublicKey, Signer, TransactionError } from '@solana/web3.js';\r\nimport { Transaction } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport { createUiAmountToAmountInstruction } from '../instructions/uiAmountToAmount.js';\r\n\r\n/**\r\n * Amount as a string using mint-prescribed decimals\r\n *\r\n * @param connection     Connection to use\r\n * @param payer          Payer of the transaction fees\r\n * @param mint           Mint for the account\r\n * @param amount         Ui Amount of tokens to be converted to Amount\r\n * @param programId      SPL Token program account\r\n *\r\n * @return Ui Amount generated\r\n */\r\nexport async function uiAmountToAmount(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    mint: PublicKey,\r\n    amount: string,\r\n    programId = TOKEN_PROGRAM_ID,\r\n): Promise<bigint | TransactionError | null> {\r\n    const transaction = new Transaction().add(createUiAmountToAmountInstruction(mint, amount, programId));\r\n    const { returnData, err } = (await connection.simulateTransaction(transaction, [payer], false)).value;\r\n    if (returnData) {\r\n        const data = Buffer.from(returnData.data[0], returnData.data[1]);\r\n        return u64().decode(data);\r\n    }\r\n    return err;\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,6BAA6B;AAEjD,SAASC,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,iCAAiC,QAAQ,qCAAqC;AAEvF;;;;;;;;;;;AAWA,OAAO,eAAeC,gBAAgBA,CAClCC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,MAAc,EACdC,SAAS,GAAGP,gBAAgB;EAE5B,MAAMQ,WAAW,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CAACR,iCAAiC,CAACI,IAAI,EAAEC,MAAM,EAAEC,SAAS,CAAC,CAAC;EACrG,MAAM;IAAEG,UAAU;IAAEC;EAAG,CAAE,GAAG,CAAC,MAAMR,UAAU,CAACS,mBAAmB,CAACJ,WAAW,EAAE,CAACJ,KAAK,CAAC,EAAE,KAAK,CAAC,EAAES,KAAK;EACrG,IAAIH,UAAU,EAAE;IACZ,MAAMI,IAAI,GAAGC,MAAM,CAACC,IAAI,CAACN,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC,EAAEJ,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;IAChE,OAAOhB,GAAG,EAAE,CAACmB,MAAM,CAACH,IAAI,CAAC;EAC7B;EACA,OAAOH,GAAG;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
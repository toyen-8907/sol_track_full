{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n/**\r\n * Create and initialize a new associated token account\r\n *\r\n * @param connection               Connection to use\r\n * @param payer                    Payer of the transaction and initialization fees\r\n * @param mint                     Mint for the account\r\n * @param owner                    Owner of the new account\r\n * @param confirmOptions           Options for confirming the transaction\r\n * @param programId                SPL Token program account\r\n * @param associatedTokenProgramId SPL Associated Token program account\r\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\r\n *\r\n * @return Address of the new associated token account\r\n */\nexport async function createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID, allowOwnerOffCurve = false) {\n  const associatedToken = getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve, programId, associatedTokenProgramId);\n  const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n  await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n  return associatedToken;\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","getAssociatedTokenAddressSync","createAssociatedTokenAccount","connection","payer","mint","owner","confirmOptions","programId","associatedTokenProgramId","allowOwnerOffCurve","associatedToken","transaction","add","publicKey"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\actions\\createAssociatedTokenAccount.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\r\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\r\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\r\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\r\n\r\n/**\r\n * Create and initialize a new associated token account\r\n *\r\n * @param connection               Connection to use\r\n * @param payer                    Payer of the transaction and initialization fees\r\n * @param mint                     Mint for the account\r\n * @param owner                    Owner of the new account\r\n * @param confirmOptions           Options for confirming the transaction\r\n * @param programId                SPL Token program account\r\n * @param associatedTokenProgramId SPL Associated Token program account\r\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\r\n *\r\n * @return Address of the new associated token account\r\n */\r\nexport async function createAssociatedTokenAccount(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    mint: PublicKey,\r\n    owner: PublicKey,\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_PROGRAM_ID,\r\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\r\n    allowOwnerOffCurve = false,\r\n): Promise<PublicKey> {\r\n    const associatedToken = getAssociatedTokenAddressSync(\r\n        mint,\r\n        owner,\r\n        allowOwnerOffCurve,\r\n        programId,\r\n        associatedTokenProgramId,\r\n    );\r\n\r\n    const transaction = new Transaction().add(\r\n        createAssociatedTokenAccountInstruction(\r\n            payer.publicKey,\r\n            associatedToken,\r\n            owner,\r\n            mint,\r\n            programId,\r\n            associatedTokenProgramId,\r\n        ),\r\n    );\r\n\r\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\r\n\r\n    return associatedToken;\r\n}\r\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,2BAA2B,EAAEC,gBAAgB,QAAQ,iBAAiB;AAC/E,SAASC,uCAAuC,QAAQ,2CAA2C;AACnG,SAASC,6BAA6B,QAAQ,kBAAkB;AAEhE;;;;;;;;;;;;;;AAcA,OAAO,eAAeC,4BAA4BA,CAC9CC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAgB,EAChBC,cAA+B,EAC/BC,SAAS,GAAGT,gBAAgB,EAC5BU,wBAAwB,GAAGX,2BAA2B,EACtDY,kBAAkB,GAAG,KAAK;EAE1B,MAAMC,eAAe,GAAGV,6BAA6B,CACjDI,IAAI,EACJC,KAAK,EACLI,kBAAkB,EAClBF,SAAS,EACTC,wBAAwB,CAC3B;EAED,MAAMG,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CACrCb,uCAAuC,CACnCI,KAAK,CAACU,SAAS,EACfH,eAAe,EACfL,KAAK,EACLD,IAAI,EACJG,SAAS,EACTC,wBAAwB,CAC3B,CACJ;EAED,MAAMb,yBAAyB,CAACO,UAAU,EAAES,WAAW,EAAE,CAACR,KAAK,CAAC,EAAEG,cAAc,CAAC;EAEjF,OAAOI,eAAe;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
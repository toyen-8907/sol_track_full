{"ast":null,"code":"import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeMintInstruction } from '../../instructions/initializeMint.js';\nimport { ExtensionType, getMintLen } from '../extensionType.js';\nimport { createInitializeInterestBearingMintInstruction, createUpdateRateInterestBearingMintInstruction } from './instructions.js';\n/**\r\n * Initialize an interest bearing account on a mint\r\n *\r\n * @param connection      Connection to use\r\n * @param payer           Payer of the transaction fees\r\n * @param mintAuthority   Account or multisig that will control minting\r\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\r\n * @param rateAuthority   The public key for the account that can update the rate\r\n * @param rate            The initial interest rate\r\n * @param decimals        Location of the decimal place\r\n * @param keypair         Optional keypair, defaulting to a new random one\r\n * @param confirmOptions  Options for confirming the transaction\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Public key of the mint\r\n */\nexport async function createInterestBearingMint(connection, payer, mintAuthority, freezeAuthority, rateAuthority, rate, decimals, keypair = Keypair.generate(), confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const mintLen = getMintLen([ExtensionType.InterestBearingConfig]);\n  const lamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: mintLen,\n    lamports,\n    programId\n  }), createInitializeInterestBearingMintInstruction(keypair.publicKey, rateAuthority, rate, programId), createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}\n/**\r\n * Update the interest rate of an interest bearing account\r\n *\r\n * @param connection      Connection to use\r\n * @param payer           Payer of the transaction fees\r\n * @param mint            Public key of the mint\r\n * @param rateAuthority   The public key for the account that can update the rate\r\n * @param rate            The initial interest rate\r\n * @param multiSigners    Signing accounts if `owner` is a multisig\r\n * @param confirmOptions  Options for confirming the transaction\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\nexport async function updateRateInterestBearingMint(connection, payer, mint, rateAuthority, rate, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [rateAuthorityPublicKey, signers] = getSigners(rateAuthority, multiSigners);\n  const transaction = new Transaction().add(createUpdateRateInterestBearingMintInstruction(mint, rateAuthorityPublicKey, rate, signers, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, rateAuthority, ...signers], confirmOptions);\n}","map":{"version":3,"names":["Keypair","sendAndConfirmTransaction","SystemProgram","Transaction","getSigners","TOKEN_2022_PROGRAM_ID","createInitializeMintInstruction","ExtensionType","getMintLen","createInitializeInterestBearingMintInstruction","createUpdateRateInterestBearingMintInstruction","createInterestBearingMint","connection","payer","mintAuthority","freezeAuthority","rateAuthority","rate","decimals","keypair","generate","confirmOptions","programId","mintLen","InterestBearingConfig","lamports","getMinimumBalanceForRentExemption","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space","updateRateInterestBearingMint","mint","multiSigners","rateAuthorityPublicKey","signers"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\extensions\\interestBearingMint\\actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\r\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\r\nimport { getSigners } from '../../actions/internal.js';\r\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\r\nimport { createInitializeMintInstruction } from '../../instructions/initializeMint.js';\r\nimport { ExtensionType, getMintLen } from '../extensionType.js';\r\nimport {\r\n    createInitializeInterestBearingMintInstruction,\r\n    createUpdateRateInterestBearingMintInstruction,\r\n} from './instructions.js';\r\n\r\n/**\r\n * Initialize an interest bearing account on a mint\r\n *\r\n * @param connection      Connection to use\r\n * @param payer           Payer of the transaction fees\r\n * @param mintAuthority   Account or multisig that will control minting\r\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\r\n * @param rateAuthority   The public key for the account that can update the rate\r\n * @param rate            The initial interest rate\r\n * @param decimals        Location of the decimal place\r\n * @param keypair         Optional keypair, defaulting to a new random one\r\n * @param confirmOptions  Options for confirming the transaction\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Public key of the mint\r\n */\r\nexport async function createInterestBearingMint(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    mintAuthority: PublicKey,\r\n    freezeAuthority: PublicKey,\r\n    rateAuthority: PublicKey,\r\n    rate: number,\r\n    decimals: number,\r\n    keypair = Keypair.generate(),\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_2022_PROGRAM_ID,\r\n): Promise<PublicKey> {\r\n    const mintLen = getMintLen([ExtensionType.InterestBearingConfig]);\r\n    const lamports = await connection.getMinimumBalanceForRentExemption(mintLen);\r\n    const transaction = new Transaction().add(\r\n        SystemProgram.createAccount({\r\n            fromPubkey: payer.publicKey,\r\n            newAccountPubkey: keypair.publicKey,\r\n            space: mintLen,\r\n            lamports,\r\n            programId,\r\n        }),\r\n        createInitializeInterestBearingMintInstruction(keypair.publicKey, rateAuthority, rate, programId),\r\n        createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId),\r\n    );\r\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\r\n    return keypair.publicKey;\r\n}\r\n\r\n/**\r\n * Update the interest rate of an interest bearing account\r\n *\r\n * @param connection      Connection to use\r\n * @param payer           Payer of the transaction fees\r\n * @param mint            Public key of the mint\r\n * @param rateAuthority   The public key for the account that can update the rate\r\n * @param rate            The initial interest rate\r\n * @param multiSigners    Signing accounts if `owner` is a multisig\r\n * @param confirmOptions  Options for confirming the transaction\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Signature of the confirmed transaction\r\n */\r\nexport async function updateRateInterestBearingMint(\r\n    connection: Connection,\r\n    payer: Signer,\r\n    mint: PublicKey,\r\n    rateAuthority: Signer,\r\n    rate: number,\r\n    multiSigners: Signer[] = [],\r\n    confirmOptions?: ConfirmOptions,\r\n    programId = TOKEN_2022_PROGRAM_ID,\r\n): Promise<string> {\r\n    const [rateAuthorityPublicKey, signers] = getSigners(rateAuthority, multiSigners);\r\n    const transaction = new Transaction().add(\r\n        createUpdateRateInterestBearingMintInstruction(mint, rateAuthorityPublicKey, rate, signers, programId),\r\n    );\r\n\r\n    return await sendAndConfirmTransaction(connection, transaction, [payer, rateAuthority, ...signers], confirmOptions);\r\n}\r\n"],"mappings":"AACA,SAASA,OAAO,EAAEC,yBAAyB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AAChG,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,qBAAqB,QAAQ,oBAAoB;AAC1D,SAASC,+BAA+B,QAAQ,sCAAsC;AACtF,SAASC,aAAa,EAAEC,UAAU,QAAQ,qBAAqB;AAC/D,SACIC,8CAA8C,EAC9CC,8CAA8C,QAC3C,mBAAmB;AAE1B;;;;;;;;;;;;;;;;AAgBA,OAAO,eAAeC,yBAAyBA,CAC3CC,UAAsB,EACtBC,KAAa,EACbC,aAAwB,EACxBC,eAA0B,EAC1BC,aAAwB,EACxBC,IAAY,EACZC,QAAgB,EAChBC,OAAO,GAAGnB,OAAO,CAACoB,QAAQ,EAAE,EAC5BC,cAA+B,EAC/BC,SAAS,GAAGjB,qBAAqB;EAEjC,MAAMkB,OAAO,GAAGf,UAAU,CAAC,CAACD,aAAa,CAACiB,qBAAqB,CAAC,CAAC;EACjE,MAAMC,QAAQ,GAAG,MAAMb,UAAU,CAACc,iCAAiC,CAACH,OAAO,CAAC;EAC5E,MAAMI,WAAW,GAAG,IAAIxB,WAAW,EAAE,CAACyB,GAAG,CACrC1B,aAAa,CAAC2B,aAAa,CAAC;IACxBC,UAAU,EAAEjB,KAAK,CAACkB,SAAS;IAC3BC,gBAAgB,EAAEb,OAAO,CAACY,SAAS;IACnCE,KAAK,EAAEV,OAAO;IACdE,QAAQ;IACRH;GACH,CAAC,EACFb,8CAA8C,CAACU,OAAO,CAACY,SAAS,EAAEf,aAAa,EAAEC,IAAI,EAAEK,SAAS,CAAC,EACjGhB,+BAA+B,CAACa,OAAO,CAACY,SAAS,EAAEb,QAAQ,EAAEJ,aAAa,EAAEC,eAAe,EAAEO,SAAS,CAAC,CAC1G;EACD,MAAMrB,yBAAyB,CAACW,UAAU,EAAEe,WAAW,EAAE,CAACd,KAAK,EAAEM,OAAO,CAAC,EAAEE,cAAc,CAAC;EAC1F,OAAOF,OAAO,CAACY,SAAS;AAC5B;AAEA;;;;;;;;;;;;;;AAcA,OAAO,eAAeG,6BAA6BA,CAC/CtB,UAAsB,EACtBC,KAAa,EACbsB,IAAe,EACfnB,aAAqB,EACrBC,IAAY,EACZmB,YAAA,GAAyB,EAAE,EAC3Bf,cAA+B,EAC/BC,SAAS,GAAGjB,qBAAqB;EAEjC,MAAM,CAACgC,sBAAsB,EAAEC,OAAO,CAAC,GAAGlC,UAAU,CAACY,aAAa,EAAEoB,YAAY,CAAC;EACjF,MAAMT,WAAW,GAAG,IAAIxB,WAAW,EAAE,CAACyB,GAAG,CACrClB,8CAA8C,CAACyB,IAAI,EAAEE,sBAAsB,EAAEpB,IAAI,EAAEqB,OAAO,EAAEhB,SAAS,CAAC,CACzG;EAED,OAAO,MAAMrB,yBAAyB,CAACW,UAAU,EAAEe,WAAW,EAAE,CAACd,KAAK,EAAEG,aAAa,EAAE,GAAGsB,OAAO,CAAC,EAAEjB,cAAc,CAAC;AACvH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var MemoTransferInstruction;\n(function (MemoTransferInstruction) {\n  MemoTransferInstruction[MemoTransferInstruction[\"Enable\"] = 0] = \"Enable\";\n  MemoTransferInstruction[MemoTransferInstruction[\"Disable\"] = 1] = \"Disable\";\n})(MemoTransferInstruction || (MemoTransferInstruction = {}));\n/** TODO: docs */\nexport const memoTransferInstructionData = struct([u8('instruction'), u8('memoTransferInstruction')]);\n/**\r\n * Construct an EnableRequiredMemoTransfers instruction\r\n *\r\n * @param account         Token account to update\r\n * @param authority       The account's owner/delegate\r\n * @param signers         The signer account(s)\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createEnableRequiredMemoTransfersInstruction(account, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  return createMemoTransferInstruction(MemoTransferInstruction.Enable, account, authority, multiSigners, programId);\n}\n/**\r\n * Construct a DisableMemoTransfer instruction\r\n *\r\n * @param account         Token account to update\r\n * @param authority       The account's owner/delegate\r\n * @param signers         The signer account(s)\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\nexport function createDisableRequiredMemoTransfersInstruction(account, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  return createMemoTransferInstruction(MemoTransferInstruction.Disable, account, authority, multiSigners, programId);\n}\nfunction createMemoTransferInstruction(memoTransferInstruction, account, authority, multiSigners, programId) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(memoTransferInstructionData.span);\n  memoTransferInstructionData.encode({\n    instruction: TokenInstruction.MemoTransferExtension,\n    memoTransferInstruction\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":{"version":3,"names":["struct","u8","TransactionInstruction","programSupportsExtensions","TOKEN_2022_PROGRAM_ID","TokenUnsupportedInstructionError","addSigners","TokenInstruction","MemoTransferInstruction","memoTransferInstructionData","createEnableRequiredMemoTransfersInstruction","account","authority","multiSigners","programId","createMemoTransferInstruction","Enable","createDisableRequiredMemoTransfersInstruction","Disable","memoTransferInstruction","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","MemoTransferExtension"],"sources":["C:\\monitor_sol_web\\solactrackmap\\node_modules\\@solana\\spl-token\\src\\extensions\\memoTransfer\\instructions.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\r\nimport type { PublicKey, Signer } from '@solana/web3.js';\r\nimport { TransactionInstruction } from '@solana/web3.js';\r\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\r\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\r\nimport { addSigners } from '../../instructions/internal.js';\r\nimport { TokenInstruction } from '../../instructions/types.js';\r\n\r\nexport enum MemoTransferInstruction {\r\n    Enable = 0,\r\n    Disable = 1,\r\n}\r\n\r\n/** TODO: docs */\r\nexport interface MemoTransferInstructionData {\r\n    instruction: TokenInstruction.MemoTransferExtension;\r\n    memoTransferInstruction: MemoTransferInstruction;\r\n}\r\n\r\n/** TODO: docs */\r\nexport const memoTransferInstructionData = struct<MemoTransferInstructionData>([\r\n    u8('instruction'),\r\n    u8('memoTransferInstruction'),\r\n]);\r\n\r\n/**\r\n * Construct an EnableRequiredMemoTransfers instruction\r\n *\r\n * @param account         Token account to update\r\n * @param authority       The account's owner/delegate\r\n * @param signers         The signer account(s)\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createEnableRequiredMemoTransfersInstruction(\r\n    account: PublicKey,\r\n    authority: PublicKey,\r\n    multiSigners: (Signer | PublicKey)[] = [],\r\n    programId = TOKEN_2022_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    return createMemoTransferInstruction(MemoTransferInstruction.Enable, account, authority, multiSigners, programId);\r\n}\r\n\r\n/**\r\n * Construct a DisableMemoTransfer instruction\r\n *\r\n * @param account         Token account to update\r\n * @param authority       The account's owner/delegate\r\n * @param signers         The signer account(s)\r\n * @param programId       SPL Token program account\r\n *\r\n * @return Instruction to add to a transaction\r\n */\r\nexport function createDisableRequiredMemoTransfersInstruction(\r\n    account: PublicKey,\r\n    authority: PublicKey,\r\n    multiSigners: (Signer | PublicKey)[] = [],\r\n    programId = TOKEN_2022_PROGRAM_ID,\r\n): TransactionInstruction {\r\n    return createMemoTransferInstruction(MemoTransferInstruction.Disable, account, authority, multiSigners, programId);\r\n}\r\n\r\nfunction createMemoTransferInstruction(\r\n    memoTransferInstruction: MemoTransferInstruction,\r\n    account: PublicKey,\r\n    authority: PublicKey,\r\n    multiSigners: (Signer | PublicKey)[],\r\n    programId: PublicKey,\r\n): TransactionInstruction {\r\n    if (!programSupportsExtensions(programId)) {\r\n        throw new TokenUnsupportedInstructionError();\r\n    }\r\n\r\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], authority, multiSigners);\r\n    const data = Buffer.alloc(memoTransferInstructionData.span);\r\n    memoTransferInstructionData.encode(\r\n        {\r\n            instruction: TokenInstruction.MemoTransferExtension,\r\n            memoTransferInstruction,\r\n        },\r\n        data,\r\n    );\r\n\r\n    return new TransactionInstruction({ keys, programId, data });\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,yBAAyB,EAAEC,qBAAqB,QAAQ,oBAAoB;AACrF,SAASC,gCAAgC,QAAQ,iBAAiB;AAClE,SAASC,UAAU,QAAQ,gCAAgC;AAC3D,SAASC,gBAAgB,QAAQ,6BAA6B;AAE9D,WAAYC,uBAGX;AAHD,WAAYA,uBAAuB;EAC/BA,uBAAA,CAAAA,uBAAA,0BAAU;EACVA,uBAAA,CAAAA,uBAAA,4BAAW;AACf,CAAC,EAHWA,uBAAuB,KAAvBA,uBAAuB;AAWnC;AACA,OAAO,MAAMC,2BAA2B,GAAGT,MAAM,CAA8B,CAC3EC,EAAE,CAAC,aAAa,CAAC,EACjBA,EAAE,CAAC,yBAAyB,CAAC,CAChC,CAAC;AAEF;;;;;;;;;;AAUA,OAAM,SAAUS,4CAA4CA,CACxDC,OAAkB,EAClBC,SAAoB,EACpBC,YAAA,GAAuC,EAAE,EACzCC,SAAS,GAAGV,qBAAqB;EAEjC,OAAOW,6BAA6B,CAACP,uBAAuB,CAACQ,MAAM,EAAEL,OAAO,EAAEC,SAAS,EAAEC,YAAY,EAAEC,SAAS,CAAC;AACrH;AAEA;;;;;;;;;;AAUA,OAAM,SAAUG,6CAA6CA,CACzDN,OAAkB,EAClBC,SAAoB,EACpBC,YAAA,GAAuC,EAAE,EACzCC,SAAS,GAAGV,qBAAqB;EAEjC,OAAOW,6BAA6B,CAACP,uBAAuB,CAACU,OAAO,EAAEP,OAAO,EAAEC,SAAS,EAAEC,YAAY,EAAEC,SAAS,CAAC;AACtH;AAEA,SAASC,6BAA6BA,CAClCI,uBAAgD,EAChDR,OAAkB,EAClBC,SAAoB,EACpBC,YAAoC,EACpCC,SAAoB;EAEpB,IAAI,CAACX,yBAAyB,CAACW,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIT,gCAAgC,EAAE;EAChD;EAEA,MAAMe,IAAI,GAAGd,UAAU,CAAC,CAAC;IAAEe,MAAM,EAAEV,OAAO;IAAEW,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC,EAAEX,SAAS,EAAEC,YAAY,CAAC;EAC1G,MAAMW,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACjB,2BAA2B,CAACkB,IAAI,CAAC;EAC3DlB,2BAA2B,CAACmB,MAAM,CAC9B;IACIC,WAAW,EAAEtB,gBAAgB,CAACuB,qBAAqB;IACnDX;GACH,EACDK,IAAI,CACP;EAED,OAAO,IAAItB,sBAAsB,CAAC;IAAEkB,IAAI;IAAEN,SAAS;IAAEU;EAAI,CAAE,CAAC;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
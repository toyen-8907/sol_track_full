{"ast":null,"code":"var _s = $RefreshSig$();\n// 导入 React 和必要的钩子函数\nimport React, { useEffect } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nconst WebSocketComponent = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(({\n  onConnectionStatus,\n  account,\n  onMessageReceived,\n  onConnectionResult\n}) => {\n  _s();\n  useEffect(() => {\n    // 从环境变量中获取端点\n    const RPC_ENDPOINT = process.env.REACT_APP_RPC_ENDPOINT;\n    const WS_ENDPOINT = process.env.REACT_APP_WS_ENDPOINT;\n\n    // 检查环境变量是否已定义\n    if (!RPC_ENDPOINT || !WS_ENDPOINT) {\n      console.error('RPC_ENDPOINT or WS_ENDPOINT is not defined in .env file.');\n      onConnectionStatus('Error');\n      return;\n    }\n\n    // 创建 Solana 连接，指定 HTTP 和 WebSocket 端点\n    const connection = new Connection(RPC_ENDPOINT, {\n      wsEndpoint: WS_ENDPOINT,\n      commitment: 'confirmed' // 设置承诺级别\n    });\n\n    // 监听 WebSocket 连接的状态变化\n    connection._rpcWebSocket.on('open', () => {\n      console.log('WebSocket connection opened.');\n      onConnectionStatus('Connected');\n    });\n    connection._rpcWebSocket.on('close', () => {\n      console.log('WebSocket connection closed.');\n      onConnectionStatus('Disconnected');\n    });\n    connection._rpcWebSocket.on('error', error => {\n      console.error('WebSocket connection error:', error);\n      onConnectionStatus('Error');\n    });\n\n    // 将账户地址转换为 PublicKey 对象\n    const publicKey = new PublicKey(account);\n\n    // 订阅账户变化\n    const subscriptionId = connection.onAccountChange(publicKey, (accountInfo, context) => {\n      // 解析账户信息\n      const lamports = accountInfo.lamports;\n      console.log('Updated account info:', accountInfo);\n      console.log('Slot:', context.slot);\n\n      // 调用回调函数传递余额信息\n      if (lamports !== undefined) {\n        onMessageReceived(`余额: ${lamports}`);\n      }\n\n      // 传递 slot 信息\n      onConnectionResult(`Slot: ${context.slot}`);\n    }, 'confirmed');\n\n    // 组件卸载时取消订阅\n    return () => {\n      connection.removeAccountChangeListener(subscriptionId).then(() => {\n        console.log('Account change listener removed.');\n        onConnectionStatus('Disconnected');\n      }).catch(error => {\n        console.error('Error removing account change listener:', error);\n      });\n    };\n  }, [onConnectionStatus, account, onMessageReceived, onConnectionResult]);\n\n  // 该组件不渲染任何 UI\n  return null;\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = WebSocketComponent;\nexport default WebSocketComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"WebSocketComponent$React.memo\");\n$RefreshReg$(_c2, \"WebSocketComponent\");","map":{"version":3,"names":["React","useEffect","Connection","PublicKey","WebSocketComponent","_s","memo","_c","onConnectionStatus","account","onMessageReceived","onConnectionResult","RPC_ENDPOINT","process","env","REACT_APP_RPC_ENDPOINT","WS_ENDPOINT","REACT_APP_WS_ENDPOINT","console","error","connection","wsEndpoint","commitment","_rpcWebSocket","on","log","publicKey","subscriptionId","onAccountChange","accountInfo","context","lamports","slot","undefined","removeAccountChangeListener","then","catch","_c2","$RefreshReg$"],"sources":["/Users/damentp01/project/sol_track_ac/src/WebSocketComponent.js"],"sourcesContent":["// 导入 React 和必要的钩子函数\nimport React, { useEffect } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\n\nconst WebSocketComponent = React.memo(({ onConnectionStatus, account, onMessageReceived, onConnectionResult }) => {\n\n  useEffect(() => {\n    // 从环境变量中获取端点\n    const RPC_ENDPOINT = process.env.REACT_APP_RPC_ENDPOINT;\n    const WS_ENDPOINT = process.env.REACT_APP_WS_ENDPOINT;\n\n    // 检查环境变量是否已定义\n    if (!RPC_ENDPOINT || !WS_ENDPOINT) {\n      console.error('RPC_ENDPOINT or WS_ENDPOINT is not defined in .env file.');\n      onConnectionStatus('Error');\n      return;\n    }\n\n    // 创建 Solana 连接，指定 HTTP 和 WebSocket 端点\n    const connection = new Connection(\n      RPC_ENDPOINT,\n      {\n        wsEndpoint: WS_ENDPOINT,\n        commitment: 'confirmed', // 设置承诺级别\n      }\n    );\n\n    // 监听 WebSocket 连接的状态变化\n    connection._rpcWebSocket.on('open', () => {\n      console.log('WebSocket connection opened.');\n      onConnectionStatus('Connected');\n    });\n\n    connection._rpcWebSocket.on('close', () => {\n      console.log('WebSocket connection closed.');\n      onConnectionStatus('Disconnected');\n    });\n\n    connection._rpcWebSocket.on('error', (error) => {\n      console.error('WebSocket connection error:', error);\n      onConnectionStatus('Error');\n    });\n\n    // 将账户地址转换为 PublicKey 对象\n    const publicKey = new PublicKey(account);\n\n    // 订阅账户变化\n    const subscriptionId = connection.onAccountChange(\n      publicKey,\n      (accountInfo, context) => {\n        // 解析账户信息\n        const lamports = accountInfo.lamports;\n        console.log('Updated account info:', accountInfo);\n        console.log('Slot:', context.slot);\n\n        // 调用回调函数传递余额信息\n        if (lamports !== undefined) {\n          onMessageReceived(`余额: ${lamports}`);\n        }\n\n        // 传递 slot 信息\n        onConnectionResult(`Slot: ${context.slot}`);\n      },\n      'confirmed'\n    );\n\n    // 组件卸载时取消订阅\n    return () => {\n      connection.removeAccountChangeListener(subscriptionId)\n        .then(() => {\n          console.log('Account change listener removed.');\n          onConnectionStatus('Disconnected');\n        })\n        .catch((error) => {\n          console.error('Error removing account change listener:', error);\n        });\n    };\n  }, [onConnectionStatus, account, onMessageReceived, onConnectionResult]);\n\n  // 该组件不渲染任何 UI\n  return null;\n});\n\nexport default WebSocketComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
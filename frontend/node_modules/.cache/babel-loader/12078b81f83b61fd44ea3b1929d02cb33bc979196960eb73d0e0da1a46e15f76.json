{"ast":null,"code":"import { struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n/** Buffer layout for de/serializing a Group Pointer extension */\nexport const GroupMemberPointerLayout = struct([publicKey('authority'), publicKey('memberAddress')]);\nexport const GROUP_MEMBER_POINTER_SIZE = GroupMemberPointerLayout.span;\nexport function getGroupMemberPointerState(mint) {\n  const extensionData = getExtensionData(ExtensionType.GroupMemberPointer, mint.tlvData);\n  if (extensionData !== null) {\n    const {\n      authority,\n      memberAddress\n    } = GroupMemberPointerLayout.decode(extensionData);\n    // Explicitly set None/Zero keys to null\n    return {\n      authority: authority.equals(PublicKey.default) ? null : authority,\n      memberAddress: memberAddress.equals(PublicKey.default) ? null : memberAddress\n    };\n  } else {\n    return null;\n  }\n}","map":{"version":3,"names":["struct","publicKey","PublicKey","ExtensionType","getExtensionData","GroupMemberPointerLayout","GROUP_MEMBER_POINTER_SIZE","span","getGroupMemberPointerState","mint","extensionData","GroupMemberPointer","tlvData","authority","memberAddress","decode","equals","default"],"sources":["/Users/damentp01/project/sol_track_ac/node_modules/@solana/spl-token/src/extensions/groupMemberPointer/state.ts"],"sourcesContent":["import { struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\n/** GroupMemberPointer as stored by the program */\nexport interface GroupMemberPointer {\n    /** Optional authority that can set the member address */\n    authority: PublicKey | null;\n    /** Optional account address that holds the member */\n    memberAddress: PublicKey | null;\n}\n\n/** Buffer layout for de/serializing a Group Pointer extension */\nexport const GroupMemberPointerLayout = struct<{ authority: PublicKey; memberAddress: PublicKey }>([\n    publicKey('authority'),\n    publicKey('memberAddress'),\n]);\n\nexport const GROUP_MEMBER_POINTER_SIZE = GroupMemberPointerLayout.span;\n\nexport function getGroupMemberPointerState(mint: Mint): Partial<GroupMemberPointer> | null {\n    const extensionData = getExtensionData(ExtensionType.GroupMemberPointer, mint.tlvData);\n    if (extensionData !== null) {\n        const { authority, memberAddress } = GroupMemberPointerLayout.decode(extensionData);\n\n        // Explicitly set None/Zero keys to null\n        return {\n            authority: authority.equals(PublicKey.default) ? null : authority,\n            memberAddress: memberAddress.equals(PublicKey.default) ? null : memberAddress,\n        };\n    } else {\n        return null;\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,SAAS,QAAQ,iBAAiB;AAE3C,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,qBAAqB;AAUrE;AACA,OAAO,MAAMC,wBAAwB,GAAGL,MAAM,CAAqD,CAC/FC,SAAS,CAAC,WAAW,CAAC,EACtBA,SAAS,CAAC,eAAe,CAAC,CAC7B,CAAC;AAEF,OAAO,MAAMK,yBAAyB,GAAGD,wBAAwB,CAACE,IAAI;AAEtE,OAAM,SAAUC,0BAA0BA,CAACC,IAAU;EACjD,MAAMC,aAAa,GAAGN,gBAAgB,CAACD,aAAa,CAACQ,kBAAkB,EAAEF,IAAI,CAACG,OAAO,CAAC;EACtF,IAAIF,aAAa,KAAK,IAAI,EAAE;IACxB,MAAM;MAAEG,SAAS;MAAEC;IAAa,CAAE,GAAGT,wBAAwB,CAACU,MAAM,CAACL,aAAa,CAAC;IAEnF;IACA,OAAO;MACHG,SAAS,EAAEA,SAAS,CAACG,MAAM,CAACd,SAAS,CAACe,OAAO,CAAC,GAAG,IAAI,GAAGJ,SAAS;MACjEC,aAAa,EAAEA,aAAa,CAACE,MAAM,CAACd,SAAS,CAACe,OAAO,CAAC,GAAG,IAAI,GAAGH;KACnE;EACL,CAAC,MAAM;IACH,OAAO,IAAI;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}